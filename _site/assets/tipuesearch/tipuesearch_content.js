var tipuesearch = {"pages": [{
    "title": "Beef McNuggets",
    "text": "Farmer Brown’s cows are up in arms, having heard that McDonalds is considering the introduction of a new product: Beef McNuggets. The cows are trying to find any possible way to put such a product in a negative light. One strategy the cows are pursuing is that of ‘inferior packaging’. “Look,” say the cows, “if you have Beef McNuggets in boxes of 3, 6, and 10, you can not satisfy a customer who wants 1, 2, 4, 5, 7, 8, 11, 14, or 17 McNuggets. Bad packaging: bad product.” Help the cows. Given N (the number of packaging options, 1 &lt;= N &lt;= 10), and a set of N positive integers (1 &lt;= i &lt;= 256) that represent the number of nuggets in the various packages, output the largest number of nuggets that can not be purchased by buying nuggets in the given sizes. Print 0 if all possible purchases can be made or if there is no bound to the largest number. The largest impossible number (if it exists) will be no larger than 2,000,000,000. PROGRAM NAME: nuggets INPUT FORMAT Line 1: N, the number of packaging options Line 2..N+1: The number of nuggets in one kind of box SAMPLE INPUT (file nuggets.in) 3 3 6 10 OUTPUT FORMAT The output file should contain a single line containing a single integer that represents the largest number of nuggets that can not be represented or 0 if all possible purchases can be made or if there is no bound to the largest number. SAMPLE OUTPUT (file nuggets.out) 17",
    "tags": "USACO",
    "url": "/usaco/2019/01/28/nuggets.html"
  },{
    "title": "Raucous Rockers",
    "text": "You just inherited the rights to N (1 &lt;= N &lt;= 20) previously unreleased songs recorded by the popular group Raucous Rockers. You plan to release a set of M (1 &lt;= M &lt;= 20) compact disks with a selection of these songs. Each disk can hold a maximum of T (1 &lt;= T &lt;= 20) minutes of music, and a song can not overlap from one disk to another. Since you are a classical music fan and have no way to judge the artistic merits of these songs, you decide on the following criteria for making the selection: The songs on the set of disks must appear in the order of the dates that they were written. The total number of songs included will be maximized. PROGRAM NAME: rockers INPUT FORMAT Line 1: Three integers: N, T, and M. Line 2: N integers that are the lengths of the songs ordered by the date they were written. SAMPLE INPUT (file rockers.in) 4 5 2 4 3 4 2 OUTPUT FORMAT A single line with an integer that is the number of songs that will fit on M disks. SAMPLE OUTPUT (file rockers.out) 3",
    "tags": "USACO",
    "url": "/usaco/2019/01/28/rockers.html"
  },{
    "title": "Electric Fence",
    "text": "In this problem, ‘lattice points’ in the plane are points with integer coordinates. In order to contain his cows, Farmer John constructs a triangular electric fence by stringing a ‘hot’ wire from the origin (0,0) to a lattice point (n,m), then to a lattice point on the positive x axis (p,0), with all between 1 and 32000, and then back to the origin (0,0). A cow can be placed at each lattice point within the fence without touching the fence (very thin cows). Cows can not be placed on lattice points that the fence touches. How many cows can a given fence hold? PROGRAM NAME: fence9 INPUT FORMAT The single input line contains three space-separated integers that denote n, m, and p. SAMPLE INPUT (file fence9.in) 7 5 10 OUTPUT FORMAT A single line with a single integer that represents the number of cows the specified fence can hold. SAMPLE OUTPUT (file fence9.out) 20",
    "tags": "USACO",
    "url": "/usaco/2019/01/22/fence9.html"
  },{
    "title": "American Heritage",
    "text": "Farmer John takes the heritage of his cows very seriously. He is not, however, a truly fine bookkeeper. He keeps his cow genealogies as binary trees and, instead of writing them in graphic form, he records them in the more linear ‘tree in-order’ and ‘tree pre-order’ notations. Your job is to create the ‘tree post-order’ notation of a cow’s heritage after being given the in-order and pre-order notations. Each cow name is encoded as a unique letter. (You may already know that you can frequently reconstruct a tree from any two of the ordered traversals.) Obviously, the trees will have no more than 26 nodes. Here is a graphical representation of the tree used in the sample input and output: C / \\ / \\ B G / \\ / A D H / \\ E F The in-order traversal of this tree prints the left sub-tree, the root, and the right sub-tree. The pre-order traversal of this tree prints the root, the left sub-tree, and the right sub-tree. The post-order traversal of this tree print the left sub-tree, the right sub-tree, and the root. PROGRAM NAME: heritage INPUT FORMAT Line 1: The in-order representation of a tree. Line 2: The pre-order representation of that same tree. SAMPLE INPUT (file heritage.in) ABEDFCHG CBADEFGH OUTPUT FORMAT A single line with the post-order representation of the tree. SAMPLE OUTPUT (file heritage.out) AEFDBHGC",
    "tags": "USACO",
    "url": "/usaco/2019/01/16/heritage.html"
  },{
    "title": "A Game",
    "text": "Consider the following two-player game played with a sequence of N positive integers (2 &lt;= N &lt;= 100) laid onto a 1 x N game board. Player 1 starts the game. The players move alternately by selecting a number from either the left or the right end of the gameboard. That number is then deleted from the board, and its value is added to the score of the player who selected it. A player wins if his sum is greater than his opponents. Write a program that implements the optimal strategy. The optimal strategy yields maximum points when playing against the “best possible” opponent. Your program must further implement an optimal strategy for player 2. PROGRAM NAME: game1 INPUT FORMAT Line 1: N, the size of the board. Line 2..etc: N integers in the range (1..200) that are the contents of the game board, from left to right. SAMPLE INPUT (file game1.in) 6 4 7 2 9 5 2 OUTPUT FORMAT Two space-separated integers on a line: the score of Player 1 followed by the score of Player 2. SAMPLE OUTPUT (file game1.out) 18 11",
    "tags": "USACO",
    "url": "/usaco/2019/01/14/game1.html"
  },{
    "title": "Camelot",
    "text": "Centuries ago, King Arthur and the Knights of the Round Table used to meet every year on New Year’s Day to celebrate their fellowship. In remembrance of these events, we consider a board game for one player, on which one chesspiece king and several knight pieces are placed on squares, no two knights on the same square. This example board is the standard 8x8 array of squares: The King can move like a king in chess as long as it does not fall off the board: A Knight can jump like a knight in chess to ), as long as it does not fall off the board. During the play, the player can place more than one piece in the same square. The board squares are assumed big enough so that a piece is never an obstacle for any other piece to move freely. The player’s goal is to move the pieces so as to gather them all in the same square - in the minimal number of moves. To achieve this, he must move the pieces as prescribed above. Additionally, whenever the king and one or more knights are placed in the same square, the player may choose to move the king and one of the knights together from that point on, as a single knight, up to the final gathering point. Moving the knight together with the king counts as a single move. Write a program to compute the minimum number of moves the player must perform to produce the gathering. The pieces can gather on any square, of course. PROGRAM NAME: camelot INPUT FORMAT Line 1: Two space-separated integers: R,C, the number of rows and columns on the board. There will be no more than 26 columns and no more than 30 rows. Line 2..end: The input file contains a sequence of space-separated letter/digit pairs, 1 or more per line. The first pair represents the board position of the king; subsequent pairs represent positions of knights. There might be 0 knights or the knights might fill the board. Rows are numbered starting at 1; columns are specified as upper case characters starting with ‘A’. SAMPLE INPUT (file camelot.in) 8 8 D 4 A 3 A 8 H 1 H 8 The king is positioned at D4. There are four knights, positioned at A3, A8, H1, and H8. OUTPUT FORMAT A single line with the number of moves to aggregate the pieces. SAMPLE OUTPUT (file camelot.out) 10 SAMPLE OUTPUT ELABORATION They gather at B5. Knight 1: A3 - B5 (1 move) Knight 2: A8 - C7 - B5 (2 moves) Knight 3: H1 - G3 - F5 - D4 (picking up king) - B5 (4 moves) Knight 4: H8 - F7 - D6 - B5 (3 moves) 1 + 2 + 4 + 3 = 10 moves.",
    "tags": "USACO",
    "url": "/usaco/2019/01/12/camelot.html"
  },{
    "title": "Home on the Range",
    "text": "Farmer John grazes his cows on a large, square field N (2 &lt;= N &lt;= 250) miles on a side (because, for some reason, his cows will only graze on precisely square land segments). Regrettably, the cows have ravaged some of the land (always in 1 mile square increments). FJ needs to map the remaining squares (at least 2x2 on a side) on which his cows can graze (in these larger squares, no 1x1 mile segments are ravaged). Your task is to count up all the various square grazing areas within the supplied dataset and report the number of square grazing areas (of sizes &gt;= 2x2) remaining. Of course, grazing areas may overlap for purposes of this report. PROGRAM NAME: range INPUT FORMAT Line 1: N, the number of miles on each side of the field. Line 2..N+1: N characters with no spaces. 0 represents “ravaged for that block; 1 represents “ready to eat”. SAMPLE INPUT (file range.in) 6 101111 001111 111111 001111 101101 111001 OUTPUT FORMAT Potentially several lines with the size of the square and the number of such squares that exist. Order them in ascending order from smallest to largest size. SAMPLE OUTPUT (file range.out) 2 10 3 4 4 1",
    "tags": "USACO",
    "url": "/usaco/2018/12/20/range.html"
  },{
    "title": "Shopping Offers",
    "text": "In a certain shop, each kind of product has an integer price. For example, the price of a flower is 2 zorkmids (z) and the price of a vase is 5z. In order to attract more customers, the shop introduces some special offers. A special offer consists of one or more product items together for a reduced price, also an integer. Examples: three flowers for 5z instead of 6z, or two vases together with one flower for 10z instead of 12z. Write a program that calculates the price a customer has to pay for a purchase, making optimal use of the special offers to make the price as low as possible. You are not allowed to add items, even if that would lower the price. For the prices and offers given above, the (lowest) price for three flowers and two vases is 14z: two vases and one flower for the reduced price of 10z and two flowers for the regular price of 4z. PROGRAM NAME: shopping INPUT FORMAT The input file has a set of offers followed by a purchase. Line 1: s, the number of special offers, (0 &lt;= s &lt;= 99). Line 2..s+1: Each line describes an offer using several integers. The first integer is n (1 &lt;= n &lt;= 5), the number of products that are offered. The subsequent n pairs of integers c and k indicate that k items (1 &lt;= k &lt;= 5) with product code c (1 &lt;= c &lt;= 999) are part of the offer. The last number p on the line stands for the reduced price (1 &lt;= p &lt;= 9999). The reduced price of an offer is less than the sum of the regular prices. Line s+2: The first line contains the number b (0 &lt;= b &lt;= 5) of different kinds of products to be purchased. Line s+3..s+b+2: Each of the subsequent b lines contains three values: c, k, and p. The value c is the (unique) product code (1 &lt;= c &lt;= 999). The value k indicates how many items of this product are to be purchased (1 &lt;= k &lt;= 5). The value p is the regular price per item (1 &lt;= p &lt;= 999). At most 5*5=25 items can be in the basket. SAMPLE INPUT (file shopping.in) 2 1 7 3 5 2 7 1 8 2 10 2 7 3 2 8 2 5 OUTPUT FORMAT A single line with one integer: the lowest possible price to be paid for the purchases. SAMPLE OUTPUT (file shopping.out) 14",
    "tags": "USACO",
    "url": "/usaco/2018/12/20/shopping.html"
  },{
    "title": "Riding the Fences",
    "text": "Farmer John owns a large number of fences that must be repaired annually. He traverses the fences by riding a horse along each and every one of them (and nowhere else) and fixing the broken parts. Farmer John is as lazy as the next farmer and hates to ride the same fence twice. Your program must read in a description of a network of fences and tell Farmer John a path to traverse each fence length exactly once, if possible. Farmer J can, if he wishes, start and finish at any fence intersection. Every fence connects two fence intersections, which are numbered inclusively from 1 through 500 (though some farms have far fewer than 500 intersections). Any number of fences (&gt;=1) can meet at a fence intersection. It is always possible to ride from any fence to any other fence (i.e., all fences are “connected”). Your program must output the path of intersections that, if interpreted as a base 500 number, would have the smallest magnitude. There will always be at least one solution for each set of input data supplied to your program for testing. PROGRAM NAME: fence INPUT FORMAT Line 1: The number of fences, F (1 &lt;= F &lt;= 1024) Line 2..F+1: A pair of integers (1 &lt;= i,j &lt;= 500) that tell which pair of intersections this fence connects. SAMPLE INPUT (file fence.in) 9 1 2 2 3 3 4 4 2 4 5 2 5 5 6 5 7 4 6 OUTPUT FORMAT The output consists of F+1 lines, each containing a single integer. Print the number of the starting intersection on the first line, the next intersection’s number on the next line, and so on, until the final intersection on the last line. There might be many possible answers to any given input set, but only one is ordered correctly. SAMPLE OUTPUT (file fence.out) 1 2 3 4 2 5 4 6 5 7",
    "tags": "USACO",
    "url": "/usaco/2018/12/12/fence.html"
  },{
    "title": "Magic Squares",
    "text": "Following the success of the magic cube, Mr. Rubik invented its planar version, called magic squares. This is a sheet composed of 8 equal-sized squares: 1234 8765 In this task we consider the version where each square has a different color. Colors are denoted by the first 8 positive integers. A sheet configuration is given by the sequence of colors obtained by reading the colors of the squares starting at the upper left corner and going in clockwise direction. For instance, the configuration of Figure 3 is given by the sequence (1,2,3,4,5,6,7,8). This configuration is the initial configuration. Three basic transformations, identified by the letters ‘A’, ‘B’ and ‘C’, can be applied to a sheet: ‘A’: exchange the top and bottom row, ‘B’: single right circular shifting of the rectangle, ‘C’: single clockwise rotation of the middle four squares. Below is a demonstration of applying the transformations to the initial squares given above: A: 8765 1234 B: 4123 5876 C: 1724 8635 All possible configurations are available using the three basic transformations. You are to write a program that computes a minimal sequence of basic transformations that transforms the initial configuration above to a specific target configuration. PROGRAM NAME: msquare INPUT FORMAT A single line with eight space-separated integers (a permutation of {1..8}) that are the target configuration. SAMPLE INPUT (file msquare.in) 2 6 8 4 5 7 3 1 OUTPUT FORMAT Line 1: A single integer that is the length of the shortest transformation sequence. Line 2: The lexically earliest string of transformations expressed as a string of characters, 60 per line except possibly the last line. SAMPLE OUTPUT (file msquare.out) 7 BCABCCB",
    "tags": "USACO",
    "url": "/usaco/2018/12/11/msquare.html"
  },{
    "title": "Magic Squares",
    "text": "Farmer John has discovered the secret to making the sweetest butter in all of Wisconsin: sugar. By placing a sugar cube out in the pastures, he knows the N (1 &lt;= N &lt;= 500) cows will lick it and thus will produce super-sweet butter which can be marketed at better prices. Of course, he spends the extra money on luxuries for the cows. FJ is a sly farmer. Like Pavlov of old, he knows he can train the cows to go to a certain pasture when they hear a bell. He intends to put the sugar there and then ring the bell in the middle of the afternoon so that the evening’s milking produces perfect milk. FJ knows each cow spends her time in a given pasture (not necessarily alone). Given the pasture location of the cows and a description of the paths that connect the pastures, find the pasture in which to place the sugar cube so that the total distance walked by the cows when FJ rings the bell is minimized. FJ knows the fields are connected well enough that some solution is always possible. PROGRAM NAME: butter INPUT FORMAT Line 1: Three space-separated integers: N, the number of pastures: P (2 &lt;= P &lt;= 800), and the number of connecting paths: C (1 &lt;= C &lt;= 1,450). Cows are uniquely numbered 1..N. Pastures are uniquely numbered 1..P. Lines 2..N+1: Each line contains a single integer that is the pasture number in which a cow is grazing. Cow i’s pasture is listed on line i+1. Lines N+2..N+C+1 Each line contains three space-separated integers that describe a single path that connects a pair of pastures and its length. Paths may be traversed in either direction. No pair of pastures is directly connected by more than one path. The first two integers are in the range 1..P; the third integer is in the range (1..225). SAMPLE INPUT (file butter.in) 3 4 5 2 3 4 1 2 1 1 3 5 2 3 7 2 4 3 3 4 5 INPUT DETAILS This diagram shows the connections geometrically: P2 P1 @--1--@ C1 \\ |\\ \\ | \\ 5 7 3 \\ | \\ \\| \\ C3 C2 @--5--@ P3 P4 OUTPUT FORMAT Line 1: A single integer that is the minimum distance the cows must walk to a pasture with a sugar cube. SAMPLE OUTPUT (file butter.out) 8 OUTPUT DETAILS: Putting the cube in pasture 4 means: cow 1 walks 3 units; cow 2 walks 5 units; cow 3 walks 0 units – a total of 8.",
    "tags": "USACO",
    "url": "/usaco/2018/12/11/butter.html"
  },{
    "title": "Overview",
    "text": "",
    "tags": "portfolio",
    "url": "/portfolio/2018/11/23/overview.html"
  },{
    "title": "Spinning Wheels",
    "text": "Each of five opaque spinning wheels has one or more wedges cut out of its edges. These wedges must be aligned quickly and correctly. Each wheel also has an alignment mark (at 0 degrees) so that the wheels can all be started in a known position. Wheels rotate in the ‘plus degrees’ direction, so that shortly after they start, they pass through 1 degree, 2 degrees, etc. (though probably not at the same time). This is an integer problem. Wheels are never actually at 1.5 degrees or 23.51234123 degrees. For example, the wheels are considered to move instantaneously from 20 to 25 degrees during a single second or even from 30 to 40 degrees if the wheel is spinning quickly. All angles in this problem are presumed to be integers in the range 0 &lt;= angle &lt;= 359. The angle of 0 degrees follows the angle of 359 degrees. Each wheel rotates at a certain integer number of degrees per second, 1 &lt;= speed &lt;= 180. Wedges for each wheel are specified by an integer start angle and integer angle size (or ‘extent’), both specified in degrees. Wedges in the test data will be separated by at least one degree. The ‘extent’ also includes the original “degree” of the wedge, so ‘0 180’ means degrees 0..180 inclusive – one more than most would imagine. At the start, which is time 0, all the wheels’ alignment marks line up. Your program must determine the earliest time (integer seconds) at or after the start that some wedge on each wheel will align with the wedges on the other wheel so that a light beam can pass through openings on all five wedges. The wedges can align at any part of the rotation. PROGRAM NAME: spin INPUT FORMAT Each of five input lines describes a wheel. The first integer on an input line is the wheel’s rotation speed. The next integer is the number of wedges, 1 &lt;= W &lt;= 5. The next W pairs of integers tell each wedge’s start angle and extent. SAMPLE INPUT (file spin.in) 30 1 0 120 50 1 150 90 60 1 60 90 70 1 180 180 90 1 180 60 OUTPUT FORMAT A single line with a single integer that is the first time the wedges align so a light beam can pass through them. Print ‘none’ (lower case, no quotes) if the wedges will never align properly. SAMPLE OUTPUT (file spin.out) 9",
    "tags": "USACO",
    "url": "/usaco/2018/11/15/spin.html"
  },{
    "title": "Feed Ratios",
    "text": "Farmer John feeds his cows only the finest mixture of cow food, which has three components: Barley, Oats, and Wheat. While he knows the precise mixture of these easily mixable grains, he can not buy that mixture! He buys three other mixtures of the three grains and then combines them to form the perfect mixture. Given a set of integer ratios barley:oats:wheat, find a way to combine them IN INTEGER MULTIPLES to form a mix with some goal ratio x:y:z. For example, given the goal 3:4:5 and the ratios of three mixtures: 1:2:3 3:7:1 2:1:2 your program should find some minimum number of integer units (the ‘mixture’) of the first, second, and third mixture that should be mixed together to achieve the goal ratio or print ‘NONE’. ‘Minimum number’ means the sum of the three non-negative mixture integers is minimized. For this example, you can combine eight units of mixture 1, one unit of mixture 2, and five units of mixture 3 to get seven units of the goal ratio: 8*(1:2:3) + 1*(3:7:1) + 5*(2:1:2) = (21:28:35) = 7*(3:4:5) Integers in the goal ratio and mixture ratios are all non-negative and smaller than 100 in magnitude. The number of units of each type of feed in the mixture must be less than 100. The mixture ratios are not linear combinations of each other. PROGRAM NAME: ratios INPUT FORMAT Line 1: Three space separated integers that represent the goal ratios Line 2..4: Each contain three space separated integers that represent the ratios of the three mixtures purchased. SAMPLE INPUT (file ratios.in) 3 4 5 1 2 3 3 7 1 2 1 2 OUTPUT FORMAT The output file should contain one line containing four integers or the word ‘NONE’. The first three integers should represent the number of units of each mixture to use to obtain the goal ratio. The fourth number should be the multiple of the goal ratio obtained by mixing the initial feed using the first three integers as mixing ratios. SAMPLE OUTPUT (file ratios.out) 8 1 5 7",
    "tags": "USACO",
    "url": "/usaco/2018/11/14/ratios.html"
  },{
    "title": "Stringsobits",
    "text": "Consider an ordered set S of strings of N (1 &lt;= N &lt;= 31) bits. Bits, of course, are either 0 or 1. This set of strings is interesting because it is ordered and contains all possible strings of length N that have L (1 &lt;= L &lt;= N) or fewer bits that are ‘1’. Your task is to read a number I (1 &lt;= I &lt;= sizeof(S)) from the input and print the Ith element of the ordered set for N bits with no more than L bits that are ‘1’. PROGRAM NAME: kimbits INPUT FORMAT A single line with three space separated integers: N, L, and I. SAMPLE INPUT (file kimbits.in) 5 3 19 OUTPUT FORMAT A single line containing the integer that represents the Ith element from the order set, as described. SAMPLE OUTPUT (file kimbits.out) 10011",
    "tags": "USACO",
    "url": "/usaco/2018/11/07/kimbits.html"
  },{
    "title": "Factorials",
    "text": "The factorial of an integer N, written N!, is the product of all the integers from 1 through N inclusive. The factorial quickly becomes very large: 13! is too large to store in a 32-bit integer on most computers, and 70! is too large for most floating-point variables. Your task is to find the rightmost non-zero digit of n!. For example, 5! = 1 * 2 * 3 * 4 * 5 = 120, so the rightmost non-zero digit of 5! is 2. Likewise, 7! = 1 * 2 * 3 * 4 * 5 * 6 * 7 = 5040, so the rightmost non-zero digit of 7! is 4. PROGRAM NAME: fact4 INPUT FORMAT A single positive integer N no larger than 4,220. SAMPLE INPUT (file fact4.in) 7 OUTPUT FORMAT A single line containing but a single digit: the right most non-zero digit of N! . SAMPLE OUTPUT (file fact4.out) 4",
    "tags": "USACO",
    "url": "/usaco/2018/11/07/fact4.html"
  },{
    "title": "Score Inflation",
    "text": "The more points students score in our contests, the happier we here at the USACO are. We try to design our contests so that people can score as many points as possible, and would like your assistance. We have several categories from which problems can be chosen, where a “category” is an unlimited set of contest problems which all require the same amount of time to solve and deserve the same number of points for a correct solution. Your task is write a program which tells the USACO staff how many problems from each category to include in a contest so as to maximize the total number of points in the chosen problems while keeping the total solution time within the length of the contest. The input includes the length of the contest, M (1 &lt;= M &lt;= 10,000) (don’t worry, you won’t have to compete in the longer contests until training camp) and N, the number of problem categories, where 1 &lt;= N &lt;= 10,000. Each of the subsequent N lines contains two integers describing a category: the first integer tells the number of points a problem from that category is worth (1 &lt;= points &lt;= 10000); the second tells the number of minutes a problem from that category takes to solve (1 &lt;= minutes &lt;= 10000). Your program should determine the number of problems we should take from each category to make the highest-scoring contest solvable within the length of the contest. Remember, the number from any category can be any nonnegative integer (0, one, or many). Calculate the maximum number of possible points. PROGRAM NAME: inflate INPUT FORMAT Lines 1: M, N – contest minutes and number of problem classes Line 2..N+1: Two integers: the points and minutes for each class SAMPLE INPUT (file inflate.in) 300 4 100 60 250 120 120 100 35 20 OUTPUT FORMAT A single line with the maximum number of points possible given the constraints. SAMPLE OUTPUT (file inflate.out) 605 (Take two problems from #2 and three from #4.)",
    "tags": "USACO",
    "url": "/usaco/2018/11/06/inflate.html"
  },{
    "title": "Contact",
    "text": "The cows have developed a new interest in scanning the universe outside their farm with radiotelescopes. Recently, they noticed a very curious microwave pulsing emission sent right from the centre of the galaxy. They wish to know if the emission is transmitted by some extraterrestrial form of intelligent life or if it is nothing but the usual heartbeat of the stars. Help the cows to find the Truth by providing a tool to analyze bit patterns in the files they record. They are seeking bit patterns of length A through B inclusive (1 &lt;= A &lt;= B &lt;= 12) that repeat themselves most often in each day’s data file. An input limit tells how many of the most frequent patterns to output. Pattern occurrences may overlap, and only patterns that occur at least once are taken into account. PROGRAM NAME: contact INPUT FORMAT Line 1: Three space-separated integers: A, B, N; (1 &lt;= N ≤ 50). Line 2..end: A sequence of as many as 200,000 characters, all 0 or 1; the characters are presented 80 per line, except potentially the last line. SAMPLE INPUT (file contact.in) 2 4 10 01010010010001000111101100001010011001111000010010011110010000000 In this example, pattern 100 occurs 12 times, and pattern 1000 occurs 5 times. The most frequent pattern is 00, with 23 occurrences. OUTPUT FORMAT Lines that list the N highest frequencies (in descending order of frequency) along with the patterns that occur in those frequencies. Order those patterns by shortest-to-longest and increasing binary number for those of the same frequency. If fewer than N highest frequencies are available, print only those that are. Print the frequency alone by itself on a line. Then print the actual patterns space separated, six to a line (unless fewer than six remain). SAMPLE OUTPUT (file contact.out) 23 00 15 01 10 12 100 11 11 000 001 10 010 8 0100 7 0010 1001 6 111 0000 5 011 110 1000 4 0001 0011 1100",
    "tags": "USACO",
    "url": "/usaco/2018/11/05/contact.html"
  },{
    "title": "Humble Numbers",
    "text": "For a given set of K prime numbers S = {p1, p2, …, pK}, consider the set of all numbers whose prime factors are a subset of S. This set contains, for example, p1, p1p2, p1p1, and p1p2p3 (among others). This is the set of ‘humble numbers’ for the input set S. Note: The number 1 is explicitly declared not to be a humble number. Your job is to find the Nth humble number for a given set S. Long integers (signed 32-bit) will be adequate for all solutions. PROGRAM NAME: humble INPUT FORMAT Line 1: Two space separated integers: K and N, 1 &lt;= K &lt;=100 and 1 &lt;= N &lt;= 100,000. Line 2: K space separated positive integers that compose the set S. SAMPLE INPUT (file humble.in) 4 19 2 3 5 7 OUTPUT FORMAT The Nth humble number from set S printed alone on a line. SAMPLE OUTPUT (file humble.out) 27",
    "tags": "USACO",
    "url": "/usaco/2018/11/05/humble.html"
  },{
    "title": "Stamps",
    "text": "Given a set of N stamp values (e.g., {1 cent, 3 cents}) and an upper limit K to the number of stamps that can fit on an envelope, calculate the largest unbroken list of postages from 1 cent to M cents that can be created. For example, consider stamps whose values are limited to 1 cent and 3 cents; you can use at most 5 stamps. It’s easy to see how to assemble postage of 1 through 5 cents (just use that many 1 cent stamps), and successive values aren’t much harder: 6 = 3 + 3 7 = 3 + 3 + 1 8 = 3 + 3 + 1 + 1 9 = 3 + 3 + 3 10 = 3 + 3 + 3 + 1 11 = 3 + 3 + 3 + 1 + 1 12 = 3 + 3 + 3 + 3 13 = 3 + 3 + 3 + 3 + 1. However, there is no way to make 14 cents of postage with 5 or fewer stamps of value 1 and 3 cents. Thus, for this set of two stamp values and a limit of K=5, the answer is M=13. The most difficult test case for this problem has a time limit of 3 seconds. PROGRAM NAME: stamps INPUT FORMAT Line 1: Two integers K and N. K (1 &lt;= K &lt;= 200) is the total number of stamps that can be used. N (1 &lt;= N &lt;= 50) is the number of stamp values. Line 2..end: N integers, 15 per line, listing all of the N stamp values, each of which will be at most 10000. SAMPLE INPUT (file stamps.in) 5 2 1 3 OUTPUT FORMAT Line 1: One integer, the number of contiguous postage values starting at 1 cent that can be formed using no more than K stamps from the set. SAMPLE OUTPUT (file stamps.out) 13",
    "tags": "USACO",
    "url": "/usaco/2018/11/03/stamps.html"
  },{
    "title": "Agri-Net",
    "text": "Farmer John has been elected mayor of his town! One of his campaign promises was to bring internet connectivity to all farms in the area. He needs your help, of course. Farmer John ordered a high speed connection for his farm and is going to share his connectivity with the other farmers. To minimize cost, he wants to lay the minimum amount of optical fiber to connect his farm to all the other farms. Given a list of how much fiber it takes to connect each pair of farms, you must find the minimum amount of fiber needed to connect them all together. Each farm must connect to some other farm such that a packet can flow from any one farm to any other farm. The distance between any two farms will not exceed 100,000. PROGRAM NAME: agrinet INPUT FORMAT Lines 1: The number of farms, N (3 &lt;= N &lt;= 100). Line 2..end: The subsequent lines contain the N x N connectivity matrix, where each element shows the distance from on farm to another. Logically, they are N lines of N space-separated integers. Physically, they are limited in length to 80 characters, so some lines continue onto others. Of course, the diagonal will be 0, since the distance from farm i to itself is not interesting for this problem. SAMPLE INPUT (file agrinet.in) 4 0 4 9 21 4 0 8 17 9 8 0 16 21 17 16 0 OUTPUT FORMAT The single output contains the integer length that is the sum of the minimum length of fiber required to connect the entire set of farms. SAMPLE OUTPUT (file agrinet.out) 28",
    "tags": "USACO",
    "url": "/usaco/2018/11/01/agrinet.html"
  },{
    "title": "Fractions to Decimals",
    "text": "Write a program that will accept a fraction of the form N/D, where N is the numerator and D is the denominator and print the decimal representation. If the decimal representation has a repeating sequence of digits, indicate the sequence by enclosing it in brackets. For example, 1/3 = .33333333…is denoted as 0.(3), and 41/333 = 0.123123123…is denoted as 0.(123). Use xxx.0 to denote an integer. Typical conversions are: 1/3 = 0.(3) 22/5 = 4.4 1/7 = 0.(142857) 2/2 = 1.0 3/8 = 0.375 45/56 = 0.803(571428) PROGRAM NAME: fracdec INPUT FORMAT A single line with two space separated integers, N and D, 1 &lt;= N,D &lt;= 100000. SAMPLE INPUT (file fracdec.in) 45 56 OUTPUT FORMAT The decimal expansion, as detailed above. If the expansion exceeds 76 characters in length, print it on multiple lines with 76 characters per line. SAMPLE OUTPUT (file fracdec.out) 0.803(571428)",
    "tags": "USACO",
    "url": "/usaco/2018/10/31/fracdec.html"
  },{
    "title": "Cow Tours",
    "text": "Farmer John has a number of pastures on his farm. Cow paths connect some pastures with certain other pastures, forming a field. But, at the present time, you can find at least two pastures that cannot be connected by any sequence of cow paths, thus partitioning Farmer John’s farm into multiple fields. Farmer John would like add a single a cow path between one pair of pastures using the constraints below. A field’s ‘diameter’ is defined to be the largest distance of all the shortest walks between any pair of pastures in the field. Consider the field below with five pastures, located at the points shown, and cow paths marked by lines: 15,15 20,15 D E *-------* | _/| | _/ | | _/ | |/ | *--------*-------* A B C 10,10 15,10 20,10 The ‘diameter’ of this field is approximately 12.07106, since the longest of the set of shortest paths between pairs of pastures is the path from A to E (which includes the point set {A,B,E}). No other pair of pastures in this field is farther apart when connected by an optimal sequence of cow paths. Suppose an additional field on the same plane as above is connected by cow paths as follows: *F 30,15 / _/ _/ / *------* G H 25,10 30,10 Given just these two fields on his farm, Farmer John would add a cow path between a point in each of these two fields (namely point sets {A,B,C,D,E} and {F,G,H}) so that the joined set of pastures {A,B,C,D,E,F,G,H} has the smallest possible diameter. Note that cow paths do not connect just because they cross each other; they only connect at listed points. The input contains the pastures, their locations, and a symmetric “adjacency” matrix that tells whether pastures are connected by cow paths. Pastures are not considered to be connected to themselves. Here’s one annotated adjacency list for the pasture {A,B,C,D,E,F,G,H} as shown above: A B C D E F G H A 0 1 0 0 0 0 0 0 B 1 0 1 1 1 0 0 0 C 0 1 0 0 1 0 0 0 D 0 1 0 0 1 0 0 0 E 0 1 1 1 0 0 0 0 F 0 0 0 0 0 0 1 0 G 0 0 0 0 0 1 0 1 H 0 0 0 0 0 0 1 0 Other equivalent adjacency lists might permute the rows and columns by using some order other than alphabetical to show the point connections. The input data contains no names for the points. The input will contain at least two pastures that are not connected by any sequence of cow paths. Find a way to connect exactly two pastures in the input with a cow path so that the new combined field has the smallest possible diameter of any possible pair of connected pastures. Output that smallest possible diameter. PROGRAM NAME: cowtour INPUT FORMAT Lines 1: An integer, N (1 &lt;= N &lt;= 150), the number of pastures Lines 2-N+1: Two integers, X and Y (0 &lt;= X ,Y&lt;= 100000), that denote that X,Y grid location of the pastures; all input pastures are unique. Line N+2-2*N+1: N digits (0 or 1) that represent the adjacency matrix as described above, where the rows’ and columns’ indices are in order of the points just listed. SAMPLE INPUT (file cowtour.in) 8 10 10 15 10 20 10 15 15 20 15 30 15 25 10 30 10 01000000 10111000 01001000 01001000 01110000 00000010 00000101 00000010 OUTPUT FORMAT The output consists of a single line with the diameter of the newly joined pastures. Print the answer to exactly six decimal places. Do not perform any special rounding on your output. SAMPLE OUTPUT (file cowtour.out) 22.071068 OUTPUT EXPLANATION After trying all possible connection pairs, connecting C to G yields the minimum diameter.",
    "tags": "USACO",
    "url": "/usaco/2018/10/31/cowtour.html"
  },{
    "title": "Bessie Come Home",
    "text": "It’s dinner time, and the cows are out in their separate pastures. Farmer John rings the bell so they will start walking to the barn. Your job is to figure out which one cow gets to the barn first (the supplied test data will always have exactly one fastest cow). Between milkings, each cow is located in her own pasture, though some pastures have no cows in them. Each pasture is connected by a path to one or more other pastures (potentially including itself). Sometimes, two (potentially self-same) pastures are connected by more than one path. One or more of the pastures has a path to the barn. Thus, all cows have a path to the barn and they always know the shortest path. Of course, cows can go either direction on a path and they all walk at the same speed. The pastures are labeled ‘a’..’z’ and ‘A’..’Y’. One cow is in each pasture labeled with a capital letter. No cow is in a pasture labeled with a lower case letter. The barn’s label is ‘Z’; no cows are in the barn, though. PROGRAM NAME: comehome INPUT FORMAT Lines 1: Integer P (1 &lt;= P &lt;= 10000) the number of paths that interconnect the pastures (and the barn) Lines 2..P+1: Space separated, two letters and an integer: the names of the interconnected pastures/barn and the distance between them (1 &lt;= distance &lt;= 1000) SAMPLE INPUT (file comehome.in) 5 A d 6 B d 3 C e 9 d Z 8 e Z 3 OUTPUT FORMAT A single line containing two items: the capital letter name of the pasture of the cow that arrives first back at the barn, the length of the path followed by that cow. SAMPLE OUTPUT (file comehome.out) B 11",
    "tags": "USACO",
    "url": "/usaco/2018/10/27/comehome.html"
  },{
    "title": "Overfencing",
    "text": "Farmer John went crazy and created a huge maze of fences out in a field. Happily, he left out two fence segments on the edges, and thus created two “exits” for the maze. Even more happily, the maze he created by this overfencing experience is a ‘perfect’ maze: you can find a way out of the maze from any point inside it. Given W (1 &lt;= W &lt;= 38), the width of the maze; H (1 &lt;= H &lt;= 100), the height of the maze; 2*H+1 lines with width 2*W+1 characters that represent the maze in a format like that shown later - then calculate the number of steps required to exit the maze from the ‘worst’ point in the maze (the point that is ‘farther’ from either exit even when walking optimally to the closest exit). Of course, cows walk only parallel or perpendicular to the x-y axes; they do not walk on a diagonal. Each move to a new square counts as a single unit of distance (including the move “out” of the maze. Here’s what one particular W=5, H=3 maze looks like: +-+-+-+-+-+ | | +-+ +-+ + + | | | | + +-+-+ + + | | | +-+ +-+-+-+ Fenceposts appear only in odd numbered rows and and odd numbered columns (as in the example). The format should be obvious and self explanatory. Each maze has exactly two blank walls on the outside for exiting. PROGRAM NAME: maze1 INPUT FORMAT Lines 1: W and H, space separated Lines 2 through 2*H+2: 2*W+1 characters that represent the maze SAMPLE INPUT (file maze1.in) 5 3 +-+-+-+-+-+ | | +-+ +-+ + + | | | | + +-+-+ + + | | | +-+ +-+-+-+ OUTPUT FORMAT A single integer on a single output line. The integer specifies the minimal number of steps that guarantee a cow can exit the maze from any possible point inside the maze. SAMPLE OUTPUT (file maze1.out) 9 The lower left-hand corner is nine steps from the closest exit.",
    "tags": "USACO",
    "url": "/usaco/2018/10/22/maze1.html"
  },{
    "title": "The Tamworth Two",
    "text": "A pair of cows is loose somewhere in the forest. Farmer John is lending his expertise to their capture. Your task is to model their behavior. The chase takes place on a 10 by 10 planar grid. Squares can be empty or they can contain: an obstacle, the cows (who always travel together), or Farmer John. The cows and Farmer John can occupy the same square (when they ‘meet’) but neither the cows nor Farmer John can share a square with an obstacle. Each square is represented as follows: . Empty square * Obstacle C Cows F Farmer Here is a sample grid: *...*..... ......*... ...*...*.. .......... ...*.F.... *.....*... ...*...... ..C......* ...*.*.... .*.*...... The cows wander around the grid in a fixed way. Each minute, they either move forward or rotate. Normally, they move one square in the direction they are facing. If there is an obstacle in the way or they would leave the board by walking ‘forward’, then they spend the entire minute rotating 90 degrees clockwise. Farmer John, wise in the ways of cows, moves in exactly the same way. The farmer and the cows can be considered to move simultaneously during each minute. If the farmer and the cows pass each other while moving, they are not considered to have met. The chase ends when Farmer John and the cows occupy the same square at the end of a minute. Read a ten-line grid that represents the initial state of the cows, Farmer John, and obstacles. Each of the ten lines contains exactly ten characters using the coding above. There is guaranteed to be only one farmer and one pair of cows. The cows and Farmer John will not initially be on the same square. Calculate the number of minutes until the cows and Farmer John meet. Assume both the cows and farmer begin the simulation facing in the ‘north’ direction. Print 0 if they will never meet. PROGRAM NAME: ttwo INPUT FORMAT Lines 1-10: Ten lines of ten characters each, as explained above SAMPLE INPUT (file ttwo.in) *...*..... ......*... ...*...*.. .......... ...*.F.... *.....*... ...*...... ..C......* ...*.*.... .*.*...... OUTPUT FORMAT A single line with the integer number of minutes until Farmer John and the cows meet. Print 0 if they will never meet. SAMPLE OUTPUT (file ttwo.out) 49",
    "tags": "USACO",
    "url": "/usaco/2018/10/22/ttwo.html"
  },{
    "title": "Controlling Companies",
    "text": "Some companies are partial owners of other companies because they have acquired part of their total shares of stock. For example, Ford at one point owned 12% of Mazda. It is said that a company A controls company B if at least one of the following conditions is satisfied: Company A = Company B Company A owns more than 50% of Company B Company A controls K (K &gt;= 1) companies denoted C1, …, CK with each company Ci owning xi% of company B and x1 + …. + xK &gt; 50%. Given a list of triples (i,j,p) which denote company i owning p% of company j, calculate all the pairs (h,s) in which company h controls company s. There are at most 100 companies. Write a program to read the list of triples (i,j,p) where i, j and p are positive integers all in the range (1..100) and find all the pairs (h,s) so that company h controls company s. PROGRAM NAME: concom INPUT FORMAT Line 1: N, the number of input triples to follow Line 2..n+1: Three integers per line as a triple (i,j,p) described above. SAMPLE INPUT (file concom.in) 3 1 2 80 2 3 80 3 1 20 OUTPUT FORMAT List 0 or more companies that control other companies. Each line contains two integers that denote that the company whose number is the first integer controls the company whose number is the second integer. Order the lines in ascending order of the first integer (and ascending order of the second integer to break ties). Do not print that a company controls itself. SAMPLE OUTPUT (file concom.out) 1 2 1 3 2 3",
    "tags": "USACO",
    "url": "/usaco/2018/10/17/concom.html"
  },{
    "title": "Money Systems",
    "text": "The cows have not only created their own government but they have chosen to create their own money system. In their own rebellious way, they are curious about values of coinage. Traditionally, coins come in values like 1, 5, 10, 20 or 25, 50, and 100 units, sometimes with a 2 unit coin thrown in for good measure. The cows want to know how many different ways it is possible to dispense a certain amount of money using various coin systems. For instance, using a system of {1, 2, 5, 10, …} it is possible to create 18 units several different ways, including: 18x1, 9x2, 8x2+2x1, 3x5+2+1, and many others. Write a program to compute how many ways to construct a given amount of money using supplied coinage. It is guaranteed that the total will fit into both a signed long long (C/C++) and Int64 (Free Pascal). PROGRAM NAME: money INPUT FORMAT The number of coins in the system is V (1 &lt;= V &lt;= 25). The amount money to construct is N (1 &lt;= N &lt;= 10,000). Line 1: Two integers, V and N Lines 2..: V integers that represent the available coins (no particular number of integers per line) SAMPLE INPUT (file money.in) 3 10 1 2 5 OUTPUT FORMAT A single line containing the total number of ways to construct N money units using V coins. SAMPLE OUTPUT (file money.out) 10",
    "tags": "USACO",
    "url": "/usaco/2018/10/17/money.html"
  },{
    "title": "Zero Sum",
    "text": "Consider the sequence of digits from 1 through N (where N=9) in increasing order: 1 2 3 … N. Now insert either a ‘+’ for addition or a ‘-‘ for subtraction or a ‘ ‘ [blank] to run the digits together between each pair of digits (not in front of the first digit). Calculate the result that of the expression and see if you get zero. Write a program that will find all sequences of length N that produce a zero sum. PROGRAM NAME: zerosum INPUT FORMAT A single line with the integer N (3 &lt;= N &lt;= 9). SAMPLE INPUT (file zerosum.in) 7 OUTPUT FORMAT In ASCII order, show each sequence that can create 0 sum with a ‘+’, ‘-‘, or ‘ ‘ between each pair of numbers. SAMPLE OUTPUT (file zerosum.out) 1+2-3+4-5-6+7 1+2-3-4+5+6-7 1-2 3+4+5+6+7 1-2 3-4 5+6 7 1-2+3+4-5+6-7 1-2-3-4-5+6+7",
    "tags": "USACO",
    "url": "/usaco/2018/10/15/zerosum.html"
  },{
    "title": "Cow Pedigrees",
    "text": "Farmer John is considering purchasing a new herd of cows. In this new herd, each mother cow gives birth to two children. The relationships among the cows can easily be represented by one or more binary trees with a total of N (3 &lt;= N &lt; 200) nodes. The trees have these properties: The degree of each node is 0 or 2. The degree is the count of the node’s immediate children. The height of the tree is equal to K (1 &lt; K &lt; 100). The height is the number of nodes on the longest path from the root to any leaf; a leaf is a node with no children. How many different possible pedigree structures are there? A pedigree is different if its tree structure differs from that of another pedigree. Output the remainder when the total number of different possible pedigrees is divided by 9901. PROGRAM NAME: nocows INPUT FORMAT Line 1: Two space-separated integers, N and K. SAMPLE INPUT (file nocows.in) 5 3 OUTPUT FORMAT Line 1: One single integer number representing the number of possible pedigrees MODULO 9901. SAMPLE OUTPUT (file nocows.out) 2 OUTPUT DETAILS Two possible pedigrees have 5 nodes and height equal to 3: @ @ / \\ / \\ @ @ and @ @ / \\ / \\ @ @ @ @",
    "tags": "USACO",
    "url": "/usaco/2018/10/15/nocows.html"
  },{
    "title": "Longest Prefix",
    "text": "The structure of some biological objects is represented by the sequence of their constituents, where each part is denoted by an uppercase letter. Biologists are interested in decomposing a long sequence into shorter sequences called primitives. We say that a sequence S can be composed from a given set of primitives P if there is a some sequence of (possibly repeated) primitives from the set whose concatenation equals S. Not necessarily all primitives need be present. For instance the sequence ABABACABAAB can be composed from the set of primitives {A, AB, BA, CA, BBC} The first K characters of S are the prefix of S with length K. Write a program which accepts as input a set of primitives and a sequence of constituents and then computes the length of the longest prefix that can be composed from primitives. PROGRAM NAME: prefix INPUT FORMAT First, the input file contains the list (length 1..200) of primitives (length 1..10) expressed as a series of space-separated strings of upper-case characters on one or more lines. The list of primitives is terminated by a line that contains nothing more than a period (‘.’). No primitive appears twice in the list. Then, the input file contains a sequence S (length 1..200,000) expressed as one or more lines, none of which exceeds 76 letters in length. The “newlines” (line terminators) are not part of the string S. SAMPLE INPUT (file prefix.in) A AB BA CA BBC . ABABACABAABC OUTPUT FORMAT A single line containing an integer that is the length of the longest prefix that can be composed from the set P. SAMPLE OUTPUT (file prefix.out) 11",
    "tags": "USACO",
    "url": "/usaco/2018/10/15/prefix.html"
  },{
    "title": "Party Lamps",
    "text": "To brighten up the gala dinner of the IOI’98 we have a set of N (10 &lt;= N &lt;= 100) colored lamps numbered from 1 to N. The lamps are connected to four buttons: Button 1: When this button is pressed, all the lamps change their state: those that are ON are turned OFF and those that are OFF are turned ON. Button 2: Changes the state of all the odd numbered lamps. Button 3: Changes the state of all the even numbered lamps. Button 4: Changes the state of the lamps whose number is of the form 3xK+1 (with K&gt;=0), i.e., 1,4,7,… A counter C records the total number of button presses. When the party starts, all the lamps are ON and the counter C is set to zero. You are given the value of counter C (0 &lt;= C &lt;= 10000) and the final state of some of the lamps after some operations have been executed. Write a program to determine all the possible final configurations of the N lamps that are consistent with the given information, without repetitions. PROGRAM NAME: lamps INPUT FORMAT No lamp will be listed twice in the input. Line 1: N Line 2: Final value of C Line 3: Some lamp numbers ON in the final configuration, separated by one space and terminated by the integer -1. Line 4: Some lamp numbers OFF in the final configuration, separated by one space and terminated by the integer -1. SAMPLE INPUT (file lamps.in) 10 1 -1 7 -1 In this case, there are 10 lamps and only one button has been pressed. Lamp 7 is OFF in the final configuration. OUTPUT FORMAT Lines with all the possible final configurations (without repetitions) of all the lamps. Each line has N characters, where the first character represents the state of lamp 1 and the last character represents the state of lamp N. A 0 (zero) stands for a lamp that is OFF, and a 1 (one) stands for a lamp that is ON. The lines must be ordered from least to largest (as binary numbers). If there are no possible configurations, output a single line with the single word ‘IMPOSSIBLE’ SAMPLE OUTPUT (file lamps.out) 0000000000 0101010101 0110110110 In this case, there are three possible final configurations: All lamps are OFF Lamps 1, 3, 5, 7, 9 are OFF and lamps 2, 4, 6, 8, 10 are ON. Lamps 1, 4, 7, 10 are OFF and lamps 2, 3, 5, 6, 8, 9 are ON.",
    "tags": "USACO",
    "url": "/usaco/2018/10/12/lamps.html"
  },{
    "title": "Runaround Numbers",
    "text": "Runaround numbers are integers with unique digits, none of which is zero (e.g., 81362) that also have an interesting property, exemplified by this demonstration: If you start at the left digit (8 in our number) and count that number of digits to the right (wrapping back to the first digit when no digits on the right are available), you’ll end up at a new digit (a number which does not end up at a new digit is not a Runaround Number). Consider: 8 1 3 6 2 which cycles through eight digits: 1 3 6 2 8 1 3 6 so the next digit is 6. Repeat this cycle (this time for the six counts designed by the ‘6’) and you should end on a new digit: 2 8 1 3 6 2, namely 2. Repeat again (two digits this time): 8 1 Continue again (one digit this time): 3 One more time: 6 2 8 and you have ended up back where you started, after touching each digit once. If you don’t end up back where you started after touching each digit once, your number is not a Runaround number. Given a number M (that has anywhere from 1 through 9 digits), find and print the next runaround number higher than M, which will always fit into an unsigned long integer for the given test data. PROGRAM NAME: runround INPUT FORMAT A single line with a single integer, M SAMPLE INPUT (file runround.in) 81361 OUTPUT FORMAT A single line containing the next runaround number higher than the input value, M. SAMPLE OUTPUT (file runround.out) 81362",
    "tags": "USACO",
    "url": "/usaco/2018/10/12/runround.html"
  },{
    "title": "Subset Sums",
    "text": "For many sets of consecutive integers from 1 through N (1 &lt;= N &lt;= 39), one can partition the set into two sets whose sums are identical. For example, if N=3, one can partition the set {1, 2, 3} in one way so that the sums of both subsets are identical: {3} and {1,2} This counts as a single partitioning (i.e., reversing the order counts as the same partitioning and thus does not increase the count of partitions). If N=7, there are four ways to partition the set {1, 2, 3, … 7} so that each partition has the same sum: {1,6,7} and {2,3,4,5} {2,5,7} and {1,3,4,6} {3,4,7} and {1,2,5,6} {1,2,4,7} and {3,5,6} Given N, your program should print the number of ways a set containing the integers from 1 through N can be partitioned into two sets whose sums are identical. Print 0 if there are no such ways. Your program must calculate the answer, not look it up from a table. PROGRAM NAME: subset INPUT FORMAT The input file contains a single line with a single integer representing N, as above. SAMPLE INPUT (file subset.in) 7 OUTPUT FORMAT The output file contains a single line with a single integer that tells how many same-sum partitions can be made from the set {1, 2, …, N}. The output file should contain 0 if there are no ways to make a same-sum partition. SAMPLE OUTPUT (file subset.out) 4",
    "tags": "USACO",
    "url": "/usaco/2018/10/11/subset.html"
  },{
    "title": "Preface Numbering",
    "text": "A certain book’s prefaces are numbered in upper case Roman numerals. Traditional Roman numeral values use a single letter to represent a certain subset of decimal numbers. Here is the standard set: I 1 V 5 X 10 L 50 C 100 D 500 M 1000 As many as three of the same marks that represent 10n may be placed consecutively to form other numbers: III is 3 CCC is 300 Marks that have the value 5x10n are never used consecutively. Generally (with the exception of the next rule), marks are connected together and written in descending order to form even more numbers: CCLXVIII = 100+100+50+10+5+1+1+1 = 268 Sometimes, a mark that represents 10^n is placed before a mark of one of the two next higher values (I before V or X; X before L or C; etc.). In this case, the value of the smaller mark is SUBTRACTED from the mark it precedes: IV = 4 IX = 9 XL = 40 This compound mark forms a unit and may not be combined to make another compound mark (e.g., IXL is wrong for 39; XXXIX is correct). Compound marks like XD, IC, and XM are not legal, since the smaller mark is too much smaller than the larger one. For XD (wrong for 490), one would use CDXC; for IC (wrong for 99), one would use XCIX; for XM (wrong for 990), one would use CMXC. 90 is expressed XC and not LXL, since L followed by X connotes that successive marks are X or smaller (probably, anyway). Given N (1 &lt;= N &lt; 3,500), the number of pages in the preface of a book, calculate and print the number of I’s, V’s, etc. (in order from lowest to highest) required to typeset all the page numbers (in Roman numerals) from 1 through N. Do not print letters that do not appear in the page numbers specified. If N = 5, then the page numbers are: I, II, III, IV, V. The total number of I’s is 7 and the total number of V’s is 2. PROGRAM NAME: preface INPUT FORMAT A single line containing the integer N. SAMPLE INPUT (file preface.in) 5 OUTPUT FORMAT The output lines specify, in ascending order of Roman numeral letters, the letter, a single space, and the number of times that letter appears on preface page numbers. Stop printing letter totals after printing the highest value letter used to form preface numbers in the specified set. SAMPLE OUTPUT (file preface.out) I 7 V 2",
    "tags": "USACO",
    "url": "/usaco/2018/10/10/preface.html"
  },{
    "title": "Healthy Holsteins",
    "text": "Farmer John prides himself on having the healthiest dairy cows in the world. He knows the vitamin content for one scoop of each feed type and the minimum daily vitamin requirement for his cows. Help Farmer John feed the cows so they stay healthy while minimizing the number of scoops that a cow is fed. Given the daily requirements of each kind of vitamin that a cow needs, identify the smallest combination of scoops of feed a cow can be fed in order to meet at least the minimum vitamin requirements. Vitamins are measured in integer units. Cows can be fed at most one scoop of any feed type. It is guaranteed that a solution exists for all contest input data. PROGRAM NAME: holstein INPUT FORMAT Line 1: integer V (1 &lt;= V &lt;= 25), the number of types of vitamins Line 2: V integers (1 &lt;= each one &lt;= 1000), the minimum requirement for each of the V vitamins that a cow requires each day Line 3: integer G (1 &lt;= G &lt;= 15), the number of types of feeds available Lines 4..G+3: V integers (0 &lt;= each one &lt;= 1000), the amount of each vitamin that one scoop of this feed contains. The first line of these G lines describes feed #1; the second line describes feed #2; and so on. SAMPLE INPUT (file holstein.in) 4 100 200 300 400 3 50 50 50 50 200 300 200 300 900 150 389 399 OUTPUT FORMAT The output is a single line of output that contains: the minimum number of scoops a cow must eat, followed by: a SORTED list (from smallest to largest) of the feed types the cow is given If more than one set of feedtypes yield a minimum of scoops, choose the set with the smallest feedtype numbers. SAMPLE OUTPUT (file holstein.out) 2 1 3",
    "tags": "USACO",
    "url": "/usaco/2018/10/10/holstein.html"
  },{
    "title": "Hamming Codes",
    "text": "Given N, B, and D: Find a set of N codewords (1 &lt;= N &lt;= 64), each of length B bits (1 &lt;= B &lt;= 8), such that each of the codewords is at least Hamming distance of D (1 &lt;= D &lt;= 7) away from each of the other codewords. The Hamming distance between a pair of codewords is the number of binary bits that differ in their binary notation. Consider the two codewords 0x554 and 0x234 and their differences (0x554 means the hexadecimal number with hex digits 5, 5, and 4)(a hex digit requires four bits): 0x554 = 0101 0101 0100 0x234 = 0010 0011 0100 Bit differences: -XXX -XX- ---- Since five bits were different, the Hamming distance is 5. PROGRAM NAME: hamming INPUT FORMAT N, B, D on a single line SAMPLE INPUT (file hamming.in) 16 7 3 OUTPUT FORMAT N codewords, sorted, in decimal, ten per line. In the case of multiple solutions, your program should output the solution which, if interpreted as a base 2^B integer, would have the least value. SAMPLE OUTPUT (file hamming.out) 0 7 25 30 42 45 51 52 75 76 82 85 97 102 120 127",
    "tags": "USACO",
    "url": "/usaco/2018/10/09/hamming.html"
  },{
    "title": "Sorting a Three-Valued Sequence",
    "text": "Sorting is one of the most frequently performed computational tasks. Consider the special sorting problem in which the records to be sorted have at most three different key values. This happens for instance when we sort medalists of a competition according to medal value, that is, gold medalists come first, followed by silver, and bronze medalists come last. In this task the possible key values are the integers 1, 2 and 3. The required sorting order is non-decreasing. However, sorting has to be accomplished by a sequence of exchange operations. An exchange operation, defined by two position numbers p and q, exchanges the elements in positions p and q. You are given a sequence of key values. Write a program that computes the minimal number of exchange operations that are necessary to make the sequence sorted. PROGRAM NAME: sort3 INPUT FORMAT Line 1: N (1 &lt;= N &lt;= 1000), the number of records to be sorted Lines 2-N+1: A single integer from the set {1, 2, 3} SAMPLE INPUT (file sort3.in) 9 2 2 1 3 3 3 2 3 1 OUTPUT FORMAT A single line containing the number of exchanges required SAMPLE OUTPUT (file sort3.out) 4",
    "tags": "USACO",
    "url": "/usaco/2018/10/08/sort3.html"
  },{
    "title": "The Castle",
    "text": "In a stroke of luck almost beyond imagination, Farmer John was sent a ticket to the Irish Sweepstakes (really a lottery) for his birthday. This ticket turned out to have only the winning number for the lottery! Farmer John won a fabulous castle in the Irish countryside. Bragging rights being what they are in Wisconsin, Farmer John wished to tell his cows all about the castle. He wanted to know how many rooms it has and how big the largest room was. In fact, he wants to take out a single wall to make an even bigger room. Your task is to help Farmer John know the exact room count and sizes. The castle floorplan is divided into M (wide) by N (1 &lt;=M,N&lt;=50) square modules. Each such module can have between zero and four walls. Castles always have walls on their “outer edges” to keep out the wind and rain. Consider this annotated floorplan of a castle: 1 2 3 4 5 6 7 ############################# 1 # | # | # | | # #####---#####---#---#####---# 2 # # | # # # # # #---#####---#####---#####---# 3 # | | # # # # # #---#########---#####---#---# 4 # -&gt;# | | | | # # ############################# # = Wall -,| = No wall -&gt; = Points to the wall to remove to make the largest possible new room By way of example, this castle sits on a 7 x 4 base. A “room” includes any set of connected “squares” in the floor plan. This floorplan contains five rooms (whose sizes are 9, 7, 3, 1, and 8 in no particular order). Removing the wall marked by the arrow merges a pair of rooms to make the largest possible room that can be made by removing a single wall. The castle always has at least two rooms and always has a wall that can be removed. PROGRAM NAME: castle INPUT FORMAT The map is stored in the form of numbers, one number for each module (“room”), M numbers on each of N lines to describe the floorplan. The input order corresponds to the numbering in the example diagram above. Each module descriptive-number tells which of the four walls exist and is the sum of up to four integers: 1. wall to the west 2. wall to the north 4. wall to the east 8. wall to the south Inner walls are defined twice; a wall to the south in module 1,1 is also indicated as a wall to the north in module 2,1. Line 1: Two space-separated integers: M and N Line 2..M+1: M x N integers, several per line. SAMPLE INPUT (file castle.in) 7 4 11 6 11 6 3 10 6 7 9 6 13 5 15 5 1 10 12 7 13 7 5 13 11 10 8 10 12 13 OUTPUT FORMAT The output contains several lines: Line 1: The number of rooms the castle has. Line 2: The size of the largest room Line 3: The size of the largest room creatable by removing one wall Line 4: The single wall to remove to make the largest room possible Choose the optimal wall to remove from the set of optimal walls by choosing the module farthest to the west (and then, if still tied, farthest to the south). If still tied, choose ‘N’ before ‘E’. Name that wall by naming the module that borders it on either the west or south, along with a direction of N or E giving the location of the wall with respect to the module. SAMPLE OUTPUT (file castle.out) 5 9 16 4 1 E INPUT DETAILS First, the map is partitioned like below. Note that walls not on the outside borders are doubled: 1 2 3 4 5 6 7 ####|####|####|####|####|####|##### 1 # | #|# | #|# | | # ####| #|####| #|# |####| # -----|----|----|----|----|----|----- ####|# |####|# #|# #|####|# # 2 # #|# | #|# #|# #|# #|# # # #|####| #|####|# #|####|# # -----|----|----|----|----|----|----- # |####| #|####|# #|####|# # 3 # | | #|# #|# #|# #|# # # |####|####|# #|####|# #|# # -----|----|----|----|----|----|----- # #|####|####| |####| #|# # 4 # #|# | | | | #|# # ####|####|####|####|####|####|##### Let’s talk about the squares with a (row, column) notation such that the lower right corner is denoted (4, 7). The input will have four lines, each with 7 numbers. Each number describes one ‘room’. &gt;Walls further toward the top are ‘north’, towards the bottom are ‘south’, towards the left are ‘west’, and towards the right are ‘east’. Consider square (1,1) which has three walls: north, south, and west. To encode those three walls, we consult the chart: 1. wall to the west 2. wall to the north 3. wall to the east 4. wall to the south and sum the numbers for north (2), south (8), and west (1). 2 + 8 + 1 = 11, so this room is encoded as 11. The next room to the right (1,2) has walls on the north (2) and east (4) and thus is encoded as 2 +4 = 6. The next room to the right (1,3) is the same as (1,1) and thus encodes as 11. Room (1,4) is the same as (1,2) and thus encodes as 6. Room (1,5) has rooms on the west (1) and north (2) and thus encodes as 1 + 2 = 3. Room (1,6) has rooms on the north (2) and south (8) and thus encodes as 2 + 8 = 10. Room (1,7) is the same as room (1,2) and thus encodes as 6. This same method continues for rooms (2,1) through (4,7).",
    "tags": "USACO",
    "url": "/usaco/2018/10/08/castle.html"
  },{
    "title": "Ordered Fractions",
    "text": "Consider the set of all reduced fractions between 0 and 1 inclusive with denominators less than or equal to N. Here is the set when N = 5: 0/1 1/5 1/4 1/3 2/5 1/2 3/5 2/3 3/4 4/5 1/1 Write a program that, given an integer N between 1 and 160 inclusive, prints the fractions in order of increasing magnitude. PROGRAM NAME: frac1 INPUT FORMAT One line with a single integer N. SAMPLE INPUT (file frac1.in) 5 OUTPUT FORMAT One fraction per line, sorted in order of magnitude. SAMPLE OUTPUT (file frac1.out) 0/1 1/5 1/4 1/3 2/5 1/2 3/5 2/3 3/4 4/5 1/1",
    "tags": "USACO",
    "url": "/usaco/2018/10/05/frac1.html"
  },{
    "title": "Prime Palindromes",
    "text": "The number 151 is a prime palindrome because it is both a prime number and a palindrome (it is the same number when read forward as backward). Write a program that finds all prime palindromes in the range of two supplied numbers a and b (5 &lt;= a &lt; b &lt;= 100,000,000); both a and b are considered to be within the range . PROGRAM NAME: pprime INPUT FORMAT Line 1: Two integers, a and b SAMPLE INPUT (file pprime.in) 5 500 OUTPUT FORMAT The list of palindromic primes in numerical order, one per line. SAMPLE OUTPUT (file pprime.out) 5 7 11 101 131 151 181 191 313 353 373 383 HINTS (use them carefully!) Hint 1 Generate the palindromes and see if they are prime. Hint 2 Generate the palindromes and see if they are prime. Generate palindromes by combining digits properly. You might need more than one of the loops like below. /* generate five digit palindrome: */ for (d1 = 1; d1 &lt;= 9; d1+=2) { /* only odd; evens aren't so prime */ for (d2 = 0; d2 &lt;= 9; d2++) { for (d3 = 0; d3 &lt;= 9; d3++) { palindrome = 10000*d1 + 1000*d2 +100*d3 + 10*d2 + d1; //... deal with palindrome ... } } }",
    "tags": "USACO",
    "url": "/usaco/2018/10/04/pprime.html"
  },{
    "title": "Superprime Rib",
    "text": "Butchering Farmer John’s cows always yields the best prime rib. You can tell prime ribs by looking at the digits lovingly stamped across them, one by one, by FJ and the USDA. Farmer John ensures that a purchaser of his prime ribs gets really prime ribs because when sliced from the right, the numbers on the ribs continue to stay prime right down to the last rib, e.g.: 7 3 3 1 The set of ribs denoted by 7331 is prime; the three ribs 733 are prime; the two ribs 73 are prime, and, of course, the last rib, 7, is prime. The number 7331 is called a superprime of length 4. Write a program that accepts a number N 1 &lt;=N&lt;=8 of ribs and prints all the superprimes of that length. The number 1 (by itself) is not a prime number. PROGRAM NAME: sprime INPUT FORMAT A single line with the number N. SAMPLE INPUT (file sprime.in) 4 OUTPUT FORMAT The superprime ribs of length N, printed in ascending order one per line. SAMPLE OUTPUT (file sprime.out) 2333 2339 2393 2399 2939 3119 3137 3733 3739 3793 3797 5939 7193 7331 7333 7393",
    "tags": "USACO",
    "url": "/usaco/2018/10/03/sprime.html"
  },{
    "title": "Number Triangles",
    "text": "Consider the number triangle shown below. Write a program that calculates the highest sum of numbers that can be passed on a route that starts at the top and ends somewhere on the base. Each step can go either diagonally down to the left or diagonally down to the right. 7 3 8 8 1 0 2 7 4 4 4 5 2 6 5 In the sample above, the route from 7 to 3 to 8 to 7 to 5 produces the highest sum: 30. PROGRAM NAME: numtri INPUT FORMAT The first line contains R (1 &lt;= R &lt;= 1000), the number of rows. Each subsequent line contains the integers for that particular row of the triangle. All the supplied integers are non-negative and no larger than 100. SAMPLE INPUT (file numtri.in) 5 7 3 8 8 1 0 2 7 4 4 4 5 2 6 5 OUTPUT FORMAT A single line containing the largest sum using the traversal specified. SAMPLE OUTPUT (file numtri.out) 30",
    "tags": "USACO",
    "url": "/usaco/2018/10/03/numtri.html"
  },{
    "title": "Mother’s Milk",
    "text": "Farmer John has three milking buckets of capacity A, B, and C liters. Each of the numbers A, B, and C is an integer from 1 through 20, inclusive. Initially, buckets A and B are empty while bucket C is full of milk. Sometimes, FJ pours milk from one bucket to another until the second bucket is filled or the first bucket is empty. Once begun, a pour must be completed, of course. Being thrifty, no milk may be tossed out. Write a program to help FJ determine what amounts of milk he can leave in bucket C when he begins with three buckets as above, pours milk among the buckets for a while, and then notes that bucket A is empty. PROGRAM NAME: milk3 INPUT FORMAT A single line with the three integers A, B, and C. SAMPLE INPUT (file milk3.in) 8 9 10 OUTPUT FORMAT A single line with a sorted list of all the possible amounts of milk that can be in bucket C when bucket A is empty. SAMPLE OUTPUT (file milk3.out) 1 2 8 9 10 SAMPLE INPUT (file milk3.in) 2 5 10 SAMPLE OUTPUT (file milk3.out) 5 6 7 8 9 10",
    "tags": "USACO",
    "url": "/usaco/2018/10/02/milk3.html"
  },{
    "title": "Arithmetic Progressions",
    "text": "An arithmetic progression is a sequence of the form a, a+b, a+2b, …, a+nb where n=0, 1, 2, 3, … . For this problem, a is a non-negative integer and b is a positive integer. Write a program that finds all arithmetic progressions of length n in the set S of bisquares. The set of bisquares is defined as the set of all integers of the form p2 + q2 (where p and q are non-negative integers). TIME LIMIT: 5 secs PROGRAM NAME: ariprog INPUT FORMAT Line 1: N (3 &lt;= N &lt;= 25), the length of progressions for which to search Line 2: M (1 &lt;= M &lt;= 250), an upper bound to limit the search to the bisquares with 0 &lt;= p,q &lt;= M. SAMPLE INPUT (file ariprog.in) 5 7 OUTPUT FORMAT If no sequence is found, a single line reading ‘NONE’. Otherwise, output one or more lines, each with two integers: the first element in a found sequence and the difference between consecutive elements in the same sequence. The lines should be ordered with smallest-difference sequences first and smallest starting number within those sequences first. There will be no more than 10,000 sequences. SAMPLE OUTPUT (file ariprog.out) 1 4 37 4 2 8 29 8 1 12 5 12 13 12 17 12 5 20 2 24",
    "tags": "USACO",
    "url": "/usaco/2018/10/01/ariprog.html"
  },{
    "title": "Ski Course Design",
    "text": "Farmer John has N hills on his farm (1 &lt;= N &lt;= 1,000), each with an integer elevation in the range 0 .. 100. In the winter, since there is abundant snow on these hills, FJ routinely operates a ski training camp. Unfortunately, FJ has just found out about a new tax that will be assessed next year on farms used as ski training camps. Upon careful reading of the law, however, he discovers that the official definition of a ski camp requires the difference between the highest and lowest hill on his property to be strictly larger than 17. Therefore, if he shortens his tallest hills and adds mass to increase the height of his shorter hills, FJ can avoid paying the tax as long as the new difference between the highest and lowest hill is at most 17. If it costs x^2 units of money to change the height of a hill by x units, what is the minimum amount of money FJ will need to pay? FJ can change the height of a hill only once, so the total cost for each hill is the square of the difference between its original and final height. FJ is only willing to change the height of each hill by an integer amount. PROGRAM NAME: skidesign INPUT FORMAT: Line 1: The integer N. Lines 2..1+N: Each line contains the elevation of a single hill. SAMPLE INPUT (file skidesign.in): 5 20 4 1 24 21 INPUT DETAILS: FJ’s farm has 5 hills, with elevations 1, 4, 20, 21, and 24. OUTPUT FORMAT: The minimum amount FJ needs to pay to modify the elevations of his hills so the difference between largest and smallest is at most 17 units. SAMPLE OUTPUT (file skidesign.out): 18 OUTPUT DETAILS: FJ keeps the hills of heights 4, 20, and 21 as they are. He adds mass to the hill of height 1, bringing it to height 4 (cost = 3^2 = 9). He shortens the hill of height 24 to height 21, also at a cost of 3^2 = 9.",
    "tags": "USACO",
    "url": "/usaco/2018/09/30/skidesign.html"
  },{
    "title": "Wormholes",
    "text": "Farmer John’s hobby of conducting high-energy physics experiments on weekends has backfired, causing N wormholes (2 &lt;= N &lt;= 12, N even) to materialize on his farm, each located at a distinct point on the 2D map of his farm (the x,y coordinates are both integers). According to his calculations, Farmer John knows that his wormholes will form N/2 connected pairs. For example, if wormholes A and B are connected as a pair, then any object entering wormhole A will exit wormhole B moving in the same direction, and any object entering wormhole B will similarly exit from wormhole A moving in the same direction. This can have rather unpleasant consequences. For example, suppose there are two paired wormholes A at (1,1) and B at (3,1), and that Bessie the cow starts from position (2,1) moving in the +x direction. Bessie will enter wormhole B [at (3,1)], exit from A [at (1,1)], then enter B again, and so on, getting trapped in an infinite cycle! | . . . . | A &gt; B . Bessie will travel to B then + . . . . A then across to B again Farmer John knows the exact location of each wormhole on his farm. He knows that Bessie the cow always walks in the +x direction, although he does not remember where Bessie is currently located. Please help Farmer John count the number of distinct pairings of the wormholes such that Bessie could possibly get trapped in an infinite cycle if she starts from an unlucky position. FJ doesn’t know which wormhole pairs with any other wormhole, so find all the possibilities (i.e., all the different ways that N wormholes could be paired such that Bessie can, in some way, get in a cycle). Note that a loop with a smaller number of wormholes might contribute a number of different sets of pairings to the total count as those wormholes that are not in the loop are paired in many different ways. PROGRAM NAME: wormhole INPUT FORMAT: Line 1: The number of wormholes, N. Lines 2..1+N: Each line contains two space-separated integers describing the (x,y) coordinates of a single wormhole. Each coordinate is in the range 0..1,000,000,000. SAMPLE INPUT (file wormhole.in): 4 0 0 1 0 1 1 0 1 INPUT DETAILS: There are 4 wormholes, forming the corners of a square. OUTPUT FORMAT: Line 1: The number of distinct pairings of wormholes such that Bessie could conceivably get stuck in a cycle walking from some starting point in the +x direction. SAMPLE OUTPUT (file wormhole.out): 2 OUTPUT DETAILS: If we number the wormholes 1..4 as we read them from the input, then if wormhole 1 pairs with wormhole 2 and wormhole 3 pairs with wormhole 4, Bessie can get stuck if she starts anywhere between (0,0) and (1,0) or between (0,1) and (1,1). | . . . . 4 3 . . . Bessie will travel to B then 1-2-.-.-. A then across to B again Similarly, with the same starting points, Bessie can get stuck in a cycle if the pairings are 1-3 and 2-4 (if Bessie enters WH#3 and comes out at WH#1, she then walks to WH#2 which transports here to WH#4 which directs her towards WH#3 again for a cycle). Only the pairings 1-4 and 2-3 allow Bessie to walk in the +x direction from any point in the 2D plane with no danger of cycling.",
    "tags": "USACO",
    "url": "/usaco/2018/09/29/wormhole.html"
  },{
    "title": "Combination Lock",
    "text": "Farmer John’s cows keep escaping from his farm and causing mischief. To try and prevent them from leaving, he purchases a fancy combination lock to keep his cows from opening the pasture gate. Knowing that his cows are quite clever, Farmer John wants to make sure they cannot easily open the lock by simply trying many different combinations. The lock has three dials, each numbered 1..N (1 &lt;= N &lt;= 100), where 1 and N are adjacent since the dials are circular. There are two combinations that open the lock, one set by Farmer John, and also a “master” combination set by the lock maker. The lock has a small tolerance for error, however, so it will open even if the numbers on the dials are each within at most 2 positions of a valid combination. For example, if Farmer John’s combination is (1,2,3) and the master combination is (4,5,6), the lock will open if its dials are set to (1,3,5) (since this is close enough to Farmer John’s combination) or to (2,4,8) (since this is close enough to the master combination). Note that (1,5,6) would not open the lock, since it is not close enough to any one single combination. Given Farmer John’s combination and the master combination, please determine the number of distinct settings for the dials that will open the lock. Order matters, so the setting (1,2,3) is distinct from (3,2,1). PROGRAM NAME: combo INPUT FORMAT: Line 1: The integer N. Line 2: Three space-separated integers, specifying Farmer John’s combination. Line 3: Three space-separated integers, specifying the master combination (possibly the same as Farmer John’s combination). SAMPLE INPUT (file combo.in): 50 1 2 3 5 6 7 INPUT DETAILS: Each dial is numbered 1..50. Farmer John’s combination is (1,2,3), and the master combination is (5,6,7). OUTPUT FORMAT: Line 1: The number of distinct dial settings that will open the lock. SAMPLE OUTPUT (file combo.out): 249 SAMPLE OUTPUT EXPLANATION Here’s a list: 1,1,1 2,2,4 3,4,2 4,4,5 5,4,8 6,5,6 7,5,9 3,50,2 50,1,4 1,1,2 2,2,5 3,4,3 4,4,6 5,4,9 6,5,7 7,6,5 3,50,3 50,1,5 1,1,3 2,3,1 3,4,4 4,4,7 5,5,5 6,5,8 7,6,6 3,50,4 50,2,1 1,1,4 2,3,2 3,4,5 4,4,8 5,5,6 6,5,9 7,6,7 3,50,5 50,2,2 1,1,5 2,3,3 3,4,6 4,4,9 5,5,7 6,6,5 7,6,8 49,1,1 50,2,3 1,2,1 2,3,4 3,4,7 4,5,5 5,5,8 6,6,6 7,6,9 49,1,2 50,2,4 1,2,2 2,3,5 3,4,8 4,5,6 5,5,9 6,6,7 7,7,5 49,1,3 50,2,5 1,2,3 2,4,1 3,4,9 4,5,7 5,6,5 6,6,8 7,7,6 49,1,4 50,3,1 1,2,4 2,4,2 3,5,5 4,5,8 5,6,6 6,6,9 7,7,7 49,1,5 50,3,2 1,2,5 2,4,3 3,5,6 4,5,9 5,6,7 6,7,5 7,7,8 49,2,1 50,3,3 1,3,1 2,4,4 3,5,7 4,6,5 5,6,8 6,7,6 7,7,9 49,2,2 50,3,4 1,3,2 2,4,5 3,5,8 4,6,6 5,6,9 6,7,7 7,8,5 49,2,3 50,3,5 1,3,3 3,1,1 3,5,9 4,6,7 5,7,5 6,7,8 7,8,6 49,2,4 50,4,1 1,3,4 3,1,2 3,6,5 4,6,8 5,7,6 6,7,9 7,8,7 49,2,5 50,4,2 1,3,5 3,1,3 3,6,6 4,6,9 5,7,7 6,8,5 7,8,8 49,3,1 50,4,3 1,4,1 3,1,4 3,6,7 4,7,5 5,7,8 6,8,6 7,8,9 49,3,2 50,4,4 1,4,2 3,1,5 3,6,8 4,7,6 5,7,9 6,8,7 1,50,1 49,3,3 50,4,5 1,4,3 3,2,1 3,6,9 4,7,7 5,8,5 6,8,8 1,50,2 49,3,4 49,50,1 1,4,4 3,2,2 3,7,5 4,7,8 5,8,6 6,8,9 1,50,3 49,3,5 49,50,2 1,4,5 3,2,3 3,7,6 4,7,9 5,8,7 7,4,5 1,50,4 49,4,1 49,50,3 2,1,1 3,2,4 3,7,7 4,8,5 5,8,8 7,4,6 1,50,5 49,4,2 49,50,4 2,1,2 3,2,5 3,7,8 4,8,6 5,8,9 7,4,7 2,50,1 49,4,3 49,50,5 2,1,3 3,3,1 3,7,9 4,8,7 6,4,5 7,4,8 2,50,2 49,4,4 50,50,1 2,1,4 3,3,2 3,8,5 4,8,8 6,4,6 7,4,9 2,50,3 49,4,5 50,50,2 2,1,5 3,3,3 3,8,6 4,8,9 6,4,7 7,5,5 2,50,4 50,1,1 50,50,3 2,2,1 3,3,4 3,8,7 5,4,5 6,4,8 7,5,6 2,50,5 50,1,2 50,50,4 2,2,2 3,3,5 3,8,8 5,4,6 6,4,9 7,5,7 3,50,1 50,1,3 50,50,5 2,2,3 3,4,1 3,8,9 5,4,7 6,5,5 7,5,8",
    "tags": "USACO",
    "url": "/usaco/2018/09/29/combo.html"
  },{
    "title": "Prime Cryptarithm",
    "text": "This poorly named task has nothing to do with prime numbers or even, really, prime digits. Sorry ‘bout that. A cryptarithm is usually presented as a pencil-and-paper task in which the solver is required to substitute a digit for each of the asterisks (or, often, letters) in the manual evaluation of an arithmetic term or expression so that the consistent application of the digits results in a proper expression. A classic example is this cryptarithm, shown with its unique solution: SEND 9562 S-&gt;9 E-&gt;5 N-&gt;6 D-&gt;2 + MORE + 1085 M-&gt;1 O-&gt;0 R-&gt;8 ------- ------- MONEY 10657 Y-&gt;7 The following cryptarithm is a multiplication problem that can be solved by substituting digits from a specified set of N digits into the positions marked with *. Since the asterisks are generic, any digit from the input set can be used for any of the asterisks; any digit may be duplicated as many times as desired. Consider using the set {2,3,5,7} for the cryptarithm below: * * * x * * ------- * * * &lt;-- partial product 1 -- MUST BE 3 DIGITS LONG * * * &lt;-- partial product 2 -- MUST BE 3 DIGITS LONG ------- * * * * Digits can appear only in places marked by ‘*’. Of course, leading zeroes are not allowed. The partial products must be three digits long, even though the general case (see below) might have four digit partial products. Note About Cryptarithm’s Multiplication In USA, children are taught to perform multidigit multiplication as described here. Consider multiplying a three digit number whose digits are ‘a’, ‘b’, and ‘c’ by a two digit number whose digits are ‘d’ and ‘e’: Note that this diagram shows far more digits in its results than the required diagram above which has three digit partial products! a b c &lt;-- number 'abc' x d e &lt;-- number 'de'; the 'x' means 'multiply' ----------- p1 * * * * &lt;-- product of e * abc; first star might be 0 (absent) p2 * * * * &lt;-- product of d * abc; first star might be 0 (absent) ----------- * * * * * &lt;-- sum of p1 and p2 (e*abc + 10*d*abc) == de*abc Note that the ‘partial products’ are as taught in USA schools. The first partial product is the product of the final digit of the second number and the top number. The second partial product is the product of the first digit of the second number and the top number. Write a program that will find all solutions to the cryptarithm above for any subset of supplied non-zero single-digits. Note that the multiplicands, partial products, and answers must all conform to the cryptarithm’s framework. PROGRAM NAME: crypt1 INPUT FORMAT Line 1: N, the number of digits that will be used Line 2: N space separated non-zero digits with which to solve the cryptarithm SAMPLE INPUT (file crypt1.in) 5 2 3 4 6 8 OUTPUT FORMAT A single line with the total number of solutions. Here is the one and only solution for the sample input: 2 2 2 x 2 2 ------ 4 4 4 4 4 4 --------- 4 8 8 4 SAMPLE OUTPUT (file crypt1.out) 1 OUTPUT DETAILS Here’s why 222x22 works: 3 digits times 2 digits yields two (equal!) partial products, each of three digits (as required). The answer has four digits, as required. Each digit used {2, 4, 8} is in the supplied set {2, 3, 4, 6, 8}. Why 222x23 doesn’t work: 2 2 2 &lt;-- OK: three digits, all members of {2, 3, 4, 6, 8} 2 3 &lt;-- OK: two digits, all members of {2, 3, 4, 6, 8} ------ 6 6 6 &lt;-- OK: three digits, all members of {2, 3, 4, 6, 8} 4 4 4 &lt;-- OK: three digits, all members of {2, 3, 4, 6, 8} --------- 5 1 0 6 &lt;-- NOT OK: four digits (good), but 5, 1, and 0 are not in {2, 3, 4, 6, 8}",
    "tags": "USACO",
    "url": "/usaco/2018/09/29/crypt1.html"
  },{
    "title": "Dual Palindromes",
    "text": "A number that reads the same from right to left as when read from left to right is called a palindrome. The number 12321 is a palindrome; the number 77778 is not. Of course, palindromes have neither leading nor trailing zeroes, so 0220 is not a palindrome. The number 21 (base 10) is not palindrome in base 10, but the number 21 (base 10) is, in fact, a palindrome in base 2 (10101). Write a program that reads two numbers (expressed in base 10): N (1 &lt;= N &lt;= 15) S (0 &lt; S &lt; 10000) and then finds and prints (in base 10) the first N numbers strictly greater than S that are palindromic when written in two or more number bases (2 &lt;= base &lt;= 10). Solutions to this problem do not require manipulating integers larger than the standard 32 bits. PROGRAM NAME: dualpal INPUT FORMAT A single line with space separated integers N and S. SAMPLE INPUT (file dualpal.in) 3 25 OUTPUT FORMAT N lines, each with a base 10 number that is palindromic when expressed in at least two of the bases 2..10. The numbers should be listed in order from smallest to largest. SAMPLE OUTPUT (file dualpal.out) 26 27 28",
    "tags": "USACO",
    "url": "/usaco/2018/09/28/dualpal.html"
  },{
    "title": "Palindromic Squares",
    "text": "Palindromes are numbers that read the same forwards as backwards. The number 12321 is a typical palindrome. Given a number base B (2 &lt;= B &lt;= 20 base 10), print all the integers N (1 &lt;= N &lt;= 300 base 10) such that the square of N is palindromic when expressed in base B; also print the value of that palindromic square. Use the letters ‘A’, ‘B’, and so on to represent the digits 10, 11, and so on. Print both the number and its square in base B. PROGRAM NAME: palsquare INPUT FORMAT A single line with B, the base (specified in base 10). ##SAMPLE INPUT (file palsquare.in) 10 OUTPUT FORMAT Lines with two integers represented in base B. The first integer is the number whose square is palindromic; the second integer is the square itself. NOTE WELL THAT BOTH INTEGERS ARE IN BASE B! SAMPLE OUTPUT (file palsquare.out) 1 1 2 4 3 9 11 121 22 484 26 676 101 10201 111 12321 121 14641 202 40804 212 44944 264 69696",
    "tags": "USACO",
    "url": "/usaco/2018/09/28/palsquare.html"
  },{
    "title": "Mixing Milk",
    "text": "The Merry Milk Makers company buys milk from farmers, packages it into attractive 1- and 2-Unit bottles, and then sells that milk to grocery stores so we can each start our day with delicious cereal and milk. Since milk packaging is such a difficult business in which to make money, it is important to keep the costs as low as possible. Help Merry Milk Makers purchase the farmers’ milk in the cheapest possible manner. The MMM company has an extraordinarily talented marketing department and knows precisely how much milk they need each day to package for their customers. The company has contracts with several farmers from whom they may purchase milk, and each farmer has a (potentially) different price at which they sell milk to the packing plant. Of course, a herd of cows can only produce so much milk each day, so the farmers already know how much milk they will have available. Each day, Merry Milk Makers can purchase an integer number of units of milk from each farmer, a number that is always less than or equal to the farmer’s limit (and might be the entire production from that farmer, none of the production, or any integer in between). Given: The Merry Milk Makers’ daily requirement of milk The cost per unit for milk from each farmer The amount of milk available from each farmer calculate the minimum amount of money that Merry Milk Makers must spend to meet their daily need for milk. Note: The total milk produced per day by the farmers will always be sufficient to meet the demands of the Merry Milk Makers even if the prices are high. PROGRAM NAME: milk INPUT FORMAT Line 1: Two integers, N and M. The first value, N, (0 &lt;= N &lt;= 2,000,000) is the amount of milk that Merry Milk Makers wants per day. The second, M, (0 &lt;= M &lt;= 5,000) is the number of farmers that they may buy from. Lines 2 through M+1: The next M lines each contain two integers: Pi and Ai. Pi (0 &lt;= Pi &lt;= 1,000) is price in cents that farmer i charges. Ai (0 &lt;= Ai &lt;= 2,000,000) is the amount of milk that farmer i can sell to Merry Milk Makers per day. SAMPLE INPUT (file milk.in) 100 5 5 20 9 40 3 10 8 80 6 30 INPUT EXPLANATION 100 5 – MMM wants 100 units of milk from 5 farmers 5 20 – Farmer 1 says, “I can sell you 20 units at 5 cents per unit” 9 40 etc. 3 10 – Farmer 3 says, “I can sell you 10 units at 3 cents per unit” 8 80 etc. 6 30 – Farmer 5 says, “I can sell you 30 units at 6 cents per unit” OUTPUT FORMAT A single line with a single integer that is the minimum cost that Merry Milk Makers must pay for one day’s milk. SAMPLE OUTPUT (file milk.out) 630 OUTPUT EXPLANATION Here’s how the MMM company spent only 630 cents to purchase 100 units of milk: Price per unit Units available Units bought Price * # units Total cost Notes 5 20 20 5*20 100   9 40 0     Bought no milk from farmer 2 3 10 10 3*10 30   8 80 40 8*40 320 Did not buy all 80 units! 6 30 30 6*30 180   Total 180 100   630 Cheapest total cost",
    "tags": "USACO",
    "url": "/usaco/2018/09/28/milk.html"
  },{
    "title": "Barn Repair",
    "text": "It was a dark and stormy night that ripped the roof and gates off the stalls that hold Farmer John’s cows. Happily, many of the cows were on vacation, so the barn was not completely full. The cows spend the night in stalls that are arranged adjacent to each other in a long line. Some stalls have cows in them; some do not. All stalls are the same width. Farmer John must quickly erect new boards in front of the stalls, since the doors were lost. His new lumber supplier will supply him boards of any length he wishes, but the supplier can only deliver a small number of total boards. Farmer John wishes to minimize the total length of the boards he must purchase. Given M (1 &lt;= M &lt;= 50), the maximum number of boards that can be purchased; S (1 &lt;= S &lt;= 200), the total number of stalls; C (1 &lt;= C &lt;= S) the number of cows in the stalls, and the C occupied stall numbers (1 &lt;= stall_number &lt;= S), calculate the minimum number of stalls that must be blocked in order to block all the stalls that have cows in them. Print your answer as the total number of stalls blocked. PROGRAM NAME: barn1 INPUT FORMAT Line 1: M, S, and C (space separated) Lines 2-C+1: Each line contains one integer, the number of an occupied stall. SAMPLE INPUT (file barn1.in) 4 50 18 3 4 6 8 14 15 16 17 21 25 26 27 30 31 40 41 42 43 OUTPUT FORMAT A single line with one integer that represents the total number of stalls blocked. SAMPLE OUTPUT (file barn1.out) 25 One minimum arrangement is one board covering stalls 3-8, one covering 14-21, one covering 25-31, and one covering 40-43.",
    "tags": "USACO",
    "url": "/usaco/2018/09/28/barn1.html"
  },{
    "title": "Name That Number",
    "text": "Among the large Wisconsin cattle ranchers, it is customary to brand cows with serial numbers to please the Accounting Department. The cow hands don’t appreciate the advantage of this filing system, though, and wish to call the members of their herd by a pleasing name rather than saying, “C’mon, #4734, get along.” Help the poor cowhands out by writing a program that will translate the brand serial number of a cow into possible names uniquely associated with that serial number. Since the cow hands all have cellular saddle phones these days, use the standard Touch-Tone(R) telephone keypad mapping to get from numbers to letters (except for “Q” and “Z”): 2: A,B,C 5: J,K,L 8: T,U,V 3: D,E,F 6: M,N,O 9: W,X,Y 4: G,H,I 7: P,R,S Acceptable names for cattle are provided to you in a file named “dict.txt”, which contains a list of fewer than 5,000 acceptable cattle names (all letters capitalized). Take a cow’s brand number and report which of all the possible words to which that number maps are in the given dictionary which is supplied as dict.txt in the grading environment (and is sorted into ascending order). For instance, the brand number 4734 produces all the following names: GPDG GPDH GPDI GPEG GPEH GPEI GPFG GPFH GPFI GRDG GRDH GRDI GREG GREH GREI GRFG GRFH GRFI GSDG GSDH GSDI GSEG GSEH GSEI GSFG GSFH GSFI HPDG HPDH HPDI HPEG HPEH HPEI HPFG HPFH HPFI HRDG HRDH HRDI HREG HREH HREI HRFG HRFH HRFI HSDG HSDH HSDI HSEG HSEH HSEI HSFG HSFH HSFI IPDG IPDH IPDI IPEG IPEH IPEI IPFG IPFH IPFI IRDG IRDH IRDI IREG IREH IREI IRFG IRFH IRFI ISDG ISDH ISDI ISEG ISEH ISEI ISFG ISFH ISFI As it happens, the only one of these 81 names that is in the list of valid names is “GREG”. Write a program that is given the brand number of a cow and prints all the valid names that can be generated from that brand number or ‘NONE’ if there are no valid names. Serial numbers can be as many as a dozen digits long. PROGRAM NAME: namenum INPUT FORMAT A single line with a number from 1 through 12 digits in length. SAMPLE INPUT (file namenum.in) 4734 OUTPUT FORMAT A list of valid names that can be generated from the input, one per line, in ascending alphabetical order. SAMPLE OUTPUT (file namenum.out) GREG",
    "tags": "USACO",
    "url": "/usaco/2018/09/28/namenum.html"
  },{
    "title": "Transformations",
    "text": "A square pattern of size N x N (1 &lt;= N &lt;= 10) black and white square tiles is transformed into another square pattern. Write a program that will recognize the minimum transformation that has been applied to the original pattern given the following list of possible transformations: 90 Degree Rotation: The pattern was rotated clockwise 90 degrees. 180 Degree Rotation: The pattern was rotated clockwise 180 degrees. 270 Degree Rotation: The pattern was rotated clockwise 270 degrees. Reflection: The pattern was reflected horizontally (turned into a mirror image of itself by reflecting around a vertical line in the middle of the image). Combination: The pattern was reflected horizontally and then subjected to one of the rotations (#1-#3). No Change: The original pattern was not changed. Invalid Transformation: The new pattern was not obtained by any of the above methods. In the case that more than one transform could have been used, choose the one with the minimum number above. PROGRAM NAME: transform INPUT FORMAT Line 1: A single integer, N Line 2..N+1: N lines of N characters (each either ‘@’ or ‘-‘); this is the square before transformation Line N+2..2*N+1: N lines of N characters (each either ‘@’ or ‘-‘); this is the square after transformation SAMPLE INPUT (file transform.in) 3 @-@ --- @@- @-@ @-- --@ OUTPUT FORMAT A single line containing the number from 1 through 7 (described above) that categorizes the transformation required to change from the ‘before’ representation to the ‘after’ representation. SAMPLE OUTPUT (file transform.out) 1",
    "tags": "USACO",
    "url": "/usaco/2018/09/28/transform.html"
  },{
    "title": "Milking Cows",
    "text": "Three farmers rise at 5 am each morning and head for the barn to milk three cows. The first farmer begins milking his cow at time 300 (measured in seconds after 5 am) and ends at time 1000. The second farmer begins at time 700 and ends at time 1200. The third farmer begins at time 1500 and ends at time 2100. The longest continuous time during which at least one farmer was milking a cow was 900 seconds (from 300 to 1200). The longest time no milking was done, between the beginning and the ending of all milking, was 300 seconds (1500 minus 1200). Your job is to write a program that will examine a list of beginning and ending times for N (1 &lt;= N &lt;= 5000) farmers milking N cows and compute (in seconds): The longest time interval at least one cow was milked. The longest time interval (after milking starts) during which no cows were being milked. PROGRAM NAME: milk2 INPUT FORMAT Line 1: The single integer, N Lines 2..N+1: Two non-negative integers less than 1,000,000, respectively the starting and ending time in seconds after 0500 SAMPLE INPUT (file milk2.in) 3 300 1000 700 1200 1500 2100 OUTPUT FORMAT A single line with two integers that represent the longest continuous time of milking and the longest idle time. SAMPLE OUTPUT (file milk2.out) 900 300",
    "tags": "USACO",
    "url": "/usaco/2018/09/27/milk2.html"
  },{
    "title": "Broken Necklace",
    "text": "You have a necklace of N red, white, or blue beads (3&lt;=N&lt;=350) some of which are red, others blue, and others white, arranged at random. Here are two examples for n=29: 1 2 1 2 r b b r b r r b r b b b r r b r r r w r b r w w b b r r b b b b b b r b r r b r b r r r b r r r r r r b r b r r r w Figure A Figure B r red bead b blue bead w white bead The beads considered first and second in the text that follows have been marked in the picture. The configuration in Figure A may be represented as a string of b’s and r’s, where b represents a blue bead and r represents a red one, as follows: brbrrrbbbrrrrrbrrbbrbbbbrrrrb . Suppose you are to break the necklace at some point, lay it out straight, and then collect beads of the same color from one end until you reach a bead of a different color, and do the same for the other end (which might not be of the same color as the beads collected before this). Determine the point where the necklace should be broken so that the most number of beads can be collected. Example For example, for the necklace in Figure A, 8 beads can be collected, with the breaking point either between bead 9 and bead 10 or else between bead 24 and bead 25. In some necklaces, white beads had been included as shown in Figure B above. When collecting beads, a white bead that is encountered may be treated as either red or blue and then painted with the desired color. The string that represents this configuration can include any of the three symbols r, b and w. Write a program to determine the largest number of beads that can be collected from a supplied necklace. PROGRAM NAME: beads INPUT FORMAT Line 1: N, the number of beads Line 2: a string of N characters, each of which is r, b, or w SAMPLE INPUT (file beads.in) 29 wwwbbrwrbrbrrbrbrwrwwrbwrwrrb OUTPUT FORMAT A single line containing the maximum of number of beads that can be collected from the supplied necklace. SAMPLE OUTPUT (file beads.out) 11 OUTPUT EXPLANATION Consider two copies of the beads (kind of like being able to runaround the ends). The string of 11 is marked. Two necklace copies joined here v wwwbbrwrbrbrrbrbrwrwwrbwrwrrb|wwwbbrwrbrbrrbrbrwrwwrbwrwrrb ******|***** rrrrrb|bbbbb &lt;-- assignments 5xr .....#|##### 6xb 5+6 = 11 total",
    "tags": "USACO",
    "url": "/usaco/2018/09/26/beads.html"
  },{
    "title": "Friday the 13th",
    "text": "Is Friday the 13th really an unusual event? That is, does the 13th of the month land on a Friday less often than on any other day of the week? To answer this question, write a program that will compute the frequency that the 13th of each month lands on Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, and Saturday over a given period of N years. The time period to test will be from January 1, 1900 to December 31, 1900+N-1 for a given number of years, N. N is positive and will not exceed 400. Note that the start year is NINETEEN HUNDRED, not NINETEEN NINETY. There are few facts you need to know before you can solve this problem: January 1, 1900 was on a Monday. Thirty days has September, April, June, and November, all the rest have 31 except for February which has 28 except in leap years when it has 29. Every year evenly divisible by 4 is a leap year (1992 = 4*498 so 1992 will be a leap year, but the year 1990 is not a leap year) The rule above does not hold for century years. Century years divisible by 400 are leap years, all other are not. Thus, the century years 1700, 1800, 1900 and 2100 are not leap years, but 2000 is a leap year. Do not use any built-in date functions in your computer language. Don’t just precompute the answers, either, please. PROGRAM NAME: friday INPUT FORMAT One line with the integer N. SAMPLE INPUT (file friday.in) 20 OUTPUT FORMAT Seven space separated integers on one line. These integers represent the number of times the 13th falls on Saturday, Sunday, Monday, Tuesday, …, Friday. SAMPLE OUTPUT (file friday.out) 36 33 34 33 35 35 34",
    "tags": "USACO",
    "url": "/usaco/2018/09/25/friday.html"
  },{
    "title": "Greedy Gift Givers",
    "text": "A group of NP (2 ≤ NP ≤ 10) uniquely named friends has decided to exchange gifts of money. Each of these friends might or might not give some money to some or all of the other friends (although some might be cheap and give to no one). Likewise, each friend might or might not receive money from any or all of the other friends. Your goal is to deduce how much more money each person receives than they give. The rules for gift-giving are potentially different than you might expect. Each person goes to the bank (or any other source of money) to get a certain amount of money to give and divides this money evenly among all those to whom he or she is giving a gift. No fractional money is available, so dividing 7 among 2 friends would be 3 each for the friends with 1 left over – that 1 left over goes into the giver’s “account”. All the participants’ gift accounts start at 0 and are decreased by money given and increased by money received. In any group of friends, some people are more giving than others (or at least may have more acquaintances) and some people have more money than others. Given: a group of friends, no one of whom has a name longer than 14 characters, the money each person in the group spends on gifts, and a (sub)list of friends to whom each person gives gifts, determine how much money each person ends up with. IMPORTANT NOTE The grader machine is a Linux machine that uses standard Unix conventions: end of line is a single character often known as ‘\\n’. This differs from Windows, which ends lines with two characters, ‘\\n’ and ‘\\r’. Do not let your program get trapped by this! PROGRAM NAME: gift1 INPUT FORMAT Line # Contents 1 A single integer, NP 2..NP+1 Line i+1 contains the name of group member i NP+2..end NP groups of lines organized like this: The first line of each group tells the person's name who will be giving gifts. The second line in the group contains two numbers: The amount of money (in the range 0..2000) to be divided into gifts by the giver NGi (1 ≤ NGi ≤ NP), the number of people to whom the giver will give gifts If NGi is nonzero, each of the next NGi lines lists the name of a recipient of a gift; recipients are not repeated in a single giver's list. SAMPLE INPUT (file gift1.in) 5 dave laura owen vick amr dave 200 3 laura owen vick owen 500 1 dave amr 150 2 vick owen laura 0 2 amr vick vick 0 0 OUTPUT FORMAT The output is NP lines, each with the name of a person followed by a single blank followed by the net gain or loss (final_money_value - initial_money_value) for that person. The names should be printed in the same order they appear starting on line 2 of the input. All gifts are integers. Each person gives the same integer amount of money to each friend to whom any money is given, and gives as much as possible that meets this constraint. Any money not given is kept by the giver. SAMPLE OUTPUT (file gift1.out) dave 302 laura 66 owen -359 vick 141 amr -150 OUTPUT EXPLANATION dave laura owen vick amr 0 0 0 0 0 First, ‘dave’ splits 200 among ‘laura’, ‘owen’, and ‘vick’. That comes to 66 each, with 2 left over -200+2 +66 +66 +66 0 -198 66 66 66 0 Second, ‘owen’ gives 500 to ‘dave’: -198 +500 66 66 -500 66 0 302 66 -434 66 0 Third, ‘amr’ splits 150 between ‘vick’ and ‘owen’: 302 66 -434 +75 66 +75 -150 302 66 -359 141 -150 Fourth, ‘laura’ splits 0 between ‘amr’ and ‘vick’; no changes: 302 66 -359 141 -150 Finally, ‘vick’ gives 0 to no one: dave laura owen vick amr 302 66 -359 141 -150",
    "tags": "USACO",
    "url": "/usaco/2018/09/25/gift1.html"
  },{
    "title": "Your Ride Is Here",
    "text": "It is a well-known fact that behind every good comet is a UFO. These UFOs often come to collect loyal supporters from here on Earth. Unfortunately, they only have room to pick up one group of followers on each trip. They do, however, let the groups know ahead of time which will be picked up for each comet by a clever scheme: they pick a name for the comet which, along with the name of the group, can be used to determine if it is a particular group’s turn to go (who do you think names the comets?). The details of the matching scheme are given below; your job is to write a program which takes the names of a group and a comet and then determines whether the group should go with the UFO behind that comet. Both the name of the group and the name of the comet are converted into a number in the following manner: the final number is just the product of all the letters in the name, where “A” is 1 and “Z” is 26. For instance, the group “USACO” would be 21 * 19 * 1 * 3 * 15 = 17955. If the group’s number mod 47 is the same as the comet’s number mod 47, then you need to tell the group to get ready! (Remember that “a mod b” is the remainder left over after dividing a by b; 34 mod 10 is 4.) Write a program which reads in the name of the comet and the name of the group and figures out whether according to the above scheme the names are a match, printing “GO” if they match and “STAY” if not. The names of the groups and the comets will be a string of capital letters with no spaces or punctuation, up to 6 characters long. Examples: Input Output COMETQ HVNGAT GO ABSTAR USACO STAY PROGRAM NAME: ride This means that you fill in your header with: PROG: ride WARNING: You must have ‘ride’ in this field or the wrong test data (or no test data) will be used. INPUT FORMAT Line 1: An upper case character string of length 1..6 that is the name of the comet. Line 2: An upper case character string of length 1..6 that is the name of the group. NOTE: The input file has a newline at the end of each line but does not have a “return”. Sometimes, programmers code for the Windows paradigm of “return” followed by “newline”; don’t do that! Use simple input routines like “readln” (for Pascal) and, for C/C++, “fscanf” and “fid»string”. NOTE 2: Because of the extra characters, be sure to leave enough room for a ‘newline’ (also notated as ‘\\n’) and an end of string character (‘\\0’) if your language uses it (as C and C++ do). This means you need eight characters of room instead of six. SAMPLE INPUT (file ride.in) COMETQ HVNGAT OUTPUT FORMAT A single line containing either the word “GO” or the word “STAY”. SAMPLE OUTPUT (file ride.out) GO OUTPUT EXPLANATION Converting the letters to numbers: C O M E T Q 3 15 13 5 20 17 H V N G A T 8 22 14 7 1 20 then calculate the product mod 47: 3 * 15 * 13 * 5 * 20 * 17 = 994500 mod 47 = 27 8 * 22 * 14 * 7 * 1 * 20 = 344960 mod 47 = 27 Because both products evaluate to 27 (when modded by 47), the mission is ‘GO’.",
    "tags": "USACO",
    "url": "/usaco/2018/09/25/ride.html"
  },{
    "title": "",
    "text": "404 Page not found :( The requested page could not be found.",
    "tags": "",
    "url": "/404.html"
  },{
    "title": "About",
    "text": "This is me: I enjoy many things such as ….",
    "tags": "",
    "url": "/about/"
  },{
    "title": "",
    "text": "USACO PORTFOLIO USACO nuggets: Beef McNuggets 28 Jan 2019 rockers: Raucous Rockers 28 Jan 2019 fence9: Electric Fence 22 Jan 2019 heritage: American Heritage 16 Jan 2019 game1: A Game 14 Jan 2019 camelot: Camelot 12 Jan 2019 range: Home on the Range 20 Dec 2018 shopping: Shopping Offers 20 Dec 2018 fence: Riding the Fences 12 Dec 2018 msquare: Magic Squares 11 Dec 2018 butter: Magic Squares 11 Dec 2018 spin: Spinning Wheels 15 Nov 2018 ratios: Feed Ratios 14 Nov 2018 kimbits: Stringsobits 07 Nov 2018 fact4: Factorials 07 Nov 2018 inflate: Score Inflation 06 Nov 2018 contact: Contact 05 Nov 2018 humble: Humble Numbers 05 Nov 2018 stamps: Stamps 03 Nov 2018 agrinet: Agri-Net 01 Nov 2018 fracdec: Fractions to Decimals 31 Oct 2018 cowtour: Cow Tours 31 Oct 2018 comehome: Bessie Come Home 27 Oct 2018 maze1: Overfencing 22 Oct 2018 ttwo: The Tamworth Two 22 Oct 2018 concom: Controlling Companies 17 Oct 2018 money: Money Systems 17 Oct 2018 zerosum: Zero Sum 15 Oct 2018 nocows: Cow Pedigrees 15 Oct 2018 prefix: Longest Prefix 15 Oct 2018 lamps: Party Lamps 12 Oct 2018 runround: Runaround Numbers 12 Oct 2018 subset: Subset Sums 11 Oct 2018 preface: Preface Numbering 10 Oct 2018 holstein: Healthy Holsteins 10 Oct 2018 hamming: Hamming Codes 09 Oct 2018 sort3: Sorting a Three-Valued Sequence 08 Oct 2018 castle: The Castle 08 Oct 2018 frac1: Ordered Fractions 05 Oct 2018 pprime: Prime Palindromes 04 Oct 2018 sprime: Superprime Rib 03 Oct 2018 numtri: Number Triangles 03 Oct 2018 milk3: Mother's Milk 02 Oct 2018 ariprog: Arithmetic Progressions 01 Oct 2018 skidesign: Ski Course Design 30 Sep 2018 wormhole: Wormholes 29 Sep 2018 combo: Combination Lock 29 Sep 2018 crypt1: Prime Cryptarithm 29 Sep 2018 dualpal: Dual Palindromes 28 Sep 2018 palsquare: Palindromic Squares 28 Sep 2018 milk: Mixing Milk 28 Sep 2018 barn1: Barn Repair 28 Sep 2018 namenum: Name That Number 28 Sep 2018 transform: Transformations 28 Sep 2018 milk2: Milking Cows 27 Sep 2018 beads: Broken Necklace 26 Sep 2018 friday: Friday the 13th 25 Sep 2018 gift1: Greedy Gift Givers 25 Sep 2018 ride: Your Ride Is Here 25 Sep 2018 PORTFOLIO Overview 23 Nov 2018",
    "tags": "",
    "url": "/index.html"
  }]};
