<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-11-29T17:17:45+00:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Johan Vonk’s Website</title><subtitle>My personal static website created using Github Pages, Markdown, and Jekyll</subtitle><entry><title type="html">Overview</title><link href="http://localhost:4000/portfolio/2018/11/24/overview.html" rel="alternate" type="text/html" title="Overview" /><published>2018-11-24T00:00:00+00:00</published><updated>2018-11-24T00:00:00+00:00</updated><id>http://localhost:4000/portfolio/2018/11/24/overview</id><content type="html" xml:base="http://localhost:4000/portfolio/2018/11/24/overview.html">&lt;video controls=&quot;&quot;&gt;&lt;source src=&quot;https://coertvonk.com/wp-content/shield/a0f6-579d/8dadafd0a2a5752d825a90a18ec8f434.mp4&quot; type=&quot;video/mp4&quot;&gt;&lt;/video&gt;</content><author><name></name></author><summary type="html"></summary></entry><entry><title type="html">Healthy Holsteins</title><link href="http://localhost:4000/usaco/2018/10/11/holstein.html" rel="alternate" type="text/html" title="Healthy Holsteins" /><published>2018-10-11T00:00:00+00:00</published><updated>2018-10-11T00:00:00+00:00</updated><id>http://localhost:4000/usaco/2018/10/11/holstein</id><content type="html" xml:base="http://localhost:4000/usaco/2018/10/11/holstein.html">&lt;p&gt;Farmer John prides himself on having the healthiest dairy cows in the world. He knows the vitamin content for one scoop of each feed type and the minimum daily vitamin requirement for his cows. Help Farmer John feed the cows so they stay healthy while minimizing the number of scoops that a cow is fed.&lt;/p&gt;

&lt;p&gt;Given the daily requirements of each kind of vitamin that a cow needs, identify the smallest combination of scoops of feed a cow can be fed in order to meet at least the minimum vitamin requirements.&lt;/p&gt;

&lt;p&gt;Vitamins are measured in integer units. Cows can be fed at most one scoop of any feed type. It is guaranteed that a solution exists for all contest input data.&lt;/p&gt;

&lt;h3 id=&quot;program-name-holstein&quot;&gt;PROGRAM NAME: holstein&lt;/h3&gt;

&lt;h3 id=&quot;input-format&quot;&gt;INPUT FORMAT&lt;/h3&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Line 1:&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;integer V (1 &amp;lt;= V &amp;lt;= 25), the number of types of vitamins&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Line 2:&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;V integers (1 &amp;lt;= each one &amp;lt;= 1000), the minimum requirement for each of the V vitamins that a cow requires each day&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Line 3:&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;integer G (1 &amp;lt;= G &amp;lt;= 15), the number of types of feeds available&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Lines 4..G+3:&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;V integers (0 &amp;lt;= each one &amp;lt;= 1000), the amount of each vitamin that one scoop of this feed contains. The first line of these G lines describes feed #1; the second line describes feed #2; and so on.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;sample-input-file-holsteinin&quot;&gt;SAMPLE INPUT (file holstein.in)&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;4
100 200 300 400
3
50   50  50  50
200 300 200 300
900 150 389 399
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;output-format&quot;&gt;OUTPUT FORMAT&lt;/h3&gt;

&lt;p&gt;The output is a single line of output that contains:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the minimum number of scoops a cow must eat, followed by:&lt;/li&gt;
  &lt;li&gt;a SORTED list (from smallest to largest) of the feed types the cow is given&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If more than one set of feedtypes yield a minimum of scoops, choose the set with the smallest feedtype numbers.&lt;/p&gt;

&lt;h3 id=&quot;sample-output-file-holsteinout&quot;&gt;SAMPLE OUTPUT (file holstein.out)&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;2 1 3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><summary type="html">Farmer John prides himself on having the healthiest dairy cows in the world. He knows the vitamin content for one scoop of each feed type and the minimum daily vitamin requirement for his cows. Help Farmer John feed the cows so they stay healthy while minimizing the number of scoops that a cow is fed.</summary></entry><entry><title type="html">Hamming Codes</title><link href="http://localhost:4000/usaco/2018/10/10/hamming.html" rel="alternate" type="text/html" title="Hamming Codes" /><published>2018-10-10T00:00:00+00:00</published><updated>2018-10-10T00:00:00+00:00</updated><id>http://localhost:4000/usaco/2018/10/10/hamming</id><content type="html" xml:base="http://localhost:4000/usaco/2018/10/10/hamming.html">&lt;p&gt;Given N, B, and D: Find a set of N codewords (1 &amp;lt;= N &amp;lt;= 64), each of length B bits (1 &amp;lt;= B &amp;lt;= 8), such that each of the codewords is at least Hamming distance of D (1 &amp;lt;= D &amp;lt;= 7) away from each of the other codewords.&lt;/p&gt;

&lt;p&gt;The Hamming distance between a pair of codewords is the number of binary bits that differ in their binary notation. Consider the two codewords 0x554 and 0x234 and their differences (0x554 means the hexadecimal number with hex digits 5, 5, and 4)(a hex digit requires four bits):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;           0x554 = 0101 0101 0100
           0x234 = 0010 0011 0100
Bit differences:   -XXX -XX- ----
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Since five bits were different, the Hamming distance is 5.&lt;/p&gt;

&lt;h3 id=&quot;program-name-hamming&quot;&gt;PROGRAM NAME: hamming&lt;/h3&gt;

&lt;h3 id=&quot;input-format&quot;&gt;INPUT FORMAT&lt;/h3&gt;

&lt;p&gt;N, B, D on a single line&lt;/p&gt;

&lt;h3 id=&quot;sample-input-file-hammingin&quot;&gt;SAMPLE INPUT (file hamming.in)&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;16 7 3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;output-format&quot;&gt;OUTPUT FORMAT&lt;/h3&gt;

&lt;p&gt;N codewords, sorted, in decimal, ten per line. In the case of multiple solutions, your program should output the solution which, if interpreted as a base 2^B integer, would have the least value.&lt;/p&gt;

&lt;h3 id=&quot;sample-output-file-hammingout&quot;&gt;SAMPLE OUTPUT (file hamming.out)&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0 7 25 30 42 45 51 52 75 76
82 85 97 102 120 127
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><summary type="html">Given N, B, and D: Find a set of N codewords (1 &amp;lt;= N &amp;lt;= 64), each of length B bits (1 &amp;lt;= B &amp;lt;= 8), such that each of the codewords is at least Hamming distance of D (1 &amp;lt;= D &amp;lt;= 7) away from each of the other codewords.</summary></entry><entry><title type="html">Sorting a Three-Valued Sequence</title><link href="http://localhost:4000/usaco/2018/10/09/sort3.html" rel="alternate" type="text/html" title="Sorting a Three-Valued Sequence" /><published>2018-10-09T01:00:00+00:00</published><updated>2018-10-09T01:00:00+00:00</updated><id>http://localhost:4000/usaco/2018/10/09/sort3</id><content type="html" xml:base="http://localhost:4000/usaco/2018/10/09/sort3.html">&lt;p&gt;Sorting is one of the most frequently performed computational tasks. Consider the special sorting problem in which the records to be sorted have at most &lt;em&gt;three&lt;/em&gt; different key values. This happens for instance when we sort medalists of a competition according to medal value, that is, gold medalists come first, followed by silver, and bronze medalists come last.&lt;/p&gt;

&lt;p&gt;In this task the possible key values are the integers 1, 2 and 3. The required sorting order is non-decreasing. However, sorting has to be accomplished by a sequence of exchange operations. An exchange operation, defined by two position numbers p and q, exchanges the elements in positions p and q.&lt;/p&gt;

&lt;p&gt;You are given a sequence of key values. Write a program that computes the minimal number of exchange operations that are necessary to make the sequence sorted.&lt;/p&gt;

&lt;h3 id=&quot;program-name-sort3&quot;&gt;PROGRAM NAME: sort3&lt;/h3&gt;

&lt;h3 id=&quot;input-format&quot;&gt;INPUT FORMAT&lt;/h3&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Line 1:&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;N (1 &amp;lt;= N &amp;lt;= 1000), the number of records to be sorted&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Lines 2-N+1:&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;A single integer from the set {1, 2, 3}&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;sample-input-file-sort3in&quot;&gt;SAMPLE INPUT (file sort3.in)&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;9
2
2
1
3
3
3
2
3
1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;output-format&quot;&gt;OUTPUT FORMAT&lt;/h3&gt;

&lt;p&gt;A single line containing the number of exchanges required&lt;/p&gt;

&lt;h3 id=&quot;sample-output-file-sort3out&quot;&gt;SAMPLE OUTPUT (file sort3.out)&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><summary type="html">Sorting is one of the most frequently performed computational tasks. Consider the special sorting problem in which the records to be sorted have at most three different key values. This happens for instance when we sort medalists of a competition according to medal value, that is, gold medalists come first, followed by silver, and bronze medalists come last.</summary></entry><entry><title type="html">The Castle</title><link href="http://localhost:4000/usaco/2018/10/09/castle.html" rel="alternate" type="text/html" title="The Castle" /><published>2018-10-09T00:00:00+00:00</published><updated>2018-10-09T00:00:00+00:00</updated><id>http://localhost:4000/usaco/2018/10/09/castle</id><content type="html" xml:base="http://localhost:4000/usaco/2018/10/09/castle.html">&lt;p&gt;In a stroke of luck almost beyond imagination, Farmer John was sent a ticket to the Irish Sweepstakes (really a lottery) for his birthday. This ticket turned out to have only the winning number for the lottery! Farmer John won a fabulous castle in the Irish countryside.&lt;/p&gt;

&lt;p&gt;Bragging rights being what they are in Wisconsin, Farmer John wished to tell his cows all about the castle. He wanted to know how many rooms it has and how big the largest room was. In fact, he wants to take out a single wall to make an even bigger room.&lt;/p&gt;

&lt;p&gt;Your task is to help Farmer John know the exact room count and sizes.&lt;/p&gt;

&lt;p&gt;The castle floorplan is divided into M (wide) by N (1 &amp;lt;=M,N&amp;lt;=50) square modules. Each such module can have between zero and four walls. Castles always have walls on their “outer edges” to keep out the wind and rain.&lt;/p&gt;

&lt;p&gt;Consider this annotated floorplan of a castle:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;     1   2   3   4   5   6   7
   #############################
 1 #   |   #   |   #   |   |   #
   #####---#####---#---#####---#   
 2 #   #   |   #   #   #   #   #
   #---#####---#####---#####---#
 3 #   |   |   #   #   #   #   #   
   #---#########---#####---#---#
 4 # -&amp;gt;#   |   |   |   |   #   #   
   ############################# 

#  = Wall     -,|  = No wall
-&amp;gt; = Points to the wall to remove to
     make the largest possible new room
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;By way of example, this castle sits on a 7 x 4 base. A “room” includes any set of connected “squares” in the floor plan. This floorplan contains five rooms (whose sizes are 9, 7, 3, 1, and 8 in no particular order).&lt;/p&gt;

&lt;p&gt;Removing the wall marked by the arrow merges a pair of rooms to make the largest possible room that can be made by removing a single wall.&lt;/p&gt;

&lt;p&gt;The castle always has at least two rooms and always has a wall that can be removed.&lt;/p&gt;

&lt;h3 id=&quot;program-name-castle&quot;&gt;PROGRAM NAME: castle&lt;/h3&gt;

&lt;h3 id=&quot;input-format&quot;&gt;INPUT FORMAT&lt;/h3&gt;

&lt;p&gt;The map is stored in the form of numbers, one number for each module (“room”), M numbers on each of N lines to describe the floorplan. The input order corresponds to the numbering in the example diagram above.&lt;/p&gt;

&lt;p&gt;Each module descriptive-number tells which of the four walls exist and is the sum of up to four integers:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1. wall to the west
2. wall to the north
4. wall to the east
8. wall to the south
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Inner walls are defined twice; a wall to the south in module 1,1 is also indicated as a wall to the north in module 2,1.&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Line 1:&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Two space-separated integers: M and N&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Line 2..M+1:&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;M x N integers, several per line.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;sample-input-file-castlein&quot;&gt;SAMPLE INPUT (file castle.in)&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;7 4
11 6 11 6 3 10 6
7 9 6 13 5 15 5
1 10 12 7 13 7 5
13 11 10 8 10 12 13
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;output-format&quot;&gt;OUTPUT FORMAT&lt;/h3&gt;

&lt;p&gt;The output contains several lines:&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Line 1:&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;The number of rooms the castle has.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Line 2:&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;The size of the largest room&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Line 3:&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;The size of the largest room creatable by removing one wall&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Line 4:&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;The single wall to remove to make the largest room possible&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Choose the optimal wall to remove from the set of optimal walls by choosing the module farthest to the west (and then, if still tied, farthest to the south). If still tied, choose ‘N’ before ‘E’. Name that wall by naming the module that borders it on either the west or south, along with a direction of N or E giving the location of the wall with respect to the module.&lt;/p&gt;

&lt;h3 id=&quot;sample-output-file-castleout&quot;&gt;SAMPLE OUTPUT (file castle.out)&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;5
9
16
4 1 E
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;input-details&quot;&gt;INPUT DETAILS&lt;/h3&gt;

&lt;p&gt;First, the map is partitioned like below. Note that walls not on the outside borders are doubled:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;     1    2    3    4    5    6    7
   ####|####|####|####|####|####|#####
 1 #   |   #|#   |   #|#   |    |    #
   ####|   #|####|   #|#   |####|    #
  -----|----|----|----|----|----|-----
   ####|#   |####|#  #|#  #|####|#   #
 2 #  #|#   |   #|#  #|#  #|#  #|#   #
   #  #|####|   #|####|#  #|####|#   #
  -----|----|----|----|----|----|-----
   #   |####|   #|####|#  #|####|#   #
 3 #   |    |   #|#  #|#  #|#  #|#   #
   #   |####|####|#  #|####|#  #|#   #
  -----|----|----|----|----|----|-----
   #  #|####|####|    |####|   #|#   #
 4 #  #|#   |    |    |    |   #|#   #
   ####|####|####|####|####|####|#####
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s talk about the squares with a (row, column) notation such that the lower right corner is denoted (4, 7).&lt;/p&gt;

&lt;p&gt;The input will have four lines, each with 7 numbers. Each number describes one ‘room’. &amp;gt;Walls further toward the top are ‘north’, towards the bottom are ‘south’, towards the left are ‘west’, and towards the right are ‘east’.&lt;/p&gt;

&lt;p&gt;Consider square (1,1) which has three walls: north, south, and west. To encode those three walls, we consult the chart:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1. wall to the west
2. wall to the north
3. wall to the east
4. wall to the south
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and sum the numbers for north (2), south (8), and west (1). 2 + 8 + 1 = 11, so this room is encoded as 11.&lt;/p&gt;

&lt;p&gt;The next room to the right (1,2) has walls on the north (2) and east (4) and thus is encoded as 2 +4 = 6.&lt;/p&gt;

&lt;p&gt;The next room to the right (1,3) is the same as (1,1) and thus encodes as 11.&lt;/p&gt;

&lt;p&gt;Room (1,4) is the same as (1,2) and thus encodes as 6.&lt;/p&gt;

&lt;p&gt;Room (1,5) has rooms on the west (1) and north (2) and thus encodes as 1 + 2 = 3.&lt;/p&gt;

&lt;p&gt;Room (1,6) has rooms on the north (2) and south (8) and thus encodes as 2 + 8 = 10.&lt;/p&gt;

&lt;p&gt;Room (1,7) is the same as room (1,2) and thus encodes as 6.&lt;/p&gt;

&lt;p&gt;This same method continues for rooms (2,1) through (4,7).&lt;/p&gt;</content><author><name></name></author><summary type="html">In a stroke of luck almost beyond imagination, Farmer John was sent a ticket to the Irish Sweepstakes (really a lottery) for his birthday. This ticket turned out to have only the winning number for the lottery! Farmer John won a fabulous castle in the Irish countryside.</summary></entry><entry><title type="html">Ordered Fractions</title><link href="http://localhost:4000/usaco/2018/10/06/frac1.html" rel="alternate" type="text/html" title="Ordered Fractions" /><published>2018-10-06T00:00:00+00:00</published><updated>2018-10-06T00:00:00+00:00</updated><id>http://localhost:4000/usaco/2018/10/06/frac1</id><content type="html" xml:base="http://localhost:4000/usaco/2018/10/06/frac1.html">&lt;p&gt;Consider the set of all reduced fractions between 0 and 1 inclusive with denominators less than or equal to N.&lt;/p&gt;

&lt;p&gt;Here is the set when N = 5:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0/1 1/5 1/4 1/3 2/5 1/2 3/5 2/3 3/4 4/5 1/1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Write a program that, given an integer N between 1 and 160 inclusive, prints the fractions in order of increasing magnitude.&lt;/p&gt;

&lt;h3 id=&quot;program-name-frac1&quot;&gt;PROGRAM NAME: frac1&lt;/h3&gt;

&lt;h3 id=&quot;input-format&quot;&gt;INPUT FORMAT&lt;/h3&gt;

&lt;p&gt;One line with a single integer N.&lt;/p&gt;

&lt;h3 id=&quot;sample-input-file-frac1in&quot;&gt;SAMPLE INPUT (file frac1.in)&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;output-format&quot;&gt;OUTPUT FORMAT&lt;/h3&gt;

&lt;p&gt;One fraction per line, sorted in order of magnitude.&lt;/p&gt;

&lt;h3 id=&quot;sample-output-file-frac1out&quot;&gt;SAMPLE OUTPUT (file frac1.out)&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0/1
1/5
1/4
1/3
2/5
1/2
3/5
2/3
3/4
4/5
1/1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><summary type="html">Consider the set of all reduced fractions between 0 and 1 inclusive with denominators less than or equal to N.</summary></entry><entry><title type="html">Prime Palindromes</title><link href="http://localhost:4000/usaco/2018/10/05/pprime.html" rel="alternate" type="text/html" title="Prime Palindromes" /><published>2018-10-05T00:00:00+00:00</published><updated>2018-10-05T00:00:00+00:00</updated><id>http://localhost:4000/usaco/2018/10/05/pprime</id><content type="html" xml:base="http://localhost:4000/usaco/2018/10/05/pprime.html">&lt;p&gt;The number 151 is a prime palindrome because it is both a prime number and a palindrome (it is the same number when read forward as backward). Write a program that finds all prime palindromes in the range of two supplied numbers a and b (5 &amp;lt;= a &amp;lt; b &amp;lt;= 100,000,000); both a and b are considered to be within the range .&lt;/p&gt;

&lt;h3 id=&quot;program-name-pprime&quot;&gt;PROGRAM NAME: pprime&lt;/h3&gt;

&lt;h3 id=&quot;input-format&quot;&gt;INPUT FORMAT&lt;/h3&gt;

&lt;p&gt;Line 1: Two integers, a and b&lt;/p&gt;

&lt;h3 id=&quot;sample-input-file-pprimein&quot;&gt;SAMPLE INPUT (file pprime.in)&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;5 500
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;output-format&quot;&gt;OUTPUT FORMAT&lt;/h3&gt;

&lt;p&gt;The list of palindromic primes in numerical order, one per line.&lt;/p&gt;

&lt;h3 id=&quot;sample-output-file-pprimeout&quot;&gt;SAMPLE OUTPUT (file pprime.out)&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;5
7
11
101
131
151
181
191
313
353
373
383
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;hints-use-them-carefully&quot;&gt;HINTS (use them carefully!)&lt;/h3&gt;

&lt;h4 id=&quot;hint-1&quot;&gt;Hint 1&lt;/h4&gt;

&lt;p&gt;Generate the palindromes and see if they are prime.&lt;/p&gt;

&lt;h4 id=&quot;hint-2&quot;&gt;Hint 2&lt;/h4&gt;

&lt;p&gt;Generate the palindromes and see if they are prime.&lt;/p&gt;

&lt;p&gt;Generate palindromes by combining digits properly. You might need more than one of the loops like below.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/* generate five digit palindrome: */&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/* only odd; evens aren't so prime */&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	    &lt;span class=&quot;n&quot;&gt;palindrome&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	    &lt;span class=&quot;c1&quot;&gt;//... deal with palindrome ...&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><summary type="html">The number 151 is a prime palindrome because it is both a prime number and a palindrome (it is the same number when read forward as backward). Write a program that finds all prime palindromes in the range of two supplied numbers a and b (5 &amp;lt;= a &amp;lt; b &amp;lt;= 100,000,000); both a and b are considered to be within the range .</summary></entry><entry><title type="html">Superprime Rib</title><link href="http://localhost:4000/usaco/2018/10/04/sprime.html" rel="alternate" type="text/html" title="Superprime Rib" /><published>2018-10-04T01:00:00+00:00</published><updated>2018-10-04T01:00:00+00:00</updated><id>http://localhost:4000/usaco/2018/10/04/sprime</id><content type="html" xml:base="http://localhost:4000/usaco/2018/10/04/sprime.html">&lt;p&gt;Butchering Farmer John’s cows always yields the best prime rib. You can tell prime ribs by looking at the digits lovingly stamped across them, one by one, by FJ and the USDA. Farmer John ensures that a purchaser of his prime ribs gets really prime ribs because when sliced from the right, the numbers on the ribs continue to stay prime right down to the last rib, e.g.:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;7  3  3  1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The set of ribs denoted by 7331 is prime; the three ribs 733 are prime; the two ribs 73 are prime, and, of course, the last rib, 7, is prime. The number 7331 is called a superprime of length 4.&lt;/p&gt;

&lt;p&gt;Write a program that accepts a number N 1 &amp;lt;=N&amp;lt;=8 of ribs and prints all the superprimes of that length.&lt;/p&gt;

&lt;p&gt;The number 1 (by itself) is not a prime number.&lt;/p&gt;

&lt;h3 id=&quot;program-name-sprime&quot;&gt;PROGRAM NAME: sprime&lt;/h3&gt;

&lt;h3 id=&quot;input-format&quot;&gt;INPUT FORMAT&lt;/h3&gt;

&lt;p&gt;A single line with the number N.&lt;/p&gt;

&lt;h3 id=&quot;sample-input-file-sprimein&quot;&gt;SAMPLE INPUT (file sprime.in)&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;output-format&quot;&gt;OUTPUT FORMAT&lt;/h3&gt;

&lt;p&gt;The superprime ribs of length N, printed in ascending order one per line.&lt;/p&gt;

&lt;h3 id=&quot;sample-output-file-sprimeout&quot;&gt;SAMPLE OUTPUT (file sprime.out)&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;2333
2339
2393
2399
2939
3119
3137
3733
3739
3793
3797
5939
7193
7331
7333
7393
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><summary type="html">Butchering Farmer John’s cows always yields the best prime rib. You can tell prime ribs by looking at the digits lovingly stamped across them, one by one, by FJ and the USDA. Farmer John ensures that a purchaser of his prime ribs gets really prime ribs because when sliced from the right, the numbers on the ribs continue to stay prime right down to the last rib, e.g.:</summary></entry><entry><title type="html">Number Triangles</title><link href="http://localhost:4000/usaco/2018/10/04/numtri.html" rel="alternate" type="text/html" title="Number Triangles" /><published>2018-10-04T00:00:00+00:00</published><updated>2018-10-04T00:00:00+00:00</updated><id>http://localhost:4000/usaco/2018/10/04/numtri</id><content type="html" xml:base="http://localhost:4000/usaco/2018/10/04/numtri.html">&lt;p&gt;Consider the number triangle shown below. Write a program that calculates the highest sum of numbers that can be passed on a route that starts at the top and ends somewhere on the base. Each step can go either diagonally down to the left or diagonally down to the right.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;        7

      3   8

    8   1   0

  2   7   4   4

4   5   2   6   5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the sample above, the route from 7 to 3 to 8 to 7 to 5 produces the highest sum: 30.&lt;/p&gt;

&lt;h3 id=&quot;program-name-numtri&quot;&gt;PROGRAM NAME: numtri&lt;/h3&gt;

&lt;h3 id=&quot;input-format&quot;&gt;INPUT FORMAT&lt;/h3&gt;

&lt;p&gt;The first line contains R (1 &amp;lt;= R &amp;lt;= 1000), the number of rows. Each subsequent line contains the integers for that particular row of the triangle. All the supplied integers are non-negative and no larger than 100.&lt;/p&gt;

&lt;h3 id=&quot;sample-input-file-numtriin&quot;&gt;SAMPLE INPUT (file numtri.in)&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;5
7
3 8
8 1 0
2 7 4 4
4 5 2 6 5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;output-format&quot;&gt;OUTPUT FORMAT&lt;/h3&gt;

&lt;p&gt;A single line containing the largest sum using the traversal specified.&lt;/p&gt;

&lt;h3 id=&quot;sample-output-file-numtriout&quot;&gt;SAMPLE OUTPUT (file numtri.out)&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;30
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><summary type="html">Consider the number triangle shown below. Write a program that calculates the highest sum of numbers that can be passed on a route that starts at the top and ends somewhere on the base. Each step can go either diagonally down to the left or diagonally down to the right.</summary></entry><entry><title type="html">Mother’s Milk</title><link href="http://localhost:4000/usaco/2018/10/03/milk3.html" rel="alternate" type="text/html" title="Mother's Milk" /><published>2018-10-03T00:00:00+00:00</published><updated>2018-10-03T00:00:00+00:00</updated><id>http://localhost:4000/usaco/2018/10/03/milk3</id><content type="html" xml:base="http://localhost:4000/usaco/2018/10/03/milk3.html">&lt;p&gt;Farmer John has three milking buckets of capacity A, B, and C liters. Each of the numbers A, B, and C is an integer from 1 through 20, inclusive. Initially, buckets A and B are empty while bucket C is full of milk. Sometimes, FJ pours milk from one bucket to another until the second bucket is filled or the first bucket is empty. Once begun, a pour must be completed, of course. Being thrifty, no milk may be tossed out.&lt;/p&gt;

&lt;p&gt;Write a program to help FJ determine what amounts of milk he can leave in bucket C when he begins with three buckets as above, pours milk among the buckets for a while, and then notes that bucket A is empty.&lt;/p&gt;

&lt;h3 id=&quot;program-name-milk3&quot;&gt;PROGRAM NAME: milk3&lt;/h3&gt;

&lt;h3 id=&quot;input-format&quot;&gt;INPUT FORMAT&lt;/h3&gt;

&lt;p&gt;A single line with the three integers A, B, and C.&lt;/p&gt;

&lt;h3 id=&quot;sample-input-file-milk3in&quot;&gt;SAMPLE INPUT (file milk3.in)&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;8 9 10
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;output-format&quot;&gt;OUTPUT FORMAT&lt;/h3&gt;

&lt;p&gt;A single line with a sorted list of all the possible amounts of milk that can be in bucket C when bucket A is empty.&lt;/p&gt;

&lt;h3 id=&quot;sample-output-file-milk3out&quot;&gt;SAMPLE OUTPUT (file milk3.out)&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1 2 8 9 10
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;sample-input-file-milk3in-1&quot;&gt;SAMPLE INPUT (file milk3.in)&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;2 5 10
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;sample-output-file-milk3out-1&quot;&gt;SAMPLE OUTPUT (file milk3.out)&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;5 6 7 8 9 10
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><summary type="html">Farmer John has three milking buckets of capacity A, B, and C liters. Each of the numbers A, B, and C is an integer from 1 through 20, inclusive. Initially, buckets A and B are empty while bucket C is full of milk. Sometimes, FJ pours milk from one bucket to another until the second bucket is filled or the first bucket is empty. Once begun, a pour must be completed, of course. Being thrifty, no milk may be tossed out.</summary></entry></feed>