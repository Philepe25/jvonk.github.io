<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator><link href="https://jvonk.github.io//feed.xml" rel="self" type="application/atom+xml" /><link href="https://jvonk.github.io//" rel="alternate" type="text/html" /><updated>2019-01-23T15:56:17-08:00</updated><id>https://jvonk.github.io//feed.xml</id><title type="html">Johan Vonk’s Website</title><subtitle>My personal static website created using Github Pages, Markdown, and Jekyll</subtitle><entry><title type="html">Shopping Offers</title><link href="https://jvonk.github.io//usaco/2019/01/14/game1.html" rel="alternate" type="text/html" title="Shopping Offers" /><published>2019-01-14T16:00:00-08:00</published><updated>2019-01-14T16:00:00-08:00</updated><id>https://jvonk.github.io//usaco/2019/01/14/game1</id><content type="html" xml:base="https://jvonk.github.io//usaco/2019/01/14/game1.html">&lt;p&gt;Consider the following two-player game played with a sequence of N positive integers (2 &amp;lt;= N &amp;lt;= 100) laid onto a 1 x N game board. Player 1 starts the game. The players move alternately by selecting a number from either the left or the right end of the gameboard. That number is then deleted from the board, and its value is added to the score of the player who selected it. A player wins if his sum is greater than his opponents.&lt;/p&gt;

&lt;p&gt;Write a program that implements the optimal strategy. The optimal strategy yields maximum points when playing against the “best possible” opponent. Your program must further implement an optimal strategy for player 2.&lt;/p&gt;

&lt;h3 id=&quot;program-name-game1&quot;&gt;PROGRAM NAME: game1&lt;/h3&gt;

&lt;h3 id=&quot;input-format&quot;&gt;INPUT FORMAT&lt;/h3&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Line 1:&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;N, the size of the board.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Line 2..etc:&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;N integers in the range (1..200) that are the contents of the game board, from left to right.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;sample-input-file-game1in&quot;&gt;SAMPLE INPUT (file game1.in)&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;6
4 7 2 9
5 2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;output-format&quot;&gt;OUTPUT FORMAT&lt;/h3&gt;

&lt;p&gt;Two space-separated integers on a line: the score of Player 1 followed by the score of Player 2.&lt;/p&gt;

&lt;h3 id=&quot;sample-output-file-game1out&quot;&gt;SAMPLE OUTPUT (file game1.out)&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;18 11
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><summary type="html">Consider the following two-player game played with a sequence of N positive integers (2 &amp;lt;= N &amp;lt;= 100) laid onto a 1 x N game board. Player 1 starts the game. The players move alternately by selecting a number from either the left or the right end of the gameboard. That number is then deleted from the board, and its value is added to the score of the player who selected it. A player wins if his sum is greater than his opponents.</summary></entry><entry><title type="html">Camelot</title><link href="https://jvonk.github.io//usaco/2019/01/12/camelot.html" rel="alternate" type="text/html" title="Camelot" /><published>2019-01-12T16:00:00-08:00</published><updated>2019-01-12T16:00:00-08:00</updated><id>https://jvonk.github.io//usaco/2019/01/12/camelot</id><content type="html" xml:base="https://jvonk.github.io//usaco/2019/01/12/camelot.html">&lt;p&gt;Centuries ago, King Arthur and the Knights of the Round Table used to meet every year on New Year’s Day to celebrate their fellowship. In remembrance of these events, we consider a board game for one player, on which one chesspiece king and several knight pieces are placed on squares, no two knights on the same square.&lt;/p&gt;

&lt;p&gt;This example board is the standard 8x8 array of squares:&lt;/p&gt;

&lt;p&gt;The King can move like a king in chess as long as it does not fall off the board:&lt;/p&gt;

&lt;p&gt;A Knight can jump like a knight in chess to ), as long as it does not fall off the board.&lt;/p&gt;

&lt;p&gt;During the play, the player can place more than one piece in the same square. The board squares are assumed big enough so that a piece is never an obstacle for any other piece to move freely.&lt;/p&gt;

&lt;p&gt;The player’s goal is to move the pieces so as to gather them all in the same square - in the minimal number of moves. To achieve this, he must move the pieces as prescribed above. Additionally, whenever the king and one or more knights are placed in the same square, the player may choose to move the king and one of the knights together from that point on, as a single knight, up to the final gathering point. Moving the knight together with the king counts as a single move.&lt;/p&gt;

&lt;p&gt;Write a program to compute the minimum number of moves the player must perform to produce the gathering. The pieces can gather on any square, of course.&lt;/p&gt;

&lt;h3 id=&quot;program-name-camelot&quot;&gt;PROGRAM NAME: camelot&lt;/h3&gt;

&lt;h3 id=&quot;input-format&quot;&gt;INPUT FORMAT&lt;/h3&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Line 1:&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Two space-separated integers: R,C, the number of rows and columns on the board. There will be no more than 26 columns and no more than 30 rows.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Line 2..end:&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;The input file contains a sequence of space-separated letter/digit pairs, 1 or more per line. The first pair represents the board position of the king; subsequent pairs represent positions of knights. There might be 0 knights or the knights might fill the board. Rows are numbered starting at 1; columns are specified as upper case characters starting with ‘A’.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;sample-input-file-camelotin&quot;&gt;SAMPLE INPUT (file camelot.in)&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;8 8
D 4
A 3 A 8
H 1 H 8
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The king is positioned at D4. There are four knights, positioned at A3, A8, H1, and H8.&lt;/p&gt;

&lt;h3 id=&quot;output-format&quot;&gt;OUTPUT FORMAT&lt;/h3&gt;

&lt;p&gt;A single line with the number of moves to aggregate the pieces.&lt;/p&gt;

&lt;h3 id=&quot;sample-output-file-camelotout&quot;&gt;SAMPLE OUTPUT (file camelot.out)&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;10
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;sample-output-elaboration&quot;&gt;SAMPLE OUTPUT ELABORATION&lt;/h3&gt;

&lt;p&gt;They gather at B5.
Knight 1: A3 - B5 (1 move)
Knight 2: A8 - C7 - B5 (2 moves)
Knight 3: H1 - G3 - F5 - D4 (picking up king) - B5 (4 moves)
Knight 4: H8 - F7 - D6 - B5 (3 moves)
1 + 2 + 4 + 3 = 10 moves.&lt;/p&gt;</content><author><name></name></author><summary type="html">Centuries ago, King Arthur and the Knights of the Round Table used to meet every year on New Year’s Day to celebrate their fellowship. In remembrance of these events, we consider a board game for one player, on which one chesspiece king and several knight pieces are placed on squares, no two knights on the same square.</summary></entry><entry><title type="html">Shopping Offers</title><link href="https://jvonk.github.io//usaco/2018/12/20/range.html" rel="alternate" type="text/html" title="Shopping Offers" /><published>2018-12-20T16:00:00-08:00</published><updated>2018-12-20T16:00:00-08:00</updated><id>https://jvonk.github.io//usaco/2018/12/20/range</id><content type="html" xml:base="https://jvonk.github.io//usaco/2018/12/20/range.html">&lt;p&gt;In a certain shop, each kind of product has an integer price. For example, the price of a flower is 2 zorkmids (z) and the price of a vase is 5z. In order to attract more customers, the shop introduces some special offers.&lt;/p&gt;

&lt;p&gt;A special offer consists of one or more product items together for a reduced price, also an integer. Examples:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;three flowers for 5z instead of 6z, or&lt;/li&gt;
  &lt;li&gt;two vases together with one flower for 10z instead of 12z.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Write a program that calculates the price a customer has to pay for a purchase, making optimal use of the special offers to make the price as low as possible. You are not allowed to add items, even if that would lower the price.&lt;/p&gt;

&lt;p&gt;For the prices and offers given above, the (lowest) price for three flowers and two vases is 14z: two vases and one flower for the reduced price of 10z and two flowers for the regular price of 4z.&lt;/p&gt;

&lt;h3 id=&quot;program-name-shopping&quot;&gt;PROGRAM NAME: shopping&lt;/h3&gt;

&lt;h3 id=&quot;input-format&quot;&gt;INPUT FORMAT&lt;/h3&gt;

&lt;p&gt;The input file has a set of offers followed by a purchase.&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Line 1:&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;s, the number of special offers, (0 &amp;lt;= s &amp;lt;= 99).&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Line 2..s+1:&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Each line describes an offer using several integers. The first integer is n (1 &amp;lt;= n &amp;lt;= 5), the number of products that are offered. The subsequent n pairs of integers c and k indicate that k items (1 &amp;lt;= k &amp;lt;= 5) with product code c (1 &amp;lt;= c &amp;lt;= 999) are part of the offer. The last number p on the line stands for the reduced price (1 &amp;lt;= p &amp;lt;= 9999). The reduced price of an offer is less than the sum of the regular prices.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Line s+2:&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;The first line contains the number b (0 &amp;lt;= b &amp;lt;= 5) of different kinds of products to be purchased.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Line s+3..s+b+2:&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Each of the subsequent b lines contains three values: c, k, and p. The value c is the (unique) product code (1 &amp;lt;= c &amp;lt;= 999). The value k indicates how many items of this product are to be purchased (1 &amp;lt;= k &amp;lt;= 5). The value p is the regular price per item (1 &amp;lt;= p &amp;lt;= 999). At most 5*5=25 items can be in the basket.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;sample-input-file-shoppingin&quot;&gt;SAMPLE INPUT (file shopping.in)&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;2 1 7 3 5 2 7 1 8 2 10 2 7 3 2 8 2 5&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;output-format&quot;&gt;OUTPUT FORMAT&lt;/h3&gt;

&lt;p&gt;A single line with one integer: the lowest possible price to be paid for the purchases.&lt;/p&gt;

&lt;h3 id=&quot;sample-output-file-shoppingout&quot;&gt;SAMPLE OUTPUT (file shopping.out)&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;14&lt;/code&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">In a certain shop, each kind of product has an integer price. For example, the price of a flower is 2 zorkmids (z) and the price of a vase is 5z. In order to attract more customers, the shop introduces some special offers.</summary></entry><entry><title type="html">Shopping Offers</title><link href="https://jvonk.github.io//usaco/2018/12/20/shopping.html" rel="alternate" type="text/html" title="Shopping Offers" /><published>2018-12-20T16:00:00-08:00</published><updated>2018-12-20T16:00:00-08:00</updated><id>https://jvonk.github.io//usaco/2018/12/20/shopping</id><content type="html" xml:base="https://jvonk.github.io//usaco/2018/12/20/shopping.html">&lt;p&gt;In a certain shop, each kind of product has an integer price. For example, the price of a flower is 2 zorkmids (z) and the price of a vase is 5z. In order to attract more customers, the shop introduces some special offers.&lt;/p&gt;

&lt;p&gt;A special offer consists of one or more product items together for a reduced price, also an integer. Examples:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;three flowers for 5z instead of 6z, or&lt;/li&gt;
  &lt;li&gt;two vases together with one flower for 10z instead of 12z.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Write a program that calculates the price a customer has to pay for a purchase, making optimal use of the special offers to make the price as low as possible. You are not allowed to add items, even if that would lower the price.&lt;/p&gt;

&lt;p&gt;For the prices and offers given above, the (lowest) price for three flowers and two vases is 14z: two vases and one flower for the reduced price of 10z and two flowers for the regular price of 4z.&lt;/p&gt;

&lt;h3 id=&quot;program-name-shopping&quot;&gt;PROGRAM NAME: shopping&lt;/h3&gt;

&lt;h3 id=&quot;input-format&quot;&gt;INPUT FORMAT&lt;/h3&gt;

&lt;p&gt;The input file has a set of offers followed by a purchase.&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Line 1:&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;s, the number of special offers, (0 &amp;lt;= s &amp;lt;= 99).&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Line 2..s+1:&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Each line describes an offer using several integers. The first integer is n (1 &amp;lt;= n &amp;lt;= 5), the number of products that are offered. The subsequent n pairs of integers c and k indicate that k items (1 &amp;lt;= k &amp;lt;= 5) with product code c (1 &amp;lt;= c &amp;lt;= 999) are part of the offer. The last number p on the line stands for the reduced price (1 &amp;lt;= p &amp;lt;= 9999). The reduced price of an offer is less than the sum of the regular prices.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Line s+2:&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;The first line contains the number b (0 &amp;lt;= b &amp;lt;= 5) of different kinds of products to be purchased.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Line s+3..s+b+2:&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Each of the subsequent b lines contains three values: c, k, and p. The value c is the (unique) product code (1 &amp;lt;= c &amp;lt;= 999). The value k indicates how many items of this product are to be purchased (1 &amp;lt;= k &amp;lt;= 5). The value p is the regular price per item (1 &amp;lt;= p &amp;lt;= 999). At most 5*5=25 items can be in the basket.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;sample-input-file-shoppingin&quot;&gt;SAMPLE INPUT (file shopping.in)&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;2 1 7 3 5 2 7 1 8 2 10 2 7 3 2 8 2 5&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;output-format&quot;&gt;OUTPUT FORMAT&lt;/h3&gt;

&lt;p&gt;A single line with one integer: the lowest possible price to be paid for the purchases.&lt;/p&gt;

&lt;h3 id=&quot;sample-output-file-shoppingout&quot;&gt;SAMPLE OUTPUT (file shopping.out)&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;14&lt;/code&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">In a certain shop, each kind of product has an integer price. For example, the price of a flower is 2 zorkmids (z) and the price of a vase is 5z. In order to attract more customers, the shop introduces some special offers.</summary></entry><entry><title type="html">Riding the Fences</title><link href="https://jvonk.github.io//usaco/2018/12/12/fence.html" rel="alternate" type="text/html" title="Riding the Fences" /><published>2018-12-12T16:00:00-08:00</published><updated>2018-12-12T16:00:00-08:00</updated><id>https://jvonk.github.io//usaco/2018/12/12/fence</id><content type="html" xml:base="https://jvonk.github.io//usaco/2018/12/12/fence.html">&lt;p&gt;Farmer John owns a large number of fences that must be repaired annually. He traverses the fences by riding a horse along each and every one of them (and nowhere else) and fixing the broken parts.&lt;/p&gt;

&lt;p&gt;Farmer John is as lazy as the next farmer and hates to ride the same fence twice. Your program must read in a description of a network of fences and tell Farmer John a path to traverse each fence length exactly once, if possible. Farmer J can, if he wishes, start and finish at any fence intersection.&lt;/p&gt;

&lt;p&gt;Every fence connects two fence intersections, which are numbered inclusively from 1 through 500 (though some farms have far fewer than 500 intersections). Any number of fences (&amp;gt;=1) can meet at a fence intersection. It is always possible to ride from any fence to any other fence (i.e., all fences are “connected”).&lt;/p&gt;

&lt;p&gt;Your program must output the path of intersections that, if interpreted as a base 500 number, would have the smallest magnitude.&lt;/p&gt;

&lt;p&gt;There will always be at least one solution for each set of input data supplied to your program for testing.&lt;/p&gt;

&lt;h3 id=&quot;program-name-fence&quot;&gt;PROGRAM NAME: fence&lt;/h3&gt;

&lt;h3 id=&quot;input-format&quot;&gt;INPUT FORMAT&lt;/h3&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Line 1:&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;The number of fences, F (1 &amp;lt;= F &amp;lt;= 1024)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Line 2..F+1:&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;A pair of integers (1 &amp;lt;= i,j &amp;lt;= 500) that tell which pair of intersections this fence connects.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;sample-input-file-fencein&quot;&gt;SAMPLE INPUT (file fence.in)&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;9
1 2
2 3
3 4
4 2
4 5
2 5
5 6
5 7
4 6
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;output-format&quot;&gt;OUTPUT FORMAT&lt;/h3&gt;

&lt;p&gt;The output consists of F+1 lines, each containing a single integer. Print the number of the starting intersection on the first line, the next intersection’s number on the next line, and so on, until the final intersection on the last line. There might be many possible answers to any given input set, but only one is ordered correctly.&lt;/p&gt;

&lt;h3 id=&quot;sample-output-file-fenceout&quot;&gt;SAMPLE OUTPUT (file fence.out)&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1
2
3
4
2
5
4
6
5
7
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><summary type="html">Farmer John owns a large number of fences that must be repaired annually. He traverses the fences by riding a horse along each and every one of them (and nowhere else) and fixing the broken parts.</summary></entry><entry><title type="html">Magic Squares</title><link href="https://jvonk.github.io//usaco/2018/12/11/msquare.html" rel="alternate" type="text/html" title="Magic Squares" /><published>2018-12-11T17:00:00-08:00</published><updated>2018-12-11T17:00:00-08:00</updated><id>https://jvonk.github.io//usaco/2018/12/11/msquare</id><content type="html" xml:base="https://jvonk.github.io//usaco/2018/12/11/msquare.html">&lt;p&gt;Following the success of the magic cube, Mr. Rubik invented its planar version, called magic squares. This is a sheet composed of 8 equal-sized squares:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1234
8765
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this task we consider the version where each square has a different color. Colors are denoted by the first 8 positive integers. A sheet configuration is given by the sequence of colors obtained by reading the colors of the squares starting at the upper left corner and going in clockwise direction. For instance, the configuration of &lt;em&gt;Figure 3&lt;/em&gt; is given by the sequence (1,2,3,4,5,6,7,8). This configuration is the initial configuration.&lt;/p&gt;

&lt;p&gt;Three basic transformations, identified by the letters `A’, `B’ and `C’, can be applied to a sheet:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;‘A’: exchange the top and bottom row,&lt;/li&gt;
  &lt;li&gt;‘B’: single right circular shifting of the rectangle,&lt;/li&gt;
  &lt;li&gt;‘C’: single clockwise rotation of the middle four squares.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Below is a demonstration of applying the transformations to the initial squares given above:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;8765
1234
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;B:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;4123
5876
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;C:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1724
8635
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;All possible configurations are available using the three basic transformations.&lt;/p&gt;

&lt;p&gt;You are to write a program that computes a minimal sequence of basic transformations that transforms the initial configuration above to a specific target configuration.&lt;/p&gt;

&lt;h3 id=&quot;program-name-msquare&quot;&gt;PROGRAM NAME: msquare&lt;/h3&gt;

&lt;h3 id=&quot;input-format&quot;&gt;INPUT FORMAT&lt;/h3&gt;

&lt;p&gt;A single line with eight space-separated integers (a permutation of {1..8}) that are the target configuration.&lt;/p&gt;

&lt;h3 id=&quot;sample-input-file-msquarein&quot;&gt;SAMPLE INPUT (file msquare.in)&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;2 6 8 4 5 7 3 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;output-format&quot;&gt;OUTPUT FORMAT&lt;/h3&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Line 1:&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;A single integer that is the length of the shortest transformation sequence.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Line 2:&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;The lexically earliest string of transformations expressed as a string of characters, 60 per line except possibly the last line.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;sample-output-file-msquareout&quot;&gt;SAMPLE OUTPUT (file msquare.out)&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;7
BCABCCB
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><summary type="html">Following the success of the magic cube, Mr. Rubik invented its planar version, called magic squares. This is a sheet composed of 8 equal-sized squares:</summary></entry><entry><title type="html">Magic Squares</title><link href="https://jvonk.github.io//usaco/2018/12/11/butter.html" rel="alternate" type="text/html" title="Magic Squares" /><published>2018-12-11T16:00:00-08:00</published><updated>2018-12-11T16:00:00-08:00</updated><id>https://jvonk.github.io//usaco/2018/12/11/butter</id><content type="html" xml:base="https://jvonk.github.io//usaco/2018/12/11/butter.html">&lt;p&gt;Farmer John has discovered the secret to making the sweetest butter in all of Wisconsin: sugar. By placing a sugar cube out in the pastures, he knows the N (1 &amp;lt;= N &amp;lt;= 500) cows will lick it and thus will produce super-sweet butter which can be marketed at better prices. Of course, he spends the extra money on luxuries for the cows.&lt;/p&gt;

&lt;p&gt;FJ is a sly farmer. Like Pavlov of old, he knows he can train the cows to go to a certain pasture when they hear a bell. He intends to put the sugar there and then ring the bell in the middle of the afternoon so that the evening’s milking produces perfect milk.&lt;/p&gt;

&lt;p&gt;FJ knows each cow spends her time in a given pasture (not necessarily alone). Given the pasture location of the cows and a description of the paths that connect the pastures, find the pasture in which to place the sugar cube so that the total distance walked by the cows when FJ rings the bell is minimized. FJ knows the fields are connected well enough that some solution is always possible.&lt;/p&gt;

&lt;h3 id=&quot;program-name-butter&quot;&gt;PROGRAM NAME: butter&lt;/h3&gt;

&lt;h3 id=&quot;input-format&quot;&gt;INPUT FORMAT&lt;/h3&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Line 1:&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Three space-separated integers: N, the number of pastures: P (2 &amp;lt;= P &amp;lt;= 800), and the number of connecting paths: C (1 &amp;lt;= C &amp;lt;= 1,450). Cows are uniquely numbered 1..N. Pastures are uniquely numbered 1..P.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Lines 2..N+1:&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Each line contains a single integer that is the pasture number in which a cow is grazing. Cow i’s pasture is listed on line i+1.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Lines N+2..N+C+1&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Each line contains three space-separated integers that describe a single path that connects a pair of pastures and its length. Paths may be traversed in either direction. No pair of pastures is directly connected by more than one path. The first two integers are in the range 1..P; the third integer is in the range (1..225).&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;sample-input-file-butterin&quot;&gt;SAMPLE INPUT (file butter.in)&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;3 4 5
2
3
4
1 2 1
1 3 5
2 3 7
2 4 3
3 4 5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;input-details&quot;&gt;INPUT DETAILS&lt;/h3&gt;

&lt;p&gt;This diagram shows the connections geometrically:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;         P2  
P1 @--1--@ C1
    \    |\
     \   | \
      5  7  3
       \ |   \
        \|    \ C3
      C2 @--5--@
        P3    P4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;output-format&quot;&gt;OUTPUT FORMAT&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Line 1: A single integer that is the minimum distance the cows must walk to a pasture with a sugar cube.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;sample-output-file-butterout&quot;&gt;SAMPLE OUTPUT (file butter.out)&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;8
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;OUTPUT DETAILS:&lt;/p&gt;

&lt;p&gt;Putting the cube in pasture 4 means: cow 1 walks 3 units; cow 2 walks 5
units; cow 3 walks 0 units – a total of 8.&lt;/p&gt;</content><author><name></name></author><summary type="html">Farmer John has discovered the secret to making the sweetest butter in all of Wisconsin: sugar. By placing a sugar cube out in the pastures, he knows the N (1 &amp;lt;= N &amp;lt;= 500) cows will lick it and thus will produce super-sweet butter which can be marketed at better prices. Of course, he spends the extra money on luxuries for the cows.</summary></entry><entry><title type="html">Overview</title><link href="https://jvonk.github.io//portfolio/2018/11/23/overview.html" rel="alternate" type="text/html" title="Overview" /><published>2018-11-23T16:00:00-08:00</published><updated>2018-11-23T16:00:00-08:00</updated><id>https://jvonk.github.io//portfolio/2018/11/23/overview</id><content type="html" xml:base="https://jvonk.github.io//portfolio/2018/11/23/overview.html">&lt;video controls=&quot;&quot;&gt;&lt;source src=&quot;https://coertvonk.com/wp-content/shield/a0f6-579d/8dadafd0a2a5752d825a90a18ec8f434.mp4&quot; type=&quot;video/mp4&quot;&gt;&lt;/video&gt;</content><author><name></name></author><summary type="html"></summary></entry><entry><title type="html">Spinning Wheels</title><link href="https://jvonk.github.io//usaco/2018/11/15/spin.html" rel="alternate" type="text/html" title="Spinning Wheels" /><published>2018-11-15T16:00:00-08:00</published><updated>2018-11-15T16:00:00-08:00</updated><id>https://jvonk.github.io//usaco/2018/11/15/spin</id><content type="html" xml:base="https://jvonk.github.io//usaco/2018/11/15/spin.html">&lt;p&gt;Each of five opaque spinning wheels has one or more wedges cut out of its edges. These wedges must be aligned quickly and correctly. Each wheel also has an alignment mark (at 0 degrees) so that the wheels can all be started in a known position. Wheels rotate in the `plus degrees’ direction, so that shortly after they start, they pass through 1 degree, 2 degrees, etc. (though probably not at the same time).&lt;/p&gt;

&lt;p&gt;This is an integer problem. Wheels are never actually at 1.5 degrees or 23.51234123 degrees. For example, the wheels are considered to move instantaneously from 20 to 25 degrees during a single second or even from 30 to 40 degrees if the wheel is spinning quickly.&lt;/p&gt;

&lt;p&gt;All angles in this problem are presumed to be integers in the range 0 &amp;lt;= angle &amp;lt;= 359. The angle of 0 degrees follows the angle of 359 degrees. Each wheel rotates at a certain integer number of degrees per second, 1 &amp;lt;= speed &amp;lt;= 180.&lt;/p&gt;

&lt;p&gt;Wedges for each wheel are specified by an integer start angle and integer angle size (or `extent’), both specified in degrees. Wedges in the test data will be separated by at least one degree. The ‘extent’ also includes the original “degree” of the wedge, so ‘0 180’ means degrees 0..180 inclusive – one more than most would imagine.&lt;/p&gt;

&lt;p&gt;At the start, which is time 0, all the wheels’ alignment marks line up. Your program must determine the earliest time (integer seconds) at or after the start that some wedge on each wheel will align with the wedges on the other wheel so that a light beam can pass through openings on all five wedges. The wedges can align at any part of the rotation.&lt;/p&gt;

&lt;h3 id=&quot;program-name-spin&quot;&gt;PROGRAM NAME: spin&lt;/h3&gt;

&lt;h3 id=&quot;input-format&quot;&gt;INPUT FORMAT&lt;/h3&gt;

&lt;p&gt;Each of five input lines describes a wheel.&lt;/p&gt;

&lt;p&gt;The first integer on an input line is the wheel’s rotation speed. The next integer is the number of wedges, 1 &amp;lt;= W &amp;lt;= 5. The next W pairs of integers tell each wedge’s start angle and extent.&lt;/p&gt;

&lt;h3 id=&quot;sample-input-file-spinin&quot;&gt;SAMPLE INPUT (file spin.in)&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;30 1 0 120
50 1 150 90
60 1 60 90
70 1 180 180
90 1 180 60
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;output-format&quot;&gt;OUTPUT FORMAT&lt;/h3&gt;

&lt;p&gt;A single line with a single integer that is the first time the wedges align so a light beam can pass through them. Print `none’ (lower case, no quotes) if the wedges will never align properly.&lt;/p&gt;

&lt;h3 id=&quot;sample-output-file-spinout&quot;&gt;SAMPLE OUTPUT (file spin.out)&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;9
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><summary type="html">Each of five opaque spinning wheels has one or more wedges cut out of its edges. These wedges must be aligned quickly and correctly. Each wheel also has an alignment mark (at 0 degrees) so that the wheels can all be started in a known position. Wheels rotate in the `plus degrees’ direction, so that shortly after they start, they pass through 1 degree, 2 degrees, etc. (though probably not at the same time).</summary></entry><entry><title type="html">Feed Ratios</title><link href="https://jvonk.github.io//usaco/2018/11/14/ratios.html" rel="alternate" type="text/html" title="Feed Ratios" /><published>2018-11-14T16:00:00-08:00</published><updated>2018-11-14T16:00:00-08:00</updated><id>https://jvonk.github.io//usaco/2018/11/14/ratios</id><content type="html" xml:base="https://jvonk.github.io//usaco/2018/11/14/ratios.html">&lt;p&gt;Farmer John feeds his cows only the finest mixture of cow food, which has three components: Barley, Oats, and Wheat. While he knows the precise mixture of these easily mixable grains, he can not buy that mixture! He buys three other mixtures of the three grains and then combines them to form the perfect mixture.&lt;/p&gt;

&lt;p&gt;Given a set of integer ratios barley:oats:wheat, find a way to combine them IN INTEGER MULTIPLES to form a mix with some goal ratio x:y:z.&lt;/p&gt;

&lt;p&gt;For example, given the goal 3:4:5 and the ratios of three mixtures:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1:2:3
3:7:1
2:1:2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;your program should find some minimum number of integer units (the `mixture’) of the first, second, and third mixture that should be mixed together to achieve the goal ratio or print `NONE’. `Minimum number’ means the sum of the three non-negative mixture integers is minimized.&lt;/p&gt;

&lt;p&gt;For this example, you can combine eight units of mixture 1, one unit of mixture 2, and five units of mixture 3 to get seven units of the goal ratio:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;8*(1:2:3) + 1*(3:7:1) + 5*(2:1:2) = (21:28:35) = 7*(3:4:5)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Integers in the goal ratio and mixture ratios are all non-negative and smaller than 100 in magnitude. The number of units of each type of feed in the mixture must be less than 100. The mixture ratios are not linear combinations of each other.&lt;/p&gt;

&lt;h3 id=&quot;program-name-ratios&quot;&gt;PROGRAM NAME: ratios&lt;/h3&gt;

&lt;h3 id=&quot;input-format&quot;&gt;INPUT FORMAT&lt;/h3&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Line 1:&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Three space separated integers that represent the goal ratios&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Line 2..4:&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Each contain three space separated integers that represent the ratios of the three mixtures purchased.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;sample-input-file-ratiosin&quot;&gt;SAMPLE INPUT (file ratios.in)&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;3 4 5
1 2 3
3 7 1
2 1 2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;output-format&quot;&gt;OUTPUT FORMAT&lt;/h3&gt;

&lt;p&gt;The output file should contain one line containing four integers or the word `NONE’. The first three integers should represent the number of units of each mixture to use to obtain the goal ratio. The fourth number should be the multiple of the goal ratio obtained by mixing the initial feed using the first three integers as mixing ratios.&lt;/p&gt;

&lt;h3 id=&quot;sample-output-file-ratiosout&quot;&gt;SAMPLE OUTPUT (file ratios.out)&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;8 1 5 7
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><summary type="html">Farmer John feeds his cows only the finest mixture of cow food, which has three components: Barley, Oats, and Wheat. While he knows the precise mixture of these easily mixable grains, he can not buy that mixture! He buys three other mixtures of the three grains and then combines them to form the perfect mixture.</summary></entry></feed>