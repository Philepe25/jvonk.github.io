<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator><link href="https://matterdark.github.io//feed.xml" rel="self" type="application/atom+xml" /><link href="https://matterdark.github.io//" rel="alternate" type="text/html" /><updated>2018-11-29T20:54:21+00:00</updated><id>https://matterdark.github.io//feed.xml</id><title type="html">Johan Vonk’s Website</title><subtitle>My personal static website created using Github Pages, Markdown, and Jekyll</subtitle><entry><title type="html">Overview</title><link href="https://matterdark.github.io//portfolio/2018/11/24/overview.html" rel="alternate" type="text/html" title="Overview" /><published>2018-11-24T00:00:00+00:00</published><updated>2018-11-24T00:00:00+00:00</updated><id>https://matterdark.github.io//portfolio/2018/11/24/overview</id><content type="html" xml:base="https://matterdark.github.io//portfolio/2018/11/24/overview.html">&lt;video controls=&quot;&quot;&gt;&lt;source src=&quot;https://coertvonk.com/wp-content/shield/a0f6-579d/8dadafd0a2a5752d825a90a18ec8f434.mp4&quot; type=&quot;video/mp4&quot;&gt;&lt;/video&gt;</content><author><name></name></author><summary type="html"></summary></entry><entry><title type="html">Controlling Companies</title><link href="https://matterdark.github.io//usaco/2018/10/18/concom.html" rel="alternate" type="text/html" title="Controlling Companies" /><published>2018-10-18T01:00:00+00:00</published><updated>2018-10-18T01:00:00+00:00</updated><id>https://matterdark.github.io//usaco/2018/10/18/concom</id><content type="html" xml:base="https://matterdark.github.io//usaco/2018/10/18/concom.html">&lt;p&gt;Some companies are partial owners of other companies because they have acquired part of their total shares of stock. For example, Ford at one point owned 12% of Mazda. It is said that a company A controls company B if at least one of the following conditions is satisfied:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Company A = Company B&lt;/li&gt;
  &lt;li&gt;Company A owns more than 50% of Company B&lt;/li&gt;
  &lt;li&gt;Company A controls K (K &amp;gt;= 1) companies denoted C1, …, CK with each company Ci owning xi% of company B and x1 + …. + xK &amp;gt; 50%.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Given a list of triples (i,j,p) which denote company i owning p% of company j, calculate all the pairs (h,s) in which company h controls company s. There are at most 100 companies.&lt;/p&gt;

&lt;p&gt;Write a program to read the list of triples (i,j,p) where i, j and p are positive integers all in the range (1..100) and find all the pairs (h,s) so that company h controls company s.&lt;/p&gt;

&lt;h3 id=&quot;program-name-concom&quot;&gt;PROGRAM NAME: concom&lt;/h3&gt;

&lt;h3 id=&quot;input-format&quot;&gt;INPUT FORMAT&lt;/h3&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Line 1:&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;N, the number of input triples to follow&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Line 2..n+1:&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Three integers per line as a triple (i,j,p) described above.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;sample-input-file-concomin&quot;&gt;SAMPLE INPUT (file concom.in)&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;3
1 2 80
2 3 80
3 1 20
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;output-format&quot;&gt;OUTPUT FORMAT&lt;/h3&gt;

&lt;p&gt;List 0 or more companies that control other companies. Each line contains two integers that denote that the company whose number is the first integer controls the company whose number is the second integer. Order the lines in ascending order of the first integer (and ascending order of the second integer to break ties). Do not print that a company controls itself.&lt;/p&gt;

&lt;h3 id=&quot;sample-output-file-concomout&quot;&gt;SAMPLE OUTPUT (file concom.out)&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1 2
1 3
2 3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><summary type="html">Some companies are partial owners of other companies because they have acquired part of their total shares of stock. For example, Ford at one point owned 12% of Mazda. It is said that a company A controls company B if at least one of the following conditions is satisfied:</summary></entry><entry><title type="html">Money Systems</title><link href="https://matterdark.github.io//usaco/2018/10/18/money.html" rel="alternate" type="text/html" title="Money Systems" /><published>2018-10-18T00:00:00+00:00</published><updated>2018-10-18T00:00:00+00:00</updated><id>https://matterdark.github.io//usaco/2018/10/18/money</id><content type="html" xml:base="https://matterdark.github.io//usaco/2018/10/18/money.html">&lt;p&gt;The cows have not only created their own government but they have chosen to create their own money system. In their own rebellious way, they are curious about values of coinage. Traditionally, coins come in values like 1, 5, 10, 20 or 25, 50, and 100 units, sometimes with a 2 unit coin thrown in for good measure.&lt;/p&gt;

&lt;p&gt;The cows want to know how many different ways it is possible to dispense a certain amount of money using various coin systems. For instance, using a system of {1, 2, 5, 10, …} it is possible to create 18 units several different ways, including: 18x1, 9x2, 8x2+2x1, 3x5+2+1, and many others.&lt;/p&gt;

&lt;p&gt;Write a program to compute how many ways to construct a given amount of money using supplied coinage. It is guaranteed that the total will fit into both a signed long long (C/C++) and Int64 (Free Pascal).&lt;/p&gt;

&lt;h3 id=&quot;program-name-money&quot;&gt;PROGRAM NAME: money&lt;/h3&gt;

&lt;h3 id=&quot;input-format&quot;&gt;INPUT FORMAT&lt;/h3&gt;

&lt;p&gt;The number of coins in the system is V (1 &amp;lt;= V &amp;lt;= 25).&lt;/p&gt;

&lt;p&gt;The amount money to construct is N (1 &amp;lt;= N &amp;lt;= 10,000).&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Line 1:&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Two integers, V and N&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Lines 2..:&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;V integers that represent the available coins (no particular number of integers per line)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;sample-input-file-moneyin&quot;&gt;SAMPLE INPUT (file money.in)&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;3 10
1 2 5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;output-format&quot;&gt;OUTPUT FORMAT&lt;/h3&gt;

&lt;p&gt;A single line containing the total number of ways to construct N money units using V coins.&lt;/p&gt;

&lt;h3 id=&quot;sample-output-file-moneyout&quot;&gt;SAMPLE OUTPUT (file money.out)&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;10
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><summary type="html">The cows have not only created their own government but they have chosen to create their own money system. In their own rebellious way, they are curious about values of coinage. Traditionally, coins come in values like 1, 5, 10, 20 or 25, 50, and 100 units, sometimes with a 2 unit coin thrown in for good measure.</summary></entry><entry><title type="html">Zero Sum</title><link href="https://matterdark.github.io//usaco/2018/10/16/zerosum.html" rel="alternate" type="text/html" title="Zero Sum" /><published>2018-10-16T02:00:00+00:00</published><updated>2018-10-16T02:00:00+00:00</updated><id>https://matterdark.github.io//usaco/2018/10/16/zerosum</id><content type="html" xml:base="https://matterdark.github.io//usaco/2018/10/16/zerosum.html">&lt;p&gt;Consider the sequence of digits from 1 through N (where N=9) in increasing order: 1 2 3 … N.&lt;/p&gt;

&lt;p&gt;Now insert either a `+’ for addition or a `-‘ for subtraction or a ` ‘ [blank] to run the digits together between each pair of digits (not in front of the first digit). Calculate the result that of the expression and see if you get zero.&lt;/p&gt;

&lt;p&gt;Write a program that will find all sequences of length N that produce a zero sum.&lt;/p&gt;

&lt;h3 id=&quot;program-name-zerosum&quot;&gt;PROGRAM NAME: zerosum&lt;/h3&gt;

&lt;h3 id=&quot;input-format&quot;&gt;INPUT FORMAT&lt;/h3&gt;

&lt;p&gt;A single line with the integer N (3 &amp;lt;= N &amp;lt;= 9).&lt;/p&gt;

&lt;h3 id=&quot;sample-input-file-zerosumin&quot;&gt;SAMPLE INPUT (file zerosum.in)&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;7
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;output-format&quot;&gt;OUTPUT FORMAT&lt;/h3&gt;

&lt;p&gt;In ASCII order, show each sequence that can create 0 sum with a `+’, `-‘, or ` ‘ between each pair of numbers.&lt;/p&gt;

&lt;h3 id=&quot;sample-output-file-zerosumout&quot;&gt;SAMPLE OUTPUT (file zerosum.out)&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1+2-3+4-5-6+7
1+2-3-4+5+6-7
1-2 3+4+5+6+7
1-2 3-4 5+6 7
1-2+3+4-5+6-7
1-2-3-4-5+6+7
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><summary type="html">Consider the sequence of digits from 1 through N (where N=9) in increasing order: 1 2 3 … N.</summary></entry><entry><title type="html">Cow Pedigrees</title><link href="https://matterdark.github.io//usaco/2018/10/16/nocows.html" rel="alternate" type="text/html" title="Cow Pedigrees" /><published>2018-10-16T01:00:00+00:00</published><updated>2018-10-16T01:00:00+00:00</updated><id>https://matterdark.github.io//usaco/2018/10/16/nocows</id><content type="html" xml:base="https://matterdark.github.io//usaco/2018/10/16/nocows.html">&lt;p&gt;Farmer John is considering purchasing a new herd of cows. In this new herd, each mother cow gives birth to two children. The relationships among the cows can easily be represented by one or more binary trees with a total of N (3 &amp;lt;= N &amp;lt; 200) nodes. The trees have these properties:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The degree of each node is 0 or 2. The degree is the count of the node’s immediate children.&lt;/li&gt;
  &lt;li&gt;The height of the tree is equal to K (1 &amp;lt; K &amp;lt; 100). The height is the number of nodes on the longest path from the root to any leaf; a leaf is a node with no children.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;How many different possible pedigree structures are there? A pedigree is different if its tree structure differs from that of another pedigree. Output the remainder when the total number of different possible pedigrees is divided by 9901.&lt;/p&gt;

&lt;h3 id=&quot;program-name-nocows&quot;&gt;PROGRAM NAME: nocows&lt;/h3&gt;

&lt;h3 id=&quot;input-format&quot;&gt;INPUT FORMAT&lt;/h3&gt;

&lt;p&gt;Line 1: Two space-separated integers, N and K.&lt;/p&gt;

&lt;h3 id=&quot;sample-input-file-nocowsin&quot;&gt;SAMPLE INPUT (file nocows.in)&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;5 3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;output-format&quot;&gt;OUTPUT FORMAT&lt;/h3&gt;

&lt;p&gt;Line 1: One single integer number representing the number of possible pedigrees MODULO 9901.&lt;/p&gt;

&lt;h3 id=&quot;sample-output-file-nocowsout&quot;&gt;SAMPLE OUTPUT (file nocows.out)&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;output-details&quot;&gt;OUTPUT DETAILS&lt;/h3&gt;

&lt;p&gt;Two possible pedigrees have 5 nodes and height equal to 3:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    @                   @      
   / \                 / \
  @   @      and      @   @
 / \                     / \
@   @                   @   @
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><summary type="html">Farmer John is considering purchasing a new herd of cows. In this new herd, each mother cow gives birth to two children. The relationships among the cows can easily be represented by one or more binary trees with a total of N (3 &amp;lt;= N &amp;lt; 200) nodes. The trees have these properties:</summary></entry><entry><title type="html">Longest Prefix</title><link href="https://matterdark.github.io//usaco/2018/10/16/prefix.html" rel="alternate" type="text/html" title="Longest Prefix" /><published>2018-10-16T00:00:00+00:00</published><updated>2018-10-16T00:00:00+00:00</updated><id>https://matterdark.github.io//usaco/2018/10/16/prefix</id><content type="html" xml:base="https://matterdark.github.io//usaco/2018/10/16/prefix.html">&lt;p&gt;The structure of some biological objects is represented by the sequence of their constituents, where each part is denoted by an uppercase letter. Biologists are interested in decomposing a long sequence into shorter sequences called &lt;em&gt;primitives&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;We say that a sequence &lt;strong&gt;S&lt;/strong&gt; can be composed from a given set of primitives &lt;strong&gt;P&lt;/strong&gt; if there is a some sequence of (possibly repeated) primitives from the set whose concatenation equals S. Not necessarily all primitives need be present. For instance the sequence ABABACABAAB can be composed from the set of primitives&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{A, AB, BA, CA, BBC}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The first K characters of S are the &lt;em&gt;prefix of S with length K&lt;/em&gt;. Write a program which accepts as input a set of primitives and a sequence of constituents and then computes the length of the longest prefix that can be composed from primitives.&lt;/p&gt;

&lt;h3 id=&quot;program-name-prefix&quot;&gt;PROGRAM NAME: prefix&lt;/h3&gt;

&lt;h3 id=&quot;input-format&quot;&gt;INPUT FORMAT&lt;/h3&gt;

&lt;p&gt;First, the input file contains the list (length 1..200) of primitives (length 1..10) expressed as a series of space-separated strings of upper-case characters on one or more lines. The list of primitives is terminated by a line that contains nothing more than a period (‘.’). No primitive appears twice in the list. Then, the input file contains a sequence S (length 1..200,000) expressed as one or more lines, none of which exceeds 76 letters in length. The “newlines” (line terminators) are not part of the string S.&lt;/p&gt;

&lt;h3 id=&quot;sample-input-file-prefixin&quot;&gt;SAMPLE INPUT (file prefix.in)&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;A AB BA CA BBC
.
ABABACABAABC
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;output-format&quot;&gt;OUTPUT FORMAT&lt;/h3&gt;

&lt;p&gt;A single line containing an integer that is the length of the longest prefix that can be composed from the set P.&lt;/p&gt;

&lt;h3 id=&quot;sample-output-file-prefixout&quot;&gt;SAMPLE OUTPUT (file prefix.out)&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;11
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><summary type="html">The structure of some biological objects is represented by the sequence of their constituents, where each part is denoted by an uppercase letter. Biologists are interested in decomposing a long sequence into shorter sequences called primitives.</summary></entry><entry><title type="html">Party Lamps</title><link href="https://matterdark.github.io//usaco/2018/10/13/lamps.html" rel="alternate" type="text/html" title="Party Lamps" /><published>2018-10-13T01:00:00+00:00</published><updated>2018-10-13T01:00:00+00:00</updated><id>https://matterdark.github.io//usaco/2018/10/13/lamps</id><content type="html" xml:base="https://matterdark.github.io//usaco/2018/10/13/lamps.html">&lt;p&gt;To brighten up the gala dinner of the IOI’98 we have a set of &lt;strong&gt;N&lt;/strong&gt; (10 &amp;lt;= N &amp;lt;= 100) colored lamps numbered from 1 to &lt;strong&gt;N&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The lamps are connected to four buttons:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Button 1: When this button is pressed, all the lamps change their state: those that are ON are turned OFF and those that are OFF are turned ON.&lt;/li&gt;
  &lt;li&gt;Button 2: Changes the state of all the odd numbered lamps.&lt;/li&gt;
  &lt;li&gt;Button 3: Changes the state of all the even numbered lamps.&lt;/li&gt;
  &lt;li&gt;Button 4: Changes the state of the lamps whose number is of the form 3xK+1 (with K&amp;gt;=0), i.e., 1,4,7,…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A counter C records the total number of button presses.&lt;/p&gt;

&lt;p&gt;When the party starts, all the lamps are ON and the counter C is set to zero.&lt;/p&gt;

&lt;p&gt;You are given the value of counter C (0 &amp;lt;= C &amp;lt;= 10000) and the final state of some of the lamps after some operations have been executed. Write a program to determine all the possible final configurations of the N lamps that are consistent with the given information, without repetitions.&lt;/p&gt;

&lt;h3 id=&quot;program-name-lamps&quot;&gt;PROGRAM NAME: lamps&lt;/h3&gt;

&lt;h3 id=&quot;input-format&quot;&gt;INPUT FORMAT&lt;/h3&gt;

&lt;p&gt;No lamp will be listed twice in the input.&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Line 1:&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Line 2:&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Final value of C&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Line 3:&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Some lamp numbers ON in the final configuration, separated by one space and terminated by the integer -1.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Line 4:&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Some lamp numbers OFF in the final configuration, separated by one space and terminated by the integer -1.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;sample-input-file-lampsin&quot;&gt;SAMPLE INPUT (file lamps.in)&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;10
1
-1
7 -1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this case, there are 10 lamps and only one button has been pressed. Lamp 7 is OFF in the final configuration.&lt;/p&gt;

&lt;h3 id=&quot;output-format&quot;&gt;OUTPUT FORMAT&lt;/h3&gt;

&lt;p&gt;Lines with all the possible final configurations (without repetitions) of all the lamps. Each line has N characters, where the first character represents the state of lamp 1 and the last character represents the state of lamp N. A 0 (zero) stands for a lamp that is OFF, and a 1 (one) stands for a lamp that is ON. The lines must be ordered from least to largest (as binary numbers).&lt;/p&gt;

&lt;p&gt;If there are no possible configurations, output a single line with the single word `IMPOSSIBLE’&lt;/p&gt;

&lt;h3 id=&quot;sample-output-file-lampsout&quot;&gt;SAMPLE OUTPUT (file lamps.out)&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0000000000
0101010101
0110110110
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this case, there are three possible final configurations:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;All lamps are OFF&lt;/li&gt;
  &lt;li&gt;Lamps 1, 3, 5, 7, 9 are OFF and lamps 2, 4, 6, 8, 10 are &lt;strong&gt;ON&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Lamps 1, 4, 7, 10 are OFF and lamps 2, 3, 5, 6, 8, 9 are &lt;strong&gt;ON&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">To brighten up the gala dinner of the IOI’98 we have a set of N (10 &amp;lt;= N &amp;lt;= 100) colored lamps numbered from 1 to N.</summary></entry><entry><title type="html">Runaround Numbers</title><link href="https://matterdark.github.io//usaco/2018/10/13/runround.html" rel="alternate" type="text/html" title="Runaround Numbers" /><published>2018-10-13T00:00:00+00:00</published><updated>2018-10-13T00:00:00+00:00</updated><id>https://matterdark.github.io//usaco/2018/10/13/runround</id><content type="html" xml:base="https://matterdark.github.io//usaco/2018/10/13/runround.html">&lt;p&gt;Runaround numbers are integers with unique digits, none of which is zero (e.g., 81362) that also have an interesting property, exemplified by this demonstration:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If you start at the left digit (8 in our number) and count that number of digits to the right (wrapping back to the first digit when no digits on the right are available), you’ll end up at a new digit (a number which does not end up at a new digit is not a Runaround Number). Consider: 8 1 3 6 2 which cycles through eight digits: 1 3 6 2 8 1 3 6 so the next digit is 6.&lt;/li&gt;
  &lt;li&gt;Repeat this cycle (this time for the six counts designed by the `6’) and you should end on a new digit: 2 8 1 3 6 2, namely 2.&lt;/li&gt;
  &lt;li&gt;Repeat again (two digits this time): 8 1&lt;/li&gt;
  &lt;li&gt;Continue again (one digit this time): 3&lt;/li&gt;
  &lt;li&gt;One more time: 6 2 8 and you have ended up back where you started, after touching each digit once. If you don’t end up back where you started after touching each digit once, your number is not a Runaround number.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Given a number M (that has anywhere from 1 through 9 digits), find and print the next runaround number higher than M, which will always fit into an unsigned long integer for the given test data.&lt;/p&gt;

&lt;h3 id=&quot;program-name-runround&quot;&gt;PROGRAM NAME: runround&lt;/h3&gt;

&lt;h3 id=&quot;input-format&quot;&gt;INPUT FORMAT&lt;/h3&gt;

&lt;p&gt;A single line with a single integer, M&lt;/p&gt;

&lt;h3 id=&quot;sample-input-file-runroundin&quot;&gt;SAMPLE INPUT (file runround.in)&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;81361
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;output-format&quot;&gt;OUTPUT FORMAT&lt;/h3&gt;

&lt;p&gt;A single line containing the next runaround number higher than the input value, M.&lt;/p&gt;

&lt;h3 id=&quot;sample-output-file-runroundout&quot;&gt;SAMPLE OUTPUT (file runround.out)&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;81362
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><summary type="html">Runaround numbers are integers with unique digits, none of which is zero (e.g., 81362) that also have an interesting property, exemplified by this demonstration:</summary></entry><entry><title type="html">Subset Sums</title><link href="https://matterdark.github.io//usaco/2018/10/12/subset.html" rel="alternate" type="text/html" title="Subset Sums" /><published>2018-10-12T00:00:00+00:00</published><updated>2018-10-12T00:00:00+00:00</updated><id>https://matterdark.github.io//usaco/2018/10/12/subset</id><content type="html" xml:base="https://matterdark.github.io//usaco/2018/10/12/subset.html">&lt;p&gt;For many sets of consecutive integers from 1 through N (1 &amp;lt;= N &amp;lt;= 39), one can partition the set into two sets whose sums are identical.&lt;/p&gt;

&lt;p&gt;For example, if N=3, one can partition the set {1, 2, 3} in one way so that the sums of both subsets are identical:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;{3} and {1,2}&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This counts as a single partitioning (i.e., reversing the order counts as the same partitioning and thus does not increase the count of partitions).&lt;/p&gt;

&lt;p&gt;If N=7, there are four ways to partition the set {1, 2, 3, … 7} so that each partition has the same sum:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;{1,6,7} and {2,3,4,5}&lt;/li&gt;
  &lt;li&gt;{2,5,7} and {1,3,4,6}&lt;/li&gt;
  &lt;li&gt;{3,4,7} and {1,2,5,6}&lt;/li&gt;
  &lt;li&gt;{1,2,4,7} and {3,5,6}&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Given N, your program should print the number of ways a set containing the integers from 1 through N can be partitioned into two sets whose sums are identical. Print 0 if there are no such ways.&lt;/p&gt;

&lt;p&gt;Your program must calculate the answer, not look it up from a table.&lt;/p&gt;

&lt;h3 id=&quot;program-name-subset&quot;&gt;PROGRAM NAME: subset&lt;/h3&gt;

&lt;h3 id=&quot;input-format&quot;&gt;INPUT FORMAT&lt;/h3&gt;

&lt;p&gt;The input file contains a single line with a single integer representing N, as above.&lt;/p&gt;

&lt;h3 id=&quot;sample-input-file-subsetin&quot;&gt;SAMPLE INPUT (file subset.in)&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;7
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;output-format&quot;&gt;OUTPUT FORMAT&lt;/h3&gt;

&lt;p&gt;The output file contains a single line with a single integer that tells how many same-sum partitions can be made from the set {1, 2, …, N}. The output file should contain 0 if there are no ways to make a same-sum partition.&lt;/p&gt;

&lt;h3 id=&quot;sample-output-file-subsetout&quot;&gt;SAMPLE OUTPUT (file subset.out)&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><summary type="html">For many sets of consecutive integers from 1 through N (1 &amp;lt;= N &amp;lt;= 39), one can partition the set into two sets whose sums are identical.</summary></entry><entry><title type="html">Preface Numbering</title><link href="https://matterdark.github.io//usaco/2018/10/11/preface.html" rel="alternate" type="text/html" title="Preface Numbering" /><published>2018-10-11T01:00:00+00:00</published><updated>2018-10-11T01:00:00+00:00</updated><id>https://matterdark.github.io//usaco/2018/10/11/preface</id><content type="html" xml:base="https://matterdark.github.io//usaco/2018/10/11/preface.html">&lt;p&gt;A certain book’s prefaces are numbered in upper case Roman numerals. Traditional Roman numeral values use a single letter to represent a certain subset of decimal numbers. Here is the standard set:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;I   1
V   5
X  10
L   50
C  100
D  500
M  1000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As many as three of the same marks that represent 10n may be placed consecutively to form other numbers:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;III is 3&lt;/li&gt;
  &lt;li&gt;CCC is 300&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Marks that have the value 5x10n are never used consecutively.&lt;/p&gt;

&lt;p&gt;Generally (with the exception of the next rule), marks are connected together and written in descending order to form even more numbers:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;CCLXVIII = 100+100+50+10+5+1+1+1 = 268&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sometimes, a mark that represents 10^n is placed before a mark of one of the two next higher values (I before V or X; X before L or C; etc.). In this case, the value of the smaller mark is SUBTRACTED from the mark it precedes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;IV = 4&lt;/li&gt;
  &lt;li&gt;IX = 9&lt;/li&gt;
  &lt;li&gt;XL = 40&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This compound mark forms a unit and may not be combined to make another compound mark (e.g., IXL is wrong for 39; XXXIX is correct).&lt;/p&gt;

&lt;p&gt;Compound marks like XD, IC, and XM are not legal, since the smaller mark is too much smaller than the larger one. For XD (wrong for 490), one would use CDXC; for IC (wrong for 99), one would use XCIX; for XM (wrong for 990), one would use CMXC. 90 is expressed XC and not LXL, since L followed by X connotes that successive marks are X or smaller (probably, anyway).&lt;/p&gt;

&lt;p&gt;Given N (1 &amp;lt;= N &amp;lt; 3,500), the number of pages in the preface of a book, calculate and print the number of I’s, V’s, etc. (in order from lowest to highest) required to typeset all the page numbers (in Roman numerals) from 1 through N. Do not print letters that do not appear in the page numbers specified.&lt;/p&gt;

&lt;p&gt;If N = 5, then the page numbers are: I, II, III, IV, V. The total number of I’s is 7 and the total number of V’s is 2.&lt;/p&gt;

&lt;h3 id=&quot;program-name-preface&quot;&gt;PROGRAM NAME: preface&lt;/h3&gt;

&lt;h3 id=&quot;input-format&quot;&gt;INPUT FORMAT&lt;/h3&gt;

&lt;p&gt;A single line containing the integer N.&lt;/p&gt;

&lt;h3 id=&quot;sample-input-file-prefacein&quot;&gt;SAMPLE INPUT (file preface.in)&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;output-format&quot;&gt;OUTPUT FORMAT&lt;/h3&gt;

&lt;p&gt;The output lines specify, in ascending order of Roman numeral letters, the letter, a single space, and the number of times that letter appears on preface page numbers. Stop printing letter totals after printing the highest value letter used to form preface numbers in the specified set.&lt;/p&gt;

&lt;h3 id=&quot;sample-output-file-prefaceout&quot;&gt;SAMPLE OUTPUT (file preface.out)&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;I 7
V 2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><summary type="html">A certain book’s prefaces are numbered in upper case Roman numerals. Traditional Roman numeral values use a single letter to represent a certain subset of decimal numbers. Here is the standard set:</summary></entry></feed>