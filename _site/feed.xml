<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator><link href="https://matterdark.github.io//feed.xml" rel="self" type="application/atom+xml" /><link href="https://matterdark.github.io//" rel="alternate" type="text/html" /><updated>2018-11-29T21:50:02+00:00</updated><id>https://matterdark.github.io//feed.xml</id><title type="html">Johan Vonk’s Website</title><subtitle>My personal static website created using Github Pages, Markdown, and Jekyll</subtitle><entry><title type="html">Overview</title><link href="https://matterdark.github.io//portfolio/2018/11/24/overview.html" rel="alternate" type="text/html" title="Overview" /><published>2018-11-24T00:00:00+00:00</published><updated>2018-11-24T00:00:00+00:00</updated><id>https://matterdark.github.io//portfolio/2018/11/24/overview</id><content type="html" xml:base="https://matterdark.github.io//portfolio/2018/11/24/overview.html">&lt;video controls=&quot;&quot;&gt;&lt;source src=&quot;https://coertvonk.com/wp-content/shield/a0f6-579d/8dadafd0a2a5752d825a90a18ec8f434.mp4&quot; type=&quot;video/mp4&quot;&gt;&lt;/video&gt;</content><author><name></name></author><summary type="html"></summary></entry><entry><title type="html">Fractions to Decimals</title><link href="https://matterdark.github.io//usaco/2018/11/01/fracdec.html" rel="alternate" type="text/html" title="Fractions to Decimals" /><published>2018-11-01T01:00:00+00:00</published><updated>2018-11-01T01:00:00+00:00</updated><id>https://matterdark.github.io//usaco/2018/11/01/fracdec</id><content type="html" xml:base="https://matterdark.github.io//usaco/2018/11/01/fracdec.html">&lt;p&gt;Write a program that will accept a fraction of the form N/D, where N is the numerator and D is the denominator and print the decimal representation. If the decimal representation has a repeating sequence of digits, indicate the sequence by enclosing it in brackets. For example, 1/3 = .33333333…is denoted as 0.(3), and 41/333 = 0.123123123…is denoted as 0.(123). Use xxx.0 to denote an integer. Typical conversions are:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1/3     =  0.(3)
22/5    =  4.4
1/7     =  0.(142857)
2/2     =  1.0
3/8     =  0.375
45/56   =  0.803(571428)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;program-name-fracdec&quot;&gt;PROGRAM NAME: fracdec&lt;/h3&gt;

&lt;h3 id=&quot;input-format&quot;&gt;INPUT FORMAT&lt;/h3&gt;

&lt;p&gt;A single line with two space separated integers, N and D, 1 &amp;lt;= N,D &amp;lt;= 100000.&lt;/p&gt;

&lt;h3 id=&quot;sample-input-file-fracdecin&quot;&gt;SAMPLE INPUT (file fracdec.in)&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;45 56
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;output-format&quot;&gt;OUTPUT FORMAT&lt;/h3&gt;

&lt;p&gt;The decimal expansion, as detailed above. If the expansion exceeds 76 characters in length, print it on multiple lines with 76 characters per line.&lt;/p&gt;

&lt;h3 id=&quot;sample-output-file-fracdecout&quot;&gt;SAMPLE OUTPUT (file fracdec.out)&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0.803(571428)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><summary type="html">Write a program that will accept a fraction of the form N/D, where N is the numerator and D is the denominator and print the decimal representation. If the decimal representation has a repeating sequence of digits, indicate the sequence by enclosing it in brackets. For example, 1/3 = .33333333…is denoted as 0.(3), and 41/333 = 0.123123123…is denoted as 0.(123). Use xxx.0 to denote an integer. Typical conversions are:</summary></entry><entry><title type="html">Cow Tours</title><link href="https://matterdark.github.io//usaco/2018/11/01/cowtour.html" rel="alternate" type="text/html" title="Cow Tours" /><published>2018-11-01T00:00:00+00:00</published><updated>2018-11-01T00:00:00+00:00</updated><id>https://matterdark.github.io//usaco/2018/11/01/cowtour</id><content type="html" xml:base="https://matterdark.github.io//usaco/2018/11/01/cowtour.html">&lt;p&gt;Farmer John has a number of pastures on his farm. Cow paths connect some pastures with certain other pastures, forming a field. But, at the present time, you can find at least two pastures that cannot be connected by any sequence of cow paths, thus partitioning Farmer John’s farm into multiple fields.&lt;/p&gt;

&lt;p&gt;Farmer John would like add a single a cow path between one pair of pastures using the constraints below.&lt;/p&gt;

&lt;p&gt;A field’s `diameter’ is defined to be the largest distance of all the shortest walks between any pair of pastures in the field. Consider the field below with five pastures, located at the points shown, and cow paths marked by lines:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;         15,15   20,15
           D       E
           *-------*
           |     _/|
           |   _/  |
           | _/    |
           |/      |
  *--------*-------*
  A        B       C
10,10    15,10   20,10
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The `diameter’ of this field is approximately 12.07106, since the longest of the set of shortest paths between pairs of pastures is the path from A to E (which includes the point set {A,B,E}). No other pair of pastures in this field is farther apart when connected by an optimal sequence of cow paths.&lt;/p&gt;

&lt;p&gt;Suppose an additional field on the same plane as above is connected by cow paths as follows:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;         *F 30,15
        / 
      _/  
    _/    
   /      
  *------*
  G      H
25,10  30,10
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Given just these two fields on his farm, Farmer John would add a cow path between a point in each of these two fields (namely point sets {A,B,C,D,E} and {F,G,H}) so that the joined set of pastures {A,B,C,D,E,F,G,H} has the smallest possible diameter.&lt;/p&gt;

&lt;p&gt;Note that cow paths do not connect just because they cross each other; they only connect at listed points.&lt;/p&gt;

&lt;p&gt;The input contains the pastures, their locations, and a symmetric “adjacency” matrix that tells whether pastures are connected by cow paths. Pastures are not considered to be connected to themselves. Here’s one annotated adjacency list for the pasture {A,B,C,D,E,F,G,H} as shown above:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  A B C D E F G H
A 0 1 0 0 0 0 0 0
B 1 0 1 1 1 0 0 0
C 0 1 0 0 1 0 0 0
D 0 1 0 0 1 0 0 0
E 0 1 1 1 0 0 0 0
F 0 0 0 0 0 0 1 0
G 0 0 0 0 0 1 0 1
H 0 0 0 0 0 0 1 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Other equivalent adjacency lists might permute the rows and columns by using some order other than alphabetical to show the point connections. The input data contains no names for the points.&lt;/p&gt;

&lt;p&gt;The input will contain at least two pastures that are not connected by any sequence of cow paths.&lt;/p&gt;

&lt;p&gt;Find a way to connect exactly two pastures in the input with a cow path so that the new combined field has the smallest possible diameter of any possible pair of connected pastures. Output that smallest possible diameter.&lt;/p&gt;

&lt;h3 id=&quot;program-name-cowtour&quot;&gt;PROGRAM NAME: cowtour&lt;/h3&gt;

&lt;h3 id=&quot;input-format&quot;&gt;INPUT FORMAT&lt;/h3&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Lines 1:&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;An integer, N (1 &amp;lt;= N &amp;lt;= 150), the number of pastures&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Lines 2-N+1:&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Two integers, X and Y (0 &amp;lt;= X ,Y&amp;lt;= 100000), that denote that X,Y grid location of the pastures; all input pastures are unique.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Line N+2-2*N+1:&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;lines, each containing N digits (0 or 1) that represent the adjacency matrix as described above, where the rows’ and columns’ indices are in order of the points just listed.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;sample-input-file-cowtourin&quot;&gt;SAMPLE INPUT (file cowtour.in)&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;8
10 10
15 10
20 10
15 15
20 15
30 15
25 10
30 10
01000000
10111000
01001000
01001000
01110000
00000010
00000101
00000010
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;output-format&quot;&gt;OUTPUT FORMAT&lt;/h3&gt;

&lt;p&gt;The output consists of a single line with the diameter of the newly joined pastures. Print the answer to exactly six decimal places. Do not perform any special rounding on your output.&lt;/p&gt;

&lt;h3 id=&quot;sample-output-file-cowtourout&quot;&gt;SAMPLE OUTPUT (file cowtour.out)&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;22.071068
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;output-explanation&quot;&gt;OUTPUT EXPLANATION&lt;/h3&gt;

&lt;p&gt;After trying all possible connection pairs, connecting C to G yields the minimum diameter.&lt;/p&gt;</content><author><name></name></author><summary type="html">Farmer John has a number of pastures on his farm. Cow paths connect some pastures with certain other pastures, forming a field. But, at the present time, you can find at least two pastures that cannot be connected by any sequence of cow paths, thus partitioning Farmer John’s farm into multiple fields.</summary></entry><entry><title type="html">Bessie Come Home</title><link href="https://matterdark.github.io//usaco/2018/10/28/comehome.html" rel="alternate" type="text/html" title="Bessie Come Home" /><published>2018-10-28T00:00:00+00:00</published><updated>2018-10-28T00:00:00+00:00</updated><id>https://matterdark.github.io//usaco/2018/10/28/comehome</id><content type="html" xml:base="https://matterdark.github.io//usaco/2018/10/28/comehome.html">&lt;p&gt;It’s dinner time, and the cows are out in their separate pastures. Farmer John rings the bell so they will start walking to the barn. Your job is to figure out which one cow gets to the barn first (the supplied test data will always have exactly one fastest cow).&lt;/p&gt;

&lt;p&gt;Between milkings, each cow is located in her own pasture, though some pastures have no cows in them. Each pasture is connected by a path to one or more other pastures (potentially including itself). Sometimes, two (potentially self-same) pastures are connected by more than one path. One or more of the pastures has a path to the barn. Thus, all cows have a path to the barn and they always know the shortest path. Of course, cows can go either direction on a path and they all walk at the same speed.&lt;/p&gt;

&lt;p&gt;The pastures are labeled ‘a’..’z’ and ‘A’..’Y’. One cow is in each pasture labeled with a capital letter. No cow is in a pasture labeled with a lower case letter. The barn’s label is ‘Z’; no cows are in the barn, though.&lt;/p&gt;

&lt;h3 id=&quot;program-name-comehome&quot;&gt;PROGRAM NAME: comehome&lt;/h3&gt;

&lt;h3 id=&quot;input-format&quot;&gt;INPUT FORMAT&lt;/h3&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Lines 1:&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Integer P (1 &amp;lt;= P &amp;lt;= 10000) the number of paths that interconnect the pastures (and the barn)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Lines 2..P+1:&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Space separated, two letters and an integer: the names of the interconnected pastures/barn and the distance between them (1 &amp;lt;= distance &amp;lt;= 1000)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;sample-input-file-comehomein&quot;&gt;SAMPLE INPUT (file comehome.in)&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;5
A d 6
B d 3
C e 9
d Z 8
e Z 3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;output-format&quot;&gt;OUTPUT FORMAT&lt;/h3&gt;

&lt;p&gt;A single line containing two items: the capital letter name of the pasture of the cow that arrives first back at the barn, the length of the path followed by that cow.&lt;/p&gt;

&lt;h3 id=&quot;sample-output-file-comehomeout&quot;&gt;SAMPLE OUTPUT (file comehome.out)&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;B 11
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><summary type="html">It’s dinner time, and the cows are out in their separate pastures. Farmer John rings the bell so they will start walking to the barn. Your job is to figure out which one cow gets to the barn first (the supplied test data will always have exactly one fastest cow).</summary></entry><entry><title type="html">Overfencing</title><link href="https://matterdark.github.io//usaco/2018/10/23/maze1.html" rel="alternate" type="text/html" title="Overfencing" /><published>2018-10-23T01:00:00+00:00</published><updated>2018-10-23T01:00:00+00:00</updated><id>https://matterdark.github.io//usaco/2018/10/23/maze1</id><content type="html" xml:base="https://matterdark.github.io//usaco/2018/10/23/maze1.html">&lt;p&gt;Farmer John went crazy and created a huge maze of fences out in a field. Happily, he left out two fence segments on the edges, and thus created two “exits” for the maze. Even more happily, the maze he created by this overfencing experience is a ‘perfect’ maze: you can find a way out of the maze from any point inside it.&lt;/p&gt;

&lt;p&gt;Given W (1 &amp;lt;= W &amp;lt;= 38), the width of the maze; H (1 &amp;lt;= H &amp;lt;= 100), the height of the maze; 2*H+1 lines with width 2*W+1 characters that represent the maze in a format like that shown later - then calculate the number of steps required to exit the maze from the ‘worst’ point in the maze (the point that is ‘farther’ from either exit even when walking optimally to the closest exit). Of course, cows walk only parallel or perpendicular to the x-y axes; they do not walk on a diagonal. Each move to a new square counts as a single unit of distance (including the move “out” of the maze.&lt;/p&gt;

&lt;p&gt;Here’s what one particular W=5, H=3 maze looks like:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;+-+-+-+-+-+
|         |
+-+ +-+ + +
|     | | |
+ +-+-+ + +
| |     |  
+-+ +-+-+-+
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Fenceposts appear only in odd numbered rows and and odd numbered columns (as in the example). The format should be obvious and self explanatory. Each maze has exactly two blank walls on the outside for exiting.&lt;/p&gt;

&lt;h3 id=&quot;program-name-maze1&quot;&gt;PROGRAM NAME: maze1&lt;/h3&gt;

&lt;h3 id=&quot;input-format&quot;&gt;INPUT FORMAT&lt;/h3&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Lines 1:&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;W and H, space separated&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Lines 2 through 2*H+2:&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;2*W+1 characters that represent the maze&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;sample-input-file-maze1in&quot;&gt;SAMPLE INPUT (file maze1.in)&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;5 3
+-+-+-+-+-+
|         |
+-+ +-+ + +
|     | | |
+ +-+-+ + +
| |     |  
+-+ +-+-+-+
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;output-format&quot;&gt;OUTPUT FORMAT&lt;/h3&gt;

&lt;p&gt;A single integer on a single output line. The integer specifies the minimal number of steps that guarantee a cow can exit the maze from any possible point inside the maze.&lt;/p&gt;

&lt;h3 id=&quot;sample-output-file-maze1out&quot;&gt;SAMPLE OUTPUT (file maze1.out)&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;9
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The lower left-hand corner is &lt;strong&gt;nine&lt;/strong&gt; steps from the closest exit.&lt;/p&gt;</content><author><name></name></author><summary type="html">Farmer John went crazy and created a huge maze of fences out in a field. Happily, he left out two fence segments on the edges, and thus created two “exits” for the maze. Even more happily, the maze he created by this overfencing experience is a ‘perfect’ maze: you can find a way out of the maze from any point inside it.</summary></entry><entry><title type="html">The Tamworth Two</title><link href="https://matterdark.github.io//usaco/2018/10/23/ttwo.html" rel="alternate" type="text/html" title="The Tamworth Two" /><published>2018-10-23T00:00:00+00:00</published><updated>2018-10-23T00:00:00+00:00</updated><id>https://matterdark.github.io//usaco/2018/10/23/ttwo</id><content type="html" xml:base="https://matterdark.github.io//usaco/2018/10/23/ttwo.html">&lt;p&gt;A pair of cows is loose somewhere in the forest. Farmer John is lending his expertise to their capture. Your task is to model their behavior.&lt;/p&gt;

&lt;p&gt;The chase takes place on a 10 by 10 planar grid. Squares can be empty or they can contain:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;an obstacle,&lt;/li&gt;
  &lt;li&gt;the cows (who always travel together), or&lt;/li&gt;
  &lt;li&gt;Farmer John.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The cows and Farmer John can occupy the same square (when they `meet’) but neither the cows nor Farmer John can share a square with an obstacle.&lt;/p&gt;

&lt;p&gt;Each square is represented as follows:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;. Empty square
* Obstacle
C Cows
F Farmer
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here is a sample grid:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;*...*.....
......*...
...*...*..
..........
...*.F....
*.....*...
...*......
..C......*
...*.*....
.*.*......
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The cows wander around the grid in a fixed way. Each minute, they either move forward or rotate. Normally, they move one square in the direction they are facing. If there is an obstacle in the way or they would leave the board by walking `forward’, then they spend the entire minute rotating 90 degrees clockwise.&lt;/p&gt;

&lt;p&gt;Farmer John, wise in the ways of cows, moves in exactly the same way.&lt;/p&gt;

&lt;p&gt;The farmer and the cows can be considered to move simultaneously during each minute. If the farmer and the cows pass each other while moving, they are not considered to have met. The chase ends when Farmer John and the cows occupy the same square at the end of a minute.&lt;/p&gt;

&lt;p&gt;Read a ten-line grid that represents the initial state of the cows, Farmer John, and obstacles. Each of the ten lines contains exactly ten characters using the coding above. There is guaranteed to be only one farmer and one pair of cows. The cows and Farmer John will not initially be on the same square.&lt;/p&gt;

&lt;p&gt;Calculate the number of minutes until the cows and Farmer John meet. Assume both the cows and farmer begin the simulation facing in the ‘north’ direction. Print 0 if they will never meet.&lt;/p&gt;

&lt;h3 id=&quot;program-name-ttwo&quot;&gt;PROGRAM NAME: ttwo&lt;/h3&gt;

&lt;h3 id=&quot;input-format&quot;&gt;INPUT FORMAT&lt;/h3&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Lines 1-10:&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Ten lines of ten characters each, as explained above&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;sample-input-file-ttwoin&quot;&gt;SAMPLE INPUT (file ttwo.in)&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;*...*.....
......*...
...*...*..
..........
...*.F....
*.....*...
...*......
..C......*
...*.*....
.*.*......
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;output-format&quot;&gt;OUTPUT FORMAT&lt;/h3&gt;

&lt;p&gt;A single line with the integer number of minutes until Farmer John and the cows meet. Print 0 if they will never meet.&lt;/p&gt;

&lt;h3 id=&quot;sample-output-file-ttwoout&quot;&gt;SAMPLE OUTPUT (file ttwo.out)&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;49
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><summary type="html">A pair of cows is loose somewhere in the forest. Farmer John is lending his expertise to their capture. Your task is to model their behavior.</summary></entry><entry><title type="html">Controlling Companies</title><link href="https://matterdark.github.io//usaco/2018/10/18/concom.html" rel="alternate" type="text/html" title="Controlling Companies" /><published>2018-10-18T01:00:00+00:00</published><updated>2018-10-18T01:00:00+00:00</updated><id>https://matterdark.github.io//usaco/2018/10/18/concom</id><content type="html" xml:base="https://matterdark.github.io//usaco/2018/10/18/concom.html">&lt;p&gt;Some companies are partial owners of other companies because they have acquired part of their total shares of stock. For example, Ford at one point owned 12% of Mazda. It is said that a company A controls company B if at least one of the following conditions is satisfied:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Company A = Company B&lt;/li&gt;
  &lt;li&gt;Company A owns more than 50% of Company B&lt;/li&gt;
  &lt;li&gt;Company A controls K (K &amp;gt;= 1) companies denoted C1, …, CK with each company Ci owning xi% of company B and x1 + …. + xK &amp;gt; 50%.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Given a list of triples (i,j,p) which denote company i owning p% of company j, calculate all the pairs (h,s) in which company h controls company s. There are at most 100 companies.&lt;/p&gt;

&lt;p&gt;Write a program to read the list of triples (i,j,p) where i, j and p are positive integers all in the range (1..100) and find all the pairs (h,s) so that company h controls company s.&lt;/p&gt;

&lt;h3 id=&quot;program-name-concom&quot;&gt;PROGRAM NAME: concom&lt;/h3&gt;

&lt;h3 id=&quot;input-format&quot;&gt;INPUT FORMAT&lt;/h3&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Line 1:&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;N, the number of input triples to follow&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Line 2..n+1:&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Three integers per line as a triple (i,j,p) described above.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;sample-input-file-concomin&quot;&gt;SAMPLE INPUT (file concom.in)&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;3
1 2 80
2 3 80
3 1 20
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;output-format&quot;&gt;OUTPUT FORMAT&lt;/h3&gt;

&lt;p&gt;List 0 or more companies that control other companies. Each line contains two integers that denote that the company whose number is the first integer controls the company whose number is the second integer. Order the lines in ascending order of the first integer (and ascending order of the second integer to break ties). Do not print that a company controls itself.&lt;/p&gt;

&lt;h3 id=&quot;sample-output-file-concomout&quot;&gt;SAMPLE OUTPUT (file concom.out)&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1 2
1 3
2 3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><summary type="html">Some companies are partial owners of other companies because they have acquired part of their total shares of stock. For example, Ford at one point owned 12% of Mazda. It is said that a company A controls company B if at least one of the following conditions is satisfied:</summary></entry><entry><title type="html">Money Systems</title><link href="https://matterdark.github.io//usaco/2018/10/18/money.html" rel="alternate" type="text/html" title="Money Systems" /><published>2018-10-18T00:00:00+00:00</published><updated>2018-10-18T00:00:00+00:00</updated><id>https://matterdark.github.io//usaco/2018/10/18/money</id><content type="html" xml:base="https://matterdark.github.io//usaco/2018/10/18/money.html">&lt;p&gt;The cows have not only created their own government but they have chosen to create their own money system. In their own rebellious way, they are curious about values of coinage. Traditionally, coins come in values like 1, 5, 10, 20 or 25, 50, and 100 units, sometimes with a 2 unit coin thrown in for good measure.&lt;/p&gt;

&lt;p&gt;The cows want to know how many different ways it is possible to dispense a certain amount of money using various coin systems. For instance, using a system of {1, 2, 5, 10, …} it is possible to create 18 units several different ways, including: 18x1, 9x2, 8x2+2x1, 3x5+2+1, and many others.&lt;/p&gt;

&lt;p&gt;Write a program to compute how many ways to construct a given amount of money using supplied coinage. It is guaranteed that the total will fit into both a signed long long (C/C++) and Int64 (Free Pascal).&lt;/p&gt;

&lt;h3 id=&quot;program-name-money&quot;&gt;PROGRAM NAME: money&lt;/h3&gt;

&lt;h3 id=&quot;input-format&quot;&gt;INPUT FORMAT&lt;/h3&gt;

&lt;p&gt;The number of coins in the system is V (1 &amp;lt;= V &amp;lt;= 25).&lt;/p&gt;

&lt;p&gt;The amount money to construct is N (1 &amp;lt;= N &amp;lt;= 10,000).&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Line 1:&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Two integers, V and N&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Lines 2..:&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;V integers that represent the available coins (no particular number of integers per line)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;sample-input-file-moneyin&quot;&gt;SAMPLE INPUT (file money.in)&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;3 10
1 2 5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;output-format&quot;&gt;OUTPUT FORMAT&lt;/h3&gt;

&lt;p&gt;A single line containing the total number of ways to construct N money units using V coins.&lt;/p&gt;

&lt;h3 id=&quot;sample-output-file-moneyout&quot;&gt;SAMPLE OUTPUT (file money.out)&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;10
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><summary type="html">The cows have not only created their own government but they have chosen to create their own money system. In their own rebellious way, they are curious about values of coinage. Traditionally, coins come in values like 1, 5, 10, 20 or 25, 50, and 100 units, sometimes with a 2 unit coin thrown in for good measure.</summary></entry><entry><title type="html">Zero Sum</title><link href="https://matterdark.github.io//usaco/2018/10/16/zerosum.html" rel="alternate" type="text/html" title="Zero Sum" /><published>2018-10-16T02:00:00+00:00</published><updated>2018-10-16T02:00:00+00:00</updated><id>https://matterdark.github.io//usaco/2018/10/16/zerosum</id><content type="html" xml:base="https://matterdark.github.io//usaco/2018/10/16/zerosum.html">&lt;p&gt;Consider the sequence of digits from 1 through N (where N=9) in increasing order: 1 2 3 … N.&lt;/p&gt;

&lt;p&gt;Now insert either a `+’ for addition or a `-‘ for subtraction or a ` ‘ [blank] to run the digits together between each pair of digits (not in front of the first digit). Calculate the result that of the expression and see if you get zero.&lt;/p&gt;

&lt;p&gt;Write a program that will find all sequences of length N that produce a zero sum.&lt;/p&gt;

&lt;h3 id=&quot;program-name-zerosum&quot;&gt;PROGRAM NAME: zerosum&lt;/h3&gt;

&lt;h3 id=&quot;input-format&quot;&gt;INPUT FORMAT&lt;/h3&gt;

&lt;p&gt;A single line with the integer N (3 &amp;lt;= N &amp;lt;= 9).&lt;/p&gt;

&lt;h3 id=&quot;sample-input-file-zerosumin&quot;&gt;SAMPLE INPUT (file zerosum.in)&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;7
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;output-format&quot;&gt;OUTPUT FORMAT&lt;/h3&gt;

&lt;p&gt;In ASCII order, show each sequence that can create 0 sum with a `+’, `-‘, or ` ‘ between each pair of numbers.&lt;/p&gt;

&lt;h3 id=&quot;sample-output-file-zerosumout&quot;&gt;SAMPLE OUTPUT (file zerosum.out)&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1+2-3+4-5-6+7
1+2-3-4+5+6-7
1-2 3+4+5+6+7
1-2 3-4 5+6 7
1-2+3+4-5+6-7
1-2-3-4-5+6+7
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><summary type="html">Consider the sequence of digits from 1 through N (where N=9) in increasing order: 1 2 3 … N.</summary></entry><entry><title type="html">Cow Pedigrees</title><link href="https://matterdark.github.io//usaco/2018/10/16/nocows.html" rel="alternate" type="text/html" title="Cow Pedigrees" /><published>2018-10-16T01:00:00+00:00</published><updated>2018-10-16T01:00:00+00:00</updated><id>https://matterdark.github.io//usaco/2018/10/16/nocows</id><content type="html" xml:base="https://matterdark.github.io//usaco/2018/10/16/nocows.html">&lt;p&gt;Farmer John is considering purchasing a new herd of cows. In this new herd, each mother cow gives birth to two children. The relationships among the cows can easily be represented by one or more binary trees with a total of N (3 &amp;lt;= N &amp;lt; 200) nodes. The trees have these properties:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The degree of each node is 0 or 2. The degree is the count of the node’s immediate children.&lt;/li&gt;
  &lt;li&gt;The height of the tree is equal to K (1 &amp;lt; K &amp;lt; 100). The height is the number of nodes on the longest path from the root to any leaf; a leaf is a node with no children.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;How many different possible pedigree structures are there? A pedigree is different if its tree structure differs from that of another pedigree. Output the remainder when the total number of different possible pedigrees is divided by 9901.&lt;/p&gt;

&lt;h3 id=&quot;program-name-nocows&quot;&gt;PROGRAM NAME: nocows&lt;/h3&gt;

&lt;h3 id=&quot;input-format&quot;&gt;INPUT FORMAT&lt;/h3&gt;

&lt;p&gt;Line 1: Two space-separated integers, N and K.&lt;/p&gt;

&lt;h3 id=&quot;sample-input-file-nocowsin&quot;&gt;SAMPLE INPUT (file nocows.in)&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;5 3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;output-format&quot;&gt;OUTPUT FORMAT&lt;/h3&gt;

&lt;p&gt;Line 1: One single integer number representing the number of possible pedigrees MODULO 9901.&lt;/p&gt;

&lt;h3 id=&quot;sample-output-file-nocowsout&quot;&gt;SAMPLE OUTPUT (file nocows.out)&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;output-details&quot;&gt;OUTPUT DETAILS&lt;/h3&gt;

&lt;p&gt;Two possible pedigrees have 5 nodes and height equal to 3:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    @                   @      
   / \                 / \
  @   @      and      @   @
 / \                     / \
@   @                   @   @
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><summary type="html">Farmer John is considering purchasing a new herd of cows. In this new herd, each mother cow gives birth to two children. The relationships among the cows can easily be represented by one or more binary trees with a total of N (3 &amp;lt;= N &amp;lt; 200) nodes. The trees have these properties:</summary></entry></feed>