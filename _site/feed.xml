<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator><link href="https://matterdark.github.io//feed.xml" rel="self" type="application/atom+xml" /><link href="https://matterdark.github.io//" rel="alternate" type="text/html" /><updated>2018-11-28T02:42:20+00:00</updated><id>https://matterdark.github.io//feed.xml</id><title type="html">Johan Vonk’s Website</title><subtitle>My personal website created using Github Pages, Markdown, and Jekyll</subtitle><entry><title type="html">Overview</title><link href="https://matterdark.github.io//portfolio/2018/11/24/overview.html" rel="alternate" type="text/html" title="Overview" /><published>2018-11-24T00:00:00+00:00</published><updated>2018-11-24T00:00:00+00:00</updated><id>https://matterdark.github.io//portfolio/2018/11/24/overview</id><content type="html" xml:base="https://matterdark.github.io//portfolio/2018/11/24/overview.html">&lt;video controls=&quot;&quot;&gt;&lt;source src=&quot;https://coertvonk.com/wp-content/shield/a0f6-579d/8dadafd0a2a5752d825a90a18ec8f434.mp4&quot; type=&quot;video/mp4&quot;&gt;&lt;/video&gt;</content><author><name></name></author><summary type="html"></summary></entry><entry><title type="html">Mother’s Milk</title><link href="https://matterdark.github.io//usaco/2018/10/03/milk3.html" rel="alternate" type="text/html" title="Mother's Milk" /><published>2018-10-03T00:00:00+00:00</published><updated>2018-10-03T00:00:00+00:00</updated><id>https://matterdark.github.io//usaco/2018/10/03/milk3</id><content type="html" xml:base="https://matterdark.github.io//usaco/2018/10/03/milk3.html">&lt;p&gt;Farmer John has three milking buckets of capacity A, B, and C liters. Each of the numbers A, B, and C is an integer from 1 through 20, inclusive. Initially, buckets A and B are empty while bucket C is full of milk. Sometimes, FJ pours milk from one bucket to another until the second bucket is filled or the first bucket is empty. Once begun, a pour must be completed, of course. Being thrifty, no milk may be tossed out.&lt;/p&gt;

&lt;p&gt;Write a program to help FJ determine what amounts of milk he can leave in bucket C when he begins with three buckets as above, pours milk among the buckets for a while, and then notes that bucket A is empty.&lt;/p&gt;

&lt;h3 id=&quot;program-name-milk3&quot;&gt;PROGRAM NAME: milk3&lt;/h3&gt;

&lt;h3 id=&quot;input-format&quot;&gt;INPUT FORMAT&lt;/h3&gt;

&lt;p&gt;A single line with the three integers A, B, and C.&lt;/p&gt;

&lt;h3 id=&quot;sample-input-file-milk3in&quot;&gt;SAMPLE INPUT (file milk3.in)&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;8 9 10
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;output-format&quot;&gt;OUTPUT FORMAT&lt;/h3&gt;

&lt;p&gt;A single line with a sorted list of all the possible amounts of milk that can be in bucket C when bucket A is empty.&lt;/p&gt;

&lt;h3 id=&quot;sample-output-file-milk3out&quot;&gt;SAMPLE OUTPUT (file milk3.out)&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1 2 8 9 10
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;sample-input-file-milk3in-1&quot;&gt;SAMPLE INPUT (file milk3.in)&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;2 5 10
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;sample-output-file-milk3out-1&quot;&gt;SAMPLE OUTPUT (file milk3.out)&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;5 6 7 8 9 10
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><summary type="html">Farmer John has three milking buckets of capacity A, B, and C liters. Each of the numbers A, B, and C is an integer from 1 through 20, inclusive. Initially, buckets A and B are empty while bucket C is full of milk. Sometimes, FJ pours milk from one bucket to another until the second bucket is filled or the first bucket is empty. Once begun, a pour must be completed, of course. Being thrifty, no milk may be tossed out.</summary></entry><entry><title type="html">Arithmetic Progressions</title><link href="https://matterdark.github.io//usaco/2018/10/02/ariprog.html" rel="alternate" type="text/html" title="Arithmetic Progressions" /><published>2018-10-02T00:00:00+00:00</published><updated>2018-10-02T00:00:00+00:00</updated><id>https://matterdark.github.io//usaco/2018/10/02/ariprog</id><content type="html" xml:base="https://matterdark.github.io//usaco/2018/10/02/ariprog.html">&lt;p&gt;An arithmetic progression is a sequence of the form a, a+b, a+2b, …, a+nb where n=0, 1, 2, 3, … . For this problem, a is a non-negative integer and b is a positive integer.&lt;/p&gt;

&lt;p&gt;Write a program that finds all arithmetic progressions of length n in the set S of bisquares. The set of bisquares is defined as the set of all integers of the form p2 + q2 (where p and q are non-negative integers).&lt;/p&gt;

&lt;h3 id=&quot;time-limit-5-secs&quot;&gt;TIME LIMIT: 5 secs&lt;/h3&gt;

&lt;h3 id=&quot;program-name-ariprog&quot;&gt;PROGRAM NAME: ariprog&lt;/h3&gt;

&lt;h3 id=&quot;input-format&quot;&gt;INPUT FORMAT&lt;/h3&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Line 1:&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;N (3 &amp;lt;= N &amp;lt;= 25), the length of progressions for which to search&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Line 2:&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;M (1 &amp;lt;= M &amp;lt;= 250), an upper bound to limit the search to the bisquares with 0 &amp;lt;= p,q &amp;lt;= M.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;sample-input-file-ariprogin&quot;&gt;SAMPLE INPUT (file ariprog.in)&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;5
7
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;output-format&quot;&gt;OUTPUT FORMAT&lt;/h3&gt;

&lt;p&gt;If no sequence is found, a single line reading `NONE’. Otherwise, output one or more lines, each with two integers: the first element in a found sequence and the difference between consecutive elements in the same sequence. The lines should be ordered with smallest-difference sequences first and smallest starting number within those sequences first.&lt;/p&gt;

&lt;p&gt;There will be no more than 10,000 sequences.&lt;/p&gt;

&lt;h3 id=&quot;sample-output-file-ariprogout&quot;&gt;SAMPLE OUTPUT (file ariprog.out)&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1 4
37 4
2 8
29 8
1 12
5 12
13 12
17 12
5 20
2 24
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><summary type="html">An arithmetic progression is a sequence of the form a, a+b, a+2b, …, a+nb where n=0, 1, 2, 3, … . For this problem, a is a non-negative integer and b is a positive integer.</summary></entry><entry><title type="html">Ski Course Design</title><link href="https://matterdark.github.io//usaco/2018/10/01/skidesign.html" rel="alternate" type="text/html" title="Ski Course Design" /><published>2018-10-01T00:00:00+00:00</published><updated>2018-10-01T00:00:00+00:00</updated><id>https://matterdark.github.io//usaco/2018/10/01/skidesign</id><content type="html" xml:base="https://matterdark.github.io//usaco/2018/10/01/skidesign.html">&lt;p&gt;Farmer John has N hills on his farm (1 &amp;lt;= N &amp;lt;= 1,000), each with an integer elevation in the range 0 .. 100. In the winter, since there is abundant snow on these hills, FJ routinely operates a ski training camp.&lt;/p&gt;

&lt;p&gt;Unfortunately, FJ has just found out about a new tax that will be assessed next year on farms used as ski training camps. Upon careful reading of the law, however, he discovers that the official definition of a ski camp requires the difference between the highest and lowest hill on his property to be strictly larger than 17. Therefore, if he shortens his tallest hills and adds mass to increase the height of his shorter hills, FJ can avoid paying the tax as long as the new difference between the highest and lowest hill is at most 17.&lt;/p&gt;

&lt;p&gt;If it costs x^2 units of money to change the height of a hill by x units, what is the minimum amount of money FJ will need to pay? FJ can change the height of a hill only once, so the total cost for each hill is the square of the difference between its original and final height. FJ is only willing to change the height of each hill by an integer amount.&lt;/p&gt;

&lt;h3 id=&quot;program-name-skidesign&quot;&gt;PROGRAM NAME: skidesign&lt;/h3&gt;

&lt;h3 id=&quot;input-format&quot;&gt;INPUT FORMAT:&lt;/h3&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Line 1:&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;The integer N.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Lines 2..1+N:&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Each line contains the elevation of a single hill.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;sample-input-file-skidesignin&quot;&gt;SAMPLE INPUT (file skidesign.in):&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;5
20
4
1
24
21
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;input-details&quot;&gt;INPUT DETAILS:&lt;/h3&gt;

&lt;p&gt;FJ’s farm has 5 hills, with elevations 1, 4, 20, 21, and 24.&lt;/p&gt;

&lt;h3 id=&quot;output-format&quot;&gt;OUTPUT FORMAT:&lt;/h3&gt;

&lt;p&gt;The minimum amount FJ needs to pay to modify the elevations of his hills so the difference between largest and smallest is at most 17 units.&lt;/p&gt;

&lt;h3 id=&quot;sample-output-file-skidesignout&quot;&gt;SAMPLE OUTPUT (file skidesign.out):&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;18
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;output-details&quot;&gt;OUTPUT DETAILS:&lt;/h3&gt;

&lt;p&gt;FJ keeps the hills of heights 4, 20, and 21 as they are. He adds mass to the hill of height 1, bringing it to height 4 (cost = 3^2 = 9). He shortens the hill of height 24 to height 21, also at a cost of 3^2 = 9.&lt;/p&gt;</content><author><name></name></author><summary type="html">Farmer John has N hills on his farm (1 &amp;lt;= N &amp;lt;= 1,000), each with an integer elevation in the range 0 .. 100. In the winter, since there is abundant snow on these hills, FJ routinely operates a ski training camp.</summary></entry><entry><title type="html">Wormholes</title><link href="https://matterdark.github.io//usaco/2018/09/30/wormhole.html" rel="alternate" type="text/html" title="Wormholes" /><published>2018-09-30T04:00:00+00:00</published><updated>2018-09-30T04:00:00+00:00</updated><id>https://matterdark.github.io//usaco/2018/09/30/wormhole</id><content type="html" xml:base="https://matterdark.github.io//usaco/2018/09/30/wormhole.html">&lt;p&gt;Farmer John’s hobby of conducting high-energy physics experiments on weekends has backfired, causing N wormholes (2 &amp;lt;= N &amp;lt;= 12, N even) to materialize on his farm, each located at a distinct point on the 2D map of his farm (the x,y coordinates are both integers).&lt;/p&gt;

&lt;p&gt;According to his calculations, Farmer John knows that his wormholes will form N/2 connected pairs. For example, if wormholes A and B are connected as a pair, then any object entering wormhole A will exit wormhole B moving in the same direction, and any object entering wormhole B will similarly exit from wormhole A moving in the same direction. This can have rather unpleasant consequences.&lt;/p&gt;

&lt;p&gt;For example, suppose there are two paired wormholes A at (1,1) and B at (3,1), and that Bessie the cow starts from position (2,1) moving in the +x direction. Bessie will enter wormhole B [at (3,1)], exit from A [at (1,1)], then enter B again, and so on, getting trapped in an infinite cycle!&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   | . . . .
   | A &amp;gt; B .      Bessie will travel to B then
   + . . . .      A then across to B again
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Farmer John knows the exact location of each wormhole on his farm. He knows that Bessie the cow always walks in the +x direction, although he does not remember where Bessie is currently located.&lt;/p&gt;

&lt;p&gt;Please help Farmer John count the number of distinct pairings of the wormholes such that Bessie could possibly get trapped in an infinite cycle if she starts from an unlucky position. FJ doesn’t know which wormhole pairs with any other wormhole, so find all the possibilities (i.e., all the different ways that N wormholes could be paired such that Bessie can, in some way, get in a cycle). Note that a loop with a smaller number of wormholes might contribute a number of different sets of pairings to the total count as those wormholes that are not in the loop are paired in many different ways.&lt;/p&gt;

&lt;h3 id=&quot;program-name-wormhole&quot;&gt;PROGRAM NAME: wormhole&lt;/h3&gt;

&lt;h3 id=&quot;input-format&quot;&gt;INPUT FORMAT:&lt;/h3&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Line 1:&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;The number of wormholes, N.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Lines 2..1+N:&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Each line contains two space-separated integers describing the (x,y) coordinates of a single wormhole. Each coordinate is in the range 0..1,000,000,000.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;sample-input-file-wormholein&quot;&gt;SAMPLE INPUT (file wormhole.in):&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;4
0 0
1 0
1 1
0 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;input-details&quot;&gt;INPUT DETAILS:&lt;/h3&gt;

&lt;p&gt;There are 4 wormholes, forming the corners of a square.&lt;/p&gt;

&lt;h3 id=&quot;output-format&quot;&gt;OUTPUT FORMAT:&lt;/h3&gt;

&lt;p&gt;Line 1: The number of distinct pairings of wormholes such that Bessie could conceivably get stuck in a cycle walking from some starting point in the +x direction.&lt;/p&gt;

&lt;h3 id=&quot;sample-output-file-wormholeout&quot;&gt;SAMPLE OUTPUT (file wormhole.out):&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-`&quot;&gt;2
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;output-details&quot;&gt;OUTPUT DETAILS:&lt;/h3&gt;

&lt;p&gt;If we number the wormholes 1..4 as we read them from the input, then if wormhole 1 pairs with wormhole 2 and wormhole 3 pairs with wormhole 4, Bessie can get stuck if she starts anywhere between (0,0) and (1,0) or between (0,1) and (1,1).&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   | . . . .
   4 3 . . .      Bessie will travel to B then
   1-2-.-.-.      A then across to B again
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Similarly, with the same starting points, Bessie can get stuck in a cycle if the pairings are 1-3 and 2-4 (if Bessie enters WH#3 and comes out at WH#1, she then walks to WH#2 which transports here to WH#4 which directs her towards WH#3 again for a cycle).&lt;/p&gt;

&lt;p&gt;Only the pairings 1-4 and 2-3 allow Bessie to walk in the +x direction from any point in the 2D plane with no danger of cycling.&lt;/p&gt;</content><author><name></name></author><summary type="html">Farmer John’s hobby of conducting high-energy physics experiments on weekends has backfired, causing N wormholes (2 &amp;lt;= N &amp;lt;= 12, N even) to materialize on his farm, each located at a distinct point on the 2D map of his farm (the x,y coordinates are both integers).</summary></entry><entry><title type="html">Combination Lock</title><link href="https://matterdark.github.io//usaco/2018/09/30/combo.html" rel="alternate" type="text/html" title="Combination Lock" /><published>2018-09-30T01:00:00+00:00</published><updated>2018-09-30T01:00:00+00:00</updated><id>https://matterdark.github.io//usaco/2018/09/30/combo</id><content type="html" xml:base="https://matterdark.github.io//usaco/2018/09/30/combo.html">&lt;p&gt;Farmer John’s cows keep escaping from his farm and causing mischief. To try and prevent them from leaving, he purchases a fancy combination lock to keep his cows from opening the pasture gate.&lt;/p&gt;

&lt;p&gt;Knowing that his cows are quite clever, Farmer John wants to make sure they cannot easily open the lock by simply trying many different combinations. The lock has three dials, each numbered 1..N (1 &amp;lt;= N &amp;lt;= 100), where 1 and N are adjacent since the dials are circular. There are two combinations that open the lock, one set by Farmer John, and also a “master” combination set by the lock maker.&lt;/p&gt;

&lt;p&gt;The lock has a small tolerance for error, however, so it will open even if the numbers on the dials are each within at most 2 positions of a valid combination.&lt;/p&gt;

&lt;p&gt;For example, if Farmer John’s combination is (1,2,3) and the master combination is (4,5,6), the lock will open if its dials are set to (1,3,5) (since this is close enough to Farmer John’s combination) or to (2,4,8) (since this is close enough to the master combination). Note that (1,5,6) would not open the lock, since it is not close enough to any one single combination.&lt;/p&gt;

&lt;p&gt;Given Farmer John’s combination and the master combination, please determine the number of distinct settings for the dials that will open the lock. Order matters, so the setting (1,2,3) is distinct from (3,2,1).&lt;/p&gt;

&lt;h3 id=&quot;program-name-combo&quot;&gt;PROGRAM NAME: combo&lt;/h3&gt;

&lt;h3 id=&quot;input-format&quot;&gt;INPUT FORMAT:&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Line 1:&lt;/th&gt;
      &lt;th&gt;The integer N.&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Line 2:&lt;/td&gt;
      &lt;td&gt;Three space-separated integers, specifying Farmer John’s combination.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Line 3:&lt;/td&gt;
      &lt;td&gt;Three space-separated integers, specifying the master combination (possibly the same as Farmer John’s combination).&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;sample-input-file-comboin&quot;&gt;SAMPLE INPUT (file combo.in):&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;50
1 2 3
5 6 7
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;input-details&quot;&gt;INPUT DETAILS:&lt;/h3&gt;

&lt;p&gt;Each dial is numbered 1..50. Farmer John’s combination is (1,2,3), and the master combination is (5,6,7).&lt;/p&gt;

&lt;h3 id=&quot;output-format&quot;&gt;OUTPUT FORMAT:&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Line 1:&lt;/strong&gt; The number of distinct dial settings that will open the lock.&lt;/p&gt;

&lt;h3 id=&quot;sample-output-file-comboout&quot;&gt;SAMPLE OUTPUT (file combo.out):&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;249
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;sample-output-explanation&quot;&gt;SAMPLE OUTPUT EXPLANATION&lt;/h3&gt;

&lt;p&gt;Here’s a list:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1,1,1  2,2,4  3,4,2  4,4,5  5,4,8  6,5,6  7,5,9  3,50,2  50,1,4 
1,1,2  2,2,5  3,4,3  4,4,6  5,4,9  6,5,7  7,6,5  3,50,3  50,1,5 
1,1,3  2,3,1  3,4,4  4,4,7  5,5,5  6,5,8  7,6,6  3,50,4  50,2,1 
1,1,4  2,3,2  3,4,5  4,4,8  5,5,6  6,5,9  7,6,7  3,50,5  50,2,2 
1,1,5  2,3,3  3,4,6  4,4,9  5,5,7  6,6,5  7,6,8  49,1,1  50,2,3 
1,2,1  2,3,4  3,4,7  4,5,5  5,5,8  6,6,6  7,6,9  49,1,2  50,2,4 
1,2,2  2,3,5  3,4,8  4,5,6  5,5,9  6,6,7  7,7,5  49,1,3  50,2,5 
1,2,3  2,4,1  3,4,9  4,5,7  5,6,5  6,6,8  7,7,6  49,1,4  50,3,1 
1,2,4  2,4,2  3,5,5  4,5,8  5,6,6  6,6,9  7,7,7  49,1,5  50,3,2 
1,2,5  2,4,3  3,5,6  4,5,9  5,6,7  6,7,5  7,7,8  49,2,1  50,3,3 
1,3,1  2,4,4  3,5,7  4,6,5  5,6,8  6,7,6  7,7,9  49,2,2  50,3,4 
1,3,2  2,4,5  3,5,8  4,6,6  5,6,9  6,7,7  7,8,5  49,2,3  50,3,5 
1,3,3  3,1,1  3,5,9  4,6,7  5,7,5  6,7,8  7,8,6  49,2,4  50,4,1 
1,3,4  3,1,2  3,6,5  4,6,8  5,7,6  6,7,9  7,8,7  49,2,5  50,4,2 
1,3,5  3,1,3  3,6,6  4,6,9  5,7,7  6,8,5  7,8,8  49,3,1  50,4,3 
1,4,1  3,1,4  3,6,7  4,7,5  5,7,8  6,8,6  7,8,9  49,3,2  50,4,4 
1,4,2  3,1,5  3,6,8  4,7,6  5,7,9  6,8,7  1,50,1 49,3,3  50,4,5 
1,4,3  3,2,1  3,6,9  4,7,7  5,8,5  6,8,8  1,50,2 49,3,4  49,50,1
1,4,4  3,2,2  3,7,5  4,7,8  5,8,6  6,8,9  1,50,3 49,3,5  49,50,2
1,4,5  3,2,3  3,7,6  4,7,9  5,8,7  7,4,5  1,50,4 49,4,1  49,50,3
2,1,1  3,2,4  3,7,7  4,8,5  5,8,8  7,4,6  1,50,5 49,4,2  49,50,4
2,1,2  3,2,5  3,7,8  4,8,6  5,8,9  7,4,7  2,50,1 49,4,3  49,50,5
2,1,3  3,3,1  3,7,9  4,8,7  6,4,5  7,4,8  2,50,2 49,4,4  50,50,1
2,1,4  3,3,2  3,8,5  4,8,8  6,4,6  7,4,9  2,50,3 49,4,5  50,50,2
2,1,5  3,3,3  3,8,6  4,8,9  6,4,7  7,5,5  2,50,4 50,1,1  50,50,3
2,2,1  3,3,4  3,8,7  5,4,5  6,4,8  7,5,6  2,50,5 50,1,2  50,50,4
2,2,2  3,3,5  3,8,8  5,4,6  6,4,9  7,5,7  3,50,1 50,1,3  50,50,5
2,2,3  3,4,1  3,8,9  5,4,7  6,5,5  7,5,8
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><summary type="html">Farmer John’s cows keep escaping from his farm and causing mischief. To try and prevent them from leaving, he purchases a fancy combination lock to keep his cows from opening the pasture gate.</summary></entry><entry><title type="html">Prime Cryptarithm</title><link href="https://matterdark.github.io//usaco/2018/09/30/crypt1.html" rel="alternate" type="text/html" title="Prime Cryptarithm" /><published>2018-09-30T00:00:00+00:00</published><updated>2018-09-30T00:00:00+00:00</updated><id>https://matterdark.github.io//usaco/2018/09/30/crypt1</id><content type="html" xml:base="https://matterdark.github.io//usaco/2018/09/30/crypt1.html">&lt;p&gt;&lt;em&gt;This poorly named task has nothing to do with prime numbers or even, really, prime digits. Sorry ‘bout that.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;A cryptarithm is usually presented as a pencil-and-paper task in which the solver is required to substitute a digit for each of the asterisks (or, often, letters) in the manual evaluation of an arithmetic term or expression so that the consistent application of the digits results in a proper expression. A classic example is this cryptarithm, shown with its unique solution:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    SEND            9562       S-&amp;gt;9  E-&amp;gt;5  N-&amp;gt;6  D-&amp;gt;2
  + MORE          + 1085       M-&amp;gt;1  O-&amp;gt;0  R-&amp;gt;8
  -------        -------
   MONEY           10657       Y-&amp;gt;7
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The following cryptarithm is a multiplication problem that can be solved by substituting digits from a specified set of N digits into the positions marked with *. Since the asterisks are generic, any digit from the input set can be used for any of the asterisks; any digit may be duplicated as many times as desired.&lt;/p&gt;

&lt;p&gt;Consider using the set {2,3,5,7} for the cryptarithm below:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;      * * *
   x    * *
    -------
      * * *         &amp;lt;-- partial product 1 -- MUST BE 3 DIGITS LONG
    * * *           &amp;lt;-- partial product 2 -- MUST BE 3 DIGITS LONG
    -------
    * * * *
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Digits can appear only in places marked by `*’. Of course, leading zeroes are not allowed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The partial products must be three digits long&lt;/strong&gt;, even though the general case (see below) might have four digit partial products.&lt;/p&gt;

&lt;h3 id=&quot;note-about-cryptarithms-multiplication&quot;&gt;Note About Cryptarithm’s Multiplication&lt;/h3&gt;
&lt;p&gt;In USA, children are taught to perform multidigit multiplication as described here. Consider multiplying a three digit number whose digits are ‘a’, ‘b’, and ‘c’ by a two digit number whose digits are ‘d’ and ‘e’:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note that this diagram shows far more digits in its results than
the required diagram above which has three digit partial products!&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;          a b c     &amp;lt;-- number 'abc'
        x   d e     &amp;lt;-- number 'de'; the 'x' means 'multiply'
     -----------
p1      * * * *     &amp;lt;-- product of e * abc; first star might be 0 (absent)
p2    * * * *       &amp;lt;-- product of d * abc; first star might be 0 (absent)
     -----------
      * * * * *     &amp;lt;-- sum of p1 and p2 (e*abc + 10*d*abc) == de*abc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note that the ‘partial products’ are as taught in USA schools. The first partial product is the product of the final digit of the second number and the top number. The second partial product is the product of the first digit of the second number and the top number.&lt;/p&gt;

&lt;p&gt;Write a program that will find all solutions to the cryptarithm above for any subset of supplied non-zero single-digits. Note that the multiplicands, partial products, and answers must all conform to the cryptarithm’s framework.&lt;/p&gt;

&lt;h3 id=&quot;program-name-crypt1&quot;&gt;PROGRAM NAME: crypt1&lt;/h3&gt;

&lt;h3 id=&quot;input-format&quot;&gt;INPUT FORMAT&lt;/h3&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Line 1:&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;N, the number of digits that will be used&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Line 2:&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;N space separated non-zero digits with which to solve the cryptarithm&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;sample-input-file-crypt1in&quot;&gt;SAMPLE INPUT (file crypt1.in)&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;5
2 3 4 6 8
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;output-format&quot;&gt;OUTPUT FORMAT&lt;/h3&gt;

&lt;p&gt;A single line with the total number of solutions. Here is the one and only solution for the sample input:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;      2 2 2
    x   2 2
     ------
      4 4 4
    4 4 4
  ---------
    4 8 8 4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;sample-output-file-crypt1out&quot;&gt;SAMPLE OUTPUT (file crypt1.out)&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;output-details&quot;&gt;OUTPUT DETAILS&lt;/h3&gt;

&lt;p&gt;Here’s why 222x22 works: 3 digits times 2 digits yields two (equal!) partial products, each of three digits (as required). The answer has four digits, as required. Each digit used {2, 4, 8} is in the supplied set {2, 3, 4, 6, 8}.&lt;/p&gt;

&lt;p&gt;Why 222x23 doesn’t work:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;      2 2 2   &amp;lt;-- OK:  three digits, all members of {2, 3, 4, 6, 8}
        2 3   &amp;lt;-- OK:  two digits, all members of {2, 3, 4, 6, 8}
     ------
      6 6 6   &amp;lt;-- OK:  three digits, all members of {2, 3, 4, 6, 8}
    4 4 4     &amp;lt;-- OK:  three digits, all members of {2, 3, 4, 6, 8}
  ---------
    5 1 0 6   &amp;lt;-- NOT OK: four digits (good), but 5, 1, and 0 are not in
                                                    {2, 3, 4, 6, 8}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><summary type="html">This poorly named task has nothing to do with prime numbers or even, really, prime digits. Sorry ‘bout that.</summary></entry><entry><title type="html">Dual Palindromes</title><link href="https://matterdark.github.io//usaco/2018/09/29/dualpal.html" rel="alternate" type="text/html" title="Dual Palindromes" /><published>2018-09-29T04:00:00+00:00</published><updated>2018-09-29T04:00:00+00:00</updated><id>https://matterdark.github.io//usaco/2018/09/29/dualpal</id><content type="html" xml:base="https://matterdark.github.io//usaco/2018/09/29/dualpal.html">&lt;p&gt;A number that reads the same from right to left as when read from left to right is called a palindrome. The number 12321 is a palindrome; the number 77778 is not. Of course, palindromes have neither leading nor trailing zeroes, so 0220 is not a palindrome.&lt;/p&gt;

&lt;p&gt;The number 21 (base 10) is not palindrome in base 10, but the number 21 (base 10) is, in fact, a palindrome in base 2 (10101).&lt;/p&gt;

&lt;p&gt;Write a program that reads two numbers (expressed in base 10):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;N (1 &amp;lt;= N &amp;lt;= 15)&lt;/li&gt;
  &lt;li&gt;S (0 &amp;lt; S &amp;lt; 10000)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and then finds and prints (in base 10) the first N numbers strictly greater than S that are palindromic when written in two or more number bases (2 &amp;lt;= base &amp;lt;= 10).
Solutions to this problem do not require manipulating integers larger than the standard 32 bits.&lt;/p&gt;

&lt;h2 id=&quot;program-name-dualpal&quot;&gt;PROGRAM NAME: dualpal&lt;/h2&gt;

&lt;h2 id=&quot;input-format&quot;&gt;INPUT FORMAT&lt;/h2&gt;
&lt;p&gt;A single line with space separated integers N and S.&lt;/p&gt;

&lt;h2 id=&quot;sample-input-file-dualpalin&quot;&gt;SAMPLE INPUT (file dualpal.in)&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;3 25
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;output-format&quot;&gt;OUTPUT FORMAT&lt;/h2&gt;
&lt;p&gt;N lines, each with a base 10 number that is palindromic when expressed in at least two of the bases 2..10. The numbers should be listed in order from smallest to largest.&lt;/p&gt;

&lt;h2 id=&quot;sample-output-file-dualpalout&quot;&gt;SAMPLE OUTPUT (file dualpal.out)&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;26
27
28
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><summary type="html">A number that reads the same from right to left as when read from left to right is called a palindrome. The number 12321 is a palindrome; the number 77778 is not. Of course, palindromes have neither leading nor trailing zeroes, so 0220 is not a palindrome.</summary></entry><entry><title type="html">Barn Repair</title><link href="https://matterdark.github.io//usaco/2018/09/29/barn1.html" rel="alternate" type="text/html" title="Barn Repair" /><published>2018-09-29T03:00:00+00:00</published><updated>2018-09-29T03:00:00+00:00</updated><id>https://matterdark.github.io//usaco/2018/09/29/barn1</id><content type="html" xml:base="https://matterdark.github.io//usaco/2018/09/29/barn1.html">&lt;p&gt;It was a dark and stormy night that ripped the roof and gates off the stalls that hold Farmer John’s cows. Happily, many of the cows were on vacation, so the barn was not completely full.&lt;/p&gt;

&lt;p&gt;The cows spend the night in stalls that are arranged adjacent to each other in a long line. Some stalls have cows in them; some do not. All stalls are the same width.&lt;/p&gt;

&lt;p&gt;Farmer John must quickly erect new boards in front of the stalls, since the doors were lost. His new lumber supplier will supply him boards of any length he wishes, but the supplier can only deliver a small number of total boards. Farmer John wishes to minimize the total length of the boards he must purchase.&lt;/p&gt;

&lt;p&gt;Given M (1 &amp;lt;= M &amp;lt;= 50), the maximum number of boards that can be purchased; S (1 &amp;lt;= S &amp;lt;= 200), the total number of stalls; C (1 &amp;lt;= C &amp;lt;= S) the number of cows in the stalls, and the C occupied stall numbers (1 &amp;lt;= stall_number &amp;lt;= S), calculate the minimum number of stalls that must be blocked in order to block all the stalls that have cows in them.&lt;/p&gt;

&lt;p&gt;Print your answer as the total number of stalls blocked.&lt;/p&gt;

&lt;h3 id=&quot;program-name-barn1&quot;&gt;PROGRAM NAME: barn1&lt;/h3&gt;

&lt;h3 id=&quot;input-format&quot;&gt;INPUT FORMAT&lt;/h3&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Line 1:&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;M, S, and C (space separated)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Lines 2-C+1:&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Each line contains one integer, the number of an occupied stall.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;sample-input-file-barn1in&quot;&gt;SAMPLE INPUT (file barn1.in)&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;4 50 18
3
4
6
8
14
15
16
17
21
25
26
27
30
31
40
41
42
43
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;output-format&quot;&gt;OUTPUT FORMAT&lt;/h3&gt;

&lt;p&gt;A single line with one integer that represents the total number of stalls blocked.&lt;/p&gt;

&lt;h3 id=&quot;sample-output-file-barn1out&quot;&gt;SAMPLE OUTPUT (file barn1.out)&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;25
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;[One minimum arrangement is one board covering stalls 3-8, one covering 14-21, one covering 25-31, and one covering 40-43.]&lt;/p&gt;</content><author><name></name></author><summary type="html">It was a dark and stormy night that ripped the roof and gates off the stalls that hold Farmer John’s cows. Happily, many of the cows were on vacation, so the barn was not completely full.</summary></entry><entry><title type="html">Mixing Milk</title><link href="https://matterdark.github.io//usaco/2018/09/29/milk.html" rel="alternate" type="text/html" title="Mixing Milk" /><published>2018-09-29T03:00:00+00:00</published><updated>2018-09-29T03:00:00+00:00</updated><id>https://matterdark.github.io//usaco/2018/09/29/milk</id><content type="html" xml:base="https://matterdark.github.io//usaco/2018/09/29/milk.html">&lt;p&gt;The Merry Milk Makers company buys milk from farmers, packages it into attractive 1- and 2-Unit bottles, and then sells that milk to grocery stores so we can each start our day with delicious cereal and milk.&lt;/p&gt;

&lt;p&gt;Since milk packaging is such a difficult business in which to make money, it is important to keep the costs as low as possible. Help Merry Milk Makers purchase the farmers’ milk in the cheapest possible manner. The MMM company has an extraordinarily talented marketing department and knows precisely how much milk they need each day to package for their customers.&lt;/p&gt;

&lt;p&gt;The company has contracts with several farmers from whom they may purchase milk, and each farmer has a (potentially) different price at which they sell milk to the packing plant. Of course, a herd of cows can only produce so much milk each day, so the farmers already know how much milk they will have available.&lt;/p&gt;

&lt;p&gt;Each day, Merry Milk Makers can purchase an integer number of units of milk from each farmer, a number that is always less than or equal to the farmer’s limit (and might be the entire production from that farmer, none of the production, or any integer in between).&lt;/p&gt;

&lt;p&gt;Given:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The Merry Milk Makers’ daily requirement of milk&lt;/li&gt;
  &lt;li&gt;The cost per unit for milk from each farmer&lt;/li&gt;
  &lt;li&gt;The amount of milk available from each farmer&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;calculate the minimum amount of money that Merry Milk Makers must spend to meet their daily need for milk.&lt;/p&gt;

&lt;p&gt;Note: The total milk produced per day by the farmers will always be sufficient to meet the demands of the Merry Milk Makers even if the prices are high.&lt;/p&gt;

&lt;h3 id=&quot;program-name-milk&quot;&gt;PROGRAM NAME: milk&lt;/h3&gt;

&lt;h3 id=&quot;input-format&quot;&gt;INPUT FORMAT&lt;/h3&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Line 1:&lt;/td&gt;
      &lt;td&gt;Two integers, N and M. The first value, N, (0 &amp;lt;= N &amp;lt;= 2,000,000) is the amount of milk that Merry Milk Makers wants per day. The second, M, (0 &amp;lt;= M &amp;lt;= 5,000) is the number of farmers that they may buy from.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Lines 2 through M+1:&lt;/td&gt;
      &lt;td&gt;The next M lines each contain two integers: Pi and Ai. Pi (0 &amp;lt;= Pi &amp;lt;= 1,000) is price in cents that farmer i charges. Ai (0 &amp;lt;= Ai &amp;lt;= 2,000,000) is the amount of milk that farmer i can sell to Merry Milk Makers per day.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;sample-input-file-milkin&quot;&gt;SAMPLE INPUT (file milk.in)&lt;/h3&gt;

&lt;p&gt;100 5
5 20
9 40
3 10
8 80
6 30&lt;/p&gt;

&lt;h3 id=&quot;input-explanation&quot;&gt;INPUT EXPLANATION&lt;/h3&gt;

&lt;p&gt;100 5 – MMM wants 100 units of milk from 5 farmers&lt;br /&gt;
5 20 – Farmer 1 says, “I can sell you 20 units at 5 cents per unit”&lt;br /&gt;
9 40 etc.&lt;br /&gt;
3 10 – Farmer 3 says, “I can sell you 10 units at 3 cents per unit”&lt;br /&gt;
8 80 etc.&lt;br /&gt;
6 30 – Farmer 5 says, “I can sell you 30 units at 6 cents per unit”&lt;/p&gt;

&lt;h3 id=&quot;output-format&quot;&gt;OUTPUT FORMAT&lt;/h3&gt;

&lt;p&gt;A single line with a single integer that is the minimum cost that Merry Milk Makers must pay for one day’s milk.&lt;/p&gt;

&lt;h3 id=&quot;sample-output-file-milkout&quot;&gt;SAMPLE OUTPUT (file milk.out)&lt;/h3&gt;

&lt;p&gt;630&lt;/p&gt;

&lt;h3 id=&quot;output-explanation&quot;&gt;OUTPUT EXPLANATION&lt;/h3&gt;

&lt;p&gt;Here’s how the MMM company spent only 630 cents to purchase 100 units of milk:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Price per unit&lt;/th&gt;
      &lt;th&gt;Units available&lt;/th&gt;
      &lt;th&gt;Units bought&lt;/th&gt;
      &lt;th&gt;Price * # units&lt;/th&gt;
      &lt;th&gt;Total cost&lt;/th&gt;
      &lt;th&gt;Notes&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;20&lt;/td&gt;
      &lt;td&gt;20&lt;/td&gt;
      &lt;td&gt;5*20&lt;/td&gt;
      &lt;td&gt;100&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;40&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;Bought no milk from farmer 2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;10&lt;/td&gt;
      &lt;td&gt;10&lt;/td&gt;
      &lt;td&gt;3*10&lt;/td&gt;
      &lt;td&gt;30&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;80&lt;/td&gt;
      &lt;td&gt;40&lt;/td&gt;
      &lt;td&gt;8*40&lt;/td&gt;
      &lt;td&gt;320&lt;/td&gt;
      &lt;td&gt;Did not buy all 80 units!&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;30&lt;/td&gt;
      &lt;td&gt;30&lt;/td&gt;
      &lt;td&gt;6*30&lt;/td&gt;
      &lt;td&gt;180&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Total&lt;/td&gt;
      &lt;td&gt;180&lt;/td&gt;
      &lt;td&gt;100&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;630&lt;/td&gt;
      &lt;td&gt;Cheapest total cost&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;</content><author><name></name></author><summary type="html">The Merry Milk Makers company buys milk from farmers, packages it into attractive 1- and 2-Unit bottles, and then sells that milk to grocery stores so we can each start our day with delicious cereal and milk.</summary></entry></feed>