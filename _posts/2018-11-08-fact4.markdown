---
layout: default
title:  Factorials
date:   2018-11-08 0:00:00 +0000
categories: USACO
short: fact4
chapter: 3
section: 2
description: "Find the rightmost non-zero digit of an integer, N!"
---

The factorial of an integer N, written N!, is the product of all the integers from 1 through N inclusive. The factorial quickly becomes very large: 13! is too large to store in a 32-bit integer on most computers, and 70! is too large for most floating-point variables. Your task is to find the rightmost non-zero digit of n!. For example, 5! = 1 \* 2 \* 3 \* 4 \* 5 = 120, so the rightmost non-zero digit of 5! is 2. Likewise, 7! = 1 \* 2 \* 3 \* 4 \* 5 \* 6 \* 7 = 5040, so the rightmost non-zero digit of 7! is 4.

### PROGRAM NAME: fact4

### INPUT FORMAT

A single positive integer N no larger than 4,220.

### SAMPLE INPUT (file fact4.in)

```none
7
```

### OUTPUT FORMAT

A single line containing but a single digit: the right most non-zero digit of N! .

### SAMPLE OUTPUT (file fact4.out)

```none
4
```

{% contentfor analysis %}

<details>
<summary>
Russ Cox
</summary>

The insight for this problem is that 0's at the end of a number come from it being divisible by 10, or equivalently, by 2 and 5. Furthermore, there are always more 2s than 5s in a factorial.

To get the last digit of the factorial, we can run a loop to calculate it modulo 10, as long as we don't include any 2s or 5s in the product. Of course, we want to exclude the same number of 2s and 5s, so that all we're really doing is ignoring 10s. So after the loop, we need to multiply in any extra 2s that didn't have 5s to cancel them out.

```cpp
/*
PROG: fact4
ID: rsc001
*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <assert.h>

void
main(void)
{
	FILE *fin, *fout;
	int n2, n5, i, j, n, digit;

	fin = fopen("fact4.in", "r");
	fout = fopen("fact4.out", "w");
	assert(fin != NULL && fout != NULL);

	fscanf(fin, "%d", &n);
	digit = 1;
	n2 = n5 = 0;
	for(i=2; i<=n; i++) {
		j = i;
		while(j%2 == 0) {
			n2++;
			j /= 2;
		}
		while(j%5 == 0) {
			n5++;
			j /= 5;
		}
		digit = (digit * j) % 10;
	}

	for(i=0; i<n2-n5; i++)
		digit = (digit * 2) % 10;

	fprintf(fout, "%d\n", digit);
	exit(0);
}
```

</details>

{% endcontentfor %}